
STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb8  08007fb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc0  08007fc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013988  20000010  08007fd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013998  08007fd8  00023998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c862  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000376a  00000000  00000000  0003c8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00040010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  00041700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019324  00000000  00000000  00042c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012977  00000000  00000000  0005bf9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000987cc  00000000  00000000  0006e913  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001070df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006068  00000000  00000000  0010715c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800772c 	.word	0x0800772c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800772c 	.word	0x0800772c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <HAL_Init+0x40>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_Init+0x40>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x40>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f8fa 	bl	8000702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	2000      	movs	r0, #0
 8000510:	f006 ffe2 	bl	80074d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f006 fe2e 	bl	8007174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	2001373c 	.word	0x2001373c

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2001373c 	.word	0x2001373c

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_GetPriorityGrouping+0x18>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 0307 	and.w	r3, r3, #7
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <__NVIC_EnableIRQ+0x38>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f04f 32ff 	mov.w	r2, #4294967295
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43da      	mvns	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	401a      	ands	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4313      	orrs	r3, r2
         );
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff4c 	bl	80005a8 <__NVIC_SetPriorityGrouping>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072a:	f7ff ff61 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 800072e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	6978      	ldr	r0, [r7, #20]
 8000736:	f7ff ffb1 	bl	800069c <NVIC_EncodePriority>
 800073a:	4602      	mov	r2, r0
 800073c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff80 	bl	8000648 <__NVIC_SetPriority>
}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff54 	bl	800060c <__NVIC_EnableIRQ>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
 8000786:	e159      	b.n	8000a3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000788:	2201      	movs	r2, #1
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	4013      	ands	r3, r2
 800079a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800079c:	693a      	ldr	r2, [r7, #16]
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	f040 8148 	bne.w	8000a36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	d003      	beq.n	80007b6 <HAL_GPIO_Init+0x4a>
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b12      	cmp	r3, #18
 80007b4:	d123      	bne.n	80007fe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	08da      	lsrs	r2, r3, #3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3208      	adds	r2, #8
 80007be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	220f      	movs	r2, #15
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	4013      	ands	r3, r2
 80007d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	691a      	ldr	r2, [r3, #16]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	f003 0307 	and.w	r3, r3, #7
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	69ba      	ldr	r2, [r7, #24]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	08da      	lsrs	r2, r3, #3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3208      	adds	r2, #8
 80007f8:	69b9      	ldr	r1, [r7, #24]
 80007fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	2203      	movs	r2, #3
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	4013      	ands	r3, r2
 8000814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 0203 	and.w	r2, r3, #3
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	4313      	orrs	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	69ba      	ldr	r2, [r7, #24]
 8000830:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00b      	beq.n	8000852 <HAL_GPIO_Init+0xe6>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d007      	beq.n	8000852 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	2b11      	cmp	r3, #17
 8000848:	d003      	beq.n	8000852 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b12      	cmp	r3, #18
 8000850:	d130      	bne.n	80008b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	2203      	movs	r2, #3
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4013      	ands	r3, r2
 8000868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	68da      	ldr	r2, [r3, #12]
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4313      	orrs	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000888:	2201      	movs	r2, #1
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4013      	ands	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	091b      	lsrs	r3, r3, #4
 800089e:	f003 0201 	and.w	r2, r3, #1
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	2203      	movs	r2, #3
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	4313      	orrs	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	f000 80a2 	beq.w	8000a36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b56      	ldr	r3, [pc, #344]	; (8000a50 <HAL_GPIO_Init+0x2e4>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a55      	ldr	r2, [pc, #340]	; (8000a50 <HAL_GPIO_Init+0x2e4>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b53      	ldr	r3, [pc, #332]	; (8000a50 <HAL_GPIO_Init+0x2e4>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800090e:	4a51      	ldr	r2, [pc, #324]	; (8000a54 <HAL_GPIO_Init+0x2e8>)
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	3302      	adds	r3, #2
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f003 0303 	and.w	r3, r3, #3
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	220f      	movs	r2, #15
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4013      	ands	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a48      	ldr	r2, [pc, #288]	; (8000a58 <HAL_GPIO_Init+0x2ec>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d019      	beq.n	800096e <HAL_GPIO_Init+0x202>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a47      	ldr	r2, [pc, #284]	; (8000a5c <HAL_GPIO_Init+0x2f0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d013      	beq.n	800096a <HAL_GPIO_Init+0x1fe>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a46      	ldr	r2, [pc, #280]	; (8000a60 <HAL_GPIO_Init+0x2f4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d00d      	beq.n	8000966 <HAL_GPIO_Init+0x1fa>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <HAL_GPIO_Init+0x2f8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d007      	beq.n	8000962 <HAL_GPIO_Init+0x1f6>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a44      	ldr	r2, [pc, #272]	; (8000a68 <HAL_GPIO_Init+0x2fc>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_GPIO_Init+0x1f2>
 800095a:	2304      	movs	r3, #4
 800095c:	e008      	b.n	8000970 <HAL_GPIO_Init+0x204>
 800095e:	2307      	movs	r3, #7
 8000960:	e006      	b.n	8000970 <HAL_GPIO_Init+0x204>
 8000962:	2303      	movs	r3, #3
 8000964:	e004      	b.n	8000970 <HAL_GPIO_Init+0x204>
 8000966:	2302      	movs	r3, #2
 8000968:	e002      	b.n	8000970 <HAL_GPIO_Init+0x204>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <HAL_GPIO_Init+0x204>
 800096e:	2300      	movs	r3, #0
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	f002 0203 	and.w	r2, r2, #3
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	4093      	lsls	r3, r2
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4313      	orrs	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000980:	4934      	ldr	r1, [pc, #208]	; (8000a54 <HAL_GPIO_Init+0x2e8>)
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800098e:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <HAL_GPIO_Init+0x300>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	43db      	mvns	r3, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4013      	ands	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009b2:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <HAL_GPIO_Init+0x300>)
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009b8:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <HAL_GPIO_Init+0x300>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4013      	ands	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009dc:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <HAL_GPIO_Init+0x300>)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <HAL_GPIO_Init+0x300>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a06:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <HAL_GPIO_Init+0x300>)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_GPIO_Init+0x300>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_GPIO_Init+0x300>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	f67f aea2 	bls.w	8000788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a44:	bf00      	nop
 8000a46:	3724      	adds	r7, #36	; 0x24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40013c00 	.word	0x40013c00

08000a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a80:	787b      	ldrb	r3, [r7, #1]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a86:	887a      	ldrh	r2, [r7, #2]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a8c:	e003      	b.n	8000a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a8e:	887b      	ldrh	r3, [r7, #2]
 8000a90:	041a      	lsls	r2, r3, #16
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	619a      	str	r2, [r3, #24]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e10f      	b.n	8000cd6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d106      	bne.n	8000ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f006 fb7e 	bl	80071cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2224      	movs	r2, #36	; 0x24
 8000ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0201 	bic.w	r2, r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ae8:	f001 fb20 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8000aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a7b      	ldr	r2, [pc, #492]	; (8000ce0 <HAL_I2C_Init+0x23c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d807      	bhi.n	8000b08 <HAL_I2C_Init+0x64>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4a7a      	ldr	r2, [pc, #488]	; (8000ce4 <HAL_I2C_Init+0x240>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	bf94      	ite	ls
 8000b00:	2301      	movls	r3, #1
 8000b02:	2300      	movhi	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	e006      	b.n	8000b16 <HAL_I2C_Init+0x72>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4a77      	ldr	r2, [pc, #476]	; (8000ce8 <HAL_I2C_Init+0x244>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	bf94      	ite	ls
 8000b10:	2301      	movls	r3, #1
 8000b12:	2300      	movhi	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e0db      	b.n	8000cd6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4a72      	ldr	r2, [pc, #456]	; (8000cec <HAL_I2C_Init+0x248>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	0c9b      	lsrs	r3, r3, #18
 8000b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	4a64      	ldr	r2, [pc, #400]	; (8000ce0 <HAL_I2C_Init+0x23c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d802      	bhi.n	8000b58 <HAL_I2C_Init+0xb4>
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	3301      	adds	r3, #1
 8000b56:	e009      	b.n	8000b6c <HAL_I2C_Init+0xc8>
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b5e:	fb02 f303 	mul.w	r3, r2, r3
 8000b62:	4a63      	ldr	r2, [pc, #396]	; (8000cf0 <HAL_I2C_Init+0x24c>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	099b      	lsrs	r3, r3, #6
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000b7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	4956      	ldr	r1, [pc, #344]	; (8000ce0 <HAL_I2C_Init+0x23c>)
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	d80d      	bhi.n	8000ba8 <HAL_I2C_Init+0x104>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	1e59      	subs	r1, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	bf38      	it	cc
 8000ba4:	2304      	movcc	r3, #4
 8000ba6:	e04f      	b.n	8000c48 <HAL_I2C_Init+0x1a4>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d111      	bne.n	8000bd4 <HAL_I2C_Init+0x130>
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	1e58      	subs	r0, r3, #1
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6859      	ldr	r1, [r3, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	440b      	add	r3, r1
 8000bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf0c      	ite	eq
 8000bcc:	2301      	moveq	r3, #1
 8000bce:	2300      	movne	r3, #0
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	e012      	b.n	8000bfa <HAL_I2C_Init+0x156>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	1e58      	subs	r0, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6859      	ldr	r1, [r3, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	440b      	add	r3, r1
 8000be2:	0099      	lsls	r1, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bea:	3301      	adds	r3, #1
 8000bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf0c      	ite	eq
 8000bf4:	2301      	moveq	r3, #1
 8000bf6:	2300      	movne	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_I2C_Init+0x15e>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e022      	b.n	8000c48 <HAL_I2C_Init+0x1a4>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10e      	bne.n	8000c28 <HAL_I2C_Init+0x184>
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1e58      	subs	r0, r3, #1
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6859      	ldr	r1, [r3, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	440b      	add	r3, r1
 8000c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c26:	e00f      	b.n	8000c48 <HAL_I2C_Init+0x1a4>
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	1e58      	subs	r0, r3, #1
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6859      	ldr	r1, [r3, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	0099      	lsls	r1, r3, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	6809      	ldr	r1, [r1, #0]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69da      	ldr	r2, [r3, #28]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6911      	ldr	r1, [r2, #16]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68d2      	ldr	r2, [r2, #12]
 8000c82:	4311      	orrs	r1, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f042 0201 	orr.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	000186a0 	.word	0x000186a0
 8000ce4:	001e847f 	.word	0x001e847f
 8000ce8:	003d08ff 	.word	0x003d08ff
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	10624dd3 	.word	0x10624dd3

08000cf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	460b      	mov	r3, r1
 8000d02:	817b      	strh	r3, [r7, #10]
 8000d04:	4613      	mov	r3, r2
 8000d06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff fc20 	bl	800054c <HAL_GetTick>
 8000d0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b20      	cmp	r3, #32
 8000d18:	f040 80e0 	bne.w	8000edc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2319      	movs	r3, #25
 8000d22:	2201      	movs	r2, #1
 8000d24:	4970      	ldr	r1, [pc, #448]	; (8000ee8 <HAL_I2C_Master_Transmit+0x1f4>)
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f000 fc34 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000d32:	2302      	movs	r3, #2
 8000d34:	e0d3      	b.n	8000ede <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d101      	bne.n	8000d44 <HAL_I2C_Master_Transmit+0x50>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e0cc      	b.n	8000ede <HAL_I2C_Master_Transmit+0x1ea>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2201      	movs	r2, #1
 8000d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d007      	beq.n	8000d6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 0201 	orr.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2221      	movs	r2, #33	; 0x21
 8000d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2210      	movs	r2, #16
 8000d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	893a      	ldrh	r2, [r7, #8]
 8000d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4a50      	ldr	r2, [pc, #320]	; (8000eec <HAL_I2C_Master_Transmit+0x1f8>)
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000dac:	8979      	ldrh	r1, [r7, #10]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	6a3a      	ldr	r2, [r7, #32]
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 fac2 	bl	800133c <I2C_MasterRequestWrite>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e08d      	b.n	8000ede <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000dd8:	e066      	b.n	8000ea8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	6a39      	ldr	r1, [r7, #32]
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f000 fcae 	bl	8001740 <I2C_WaitOnTXEFlagUntilTimeout>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00d      	beq.n	8000e06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d107      	bne.n	8000e02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e06b      	b.n	8000ede <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d11b      	bne.n	8000e7c <HAL_I2C_Master_Transmit+0x188>
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d017      	beq.n	8000e7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	6a39      	ldr	r1, [r7, #32]
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f000 fc9e 	bl	80017c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00d      	beq.n	8000ea8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d107      	bne.n	8000ea4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ea2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e01a      	b.n	8000ede <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d194      	bne.n	8000dda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e000      	b.n	8000ede <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000edc:	2302      	movs	r3, #2
  }
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	00100002 	.word	0x00100002
 8000eec:	ffff0000 	.word	0xffff0000

08000ef0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	461a      	mov	r2, r3
 8000efc:	460b      	mov	r3, r1
 8000efe:	817b      	strh	r3, [r7, #10]
 8000f00:	4613      	mov	r3, r2
 8000f02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff fb22 	bl	800054c <HAL_GetTick>
 8000f08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	f040 820b 	bne.w	800132e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2319      	movs	r3, #25
 8000f1e:	2201      	movs	r2, #1
 8000f20:	497c      	ldr	r1, [pc, #496]	; (8001114 <HAL_I2C_Master_Receive+0x224>)
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 fb36 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e1fe      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d101      	bne.n	8000f40 <HAL_I2C_Master_Receive+0x50>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e1f7      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d007      	beq.n	8000f66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0201 	orr.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2222      	movs	r2, #34	; 0x22
 8000f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2210      	movs	r2, #16
 8000f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	893a      	ldrh	r2, [r7, #8]
 8000f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a5c      	ldr	r2, [pc, #368]	; (8001118 <HAL_I2C_Master_Receive+0x228>)
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fa8:	8979      	ldrh	r1, [r7, #10]
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 fa3a 	bl	8001428 <I2C_MasterRequestRead>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e1b8      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d113      	bne.n	8000fee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	623b      	str	r3, [r7, #32]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e18c      	b.n	8001308 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d11b      	bne.n	800102e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e16c      	b.n	8001308 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001032:	2b02      	cmp	r3, #2
 8001034:	d11b      	bne.n	800106e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001044:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	e14c      	b.n	8001308 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800107c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001094:	e138      	b.n	8001308 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800109a:	2b03      	cmp	r3, #3
 800109c:	f200 80f1 	bhi.w	8001282 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d123      	bne.n	80010f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f000 fbc9 	bl	8001844 <I2C_WaitOnRXNEFlagUntilTimeout>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e139      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	3b01      	subs	r3, #1
 80010da:	b29a      	uxth	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80010ee:	e10b      	b.n	8001308 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d14e      	bne.n	8001196 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fe:	2200      	movs	r2, #0
 8001100:	4906      	ldr	r1, [pc, #24]	; (800111c <HAL_I2C_Master_Receive+0x22c>)
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f000 fa46 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d008      	beq.n	8001120 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e10e      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
 8001112:	bf00      	nop
 8001114:	00100002 	.word	0x00100002
 8001118:	ffff0000 	.word	0xffff0000
 800111c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800112e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114c:	3b01      	subs	r3, #1
 800114e:	b29a      	uxth	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001158:	b29b      	uxth	r3, r3
 800115a:	3b01      	subs	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117e:	3b01      	subs	r3, #1
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118a:	b29b      	uxth	r3, r3
 800118c:	3b01      	subs	r3, #1
 800118e:	b29a      	uxth	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001194:	e0b8      	b.n	8001308 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119c:	2200      	movs	r2, #0
 800119e:	4966      	ldr	r1, [pc, #408]	; (8001338 <HAL_I2C_Master_Receive+0x448>)
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f9f7 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0bf      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f8:	2200      	movs	r2, #0
 80011fa:	494f      	ldr	r1, [pc, #316]	; (8001338 <HAL_I2C_Master_Receive+0x448>)
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 f9c9 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e091      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001238:	3b01      	subs	r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001244:	b29b      	uxth	r3, r3
 8001246:	3b01      	subs	r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126a:	3b01      	subs	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001276:	b29b      	uxth	r3, r3
 8001278:	3b01      	subs	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001280:	e042      	b.n	8001308 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 fadc 	bl	8001844 <I2C_WaitOnRXNEFlagUntilTimeout>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e04c      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012be:	b29b      	uxth	r3, r3
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d118      	bne.n	8001308 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f aec2 	bne.w	8001096 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2220      	movs	r2, #32
 8001316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800132e:	2302      	movs	r3, #2
  }
}
 8001330:	4618      	mov	r0, r3
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	00010004 	.word	0x00010004

0800133c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	460b      	mov	r3, r1
 800134a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b08      	cmp	r3, #8
 8001356:	d006      	beq.n	8001366 <I2C_MasterRequestWrite+0x2a>
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d003      	beq.n	8001366 <I2C_MasterRequestWrite+0x2a>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001364:	d108      	bne.n	8001378 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e00b      	b.n	8001390 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	2b12      	cmp	r3, #18
 800137e:	d107      	bne.n	8001390 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800138e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 f8f9 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e035      	b.n	8001418 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013b4:	d108      	bne.n	80013c8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013b6:	897b      	ldrh	r3, [r7, #10]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013c4:	611a      	str	r2, [r3, #16]
 80013c6:	e01b      	b.n	8001400 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80013c8:	897b      	ldrh	r3, [r7, #10]
 80013ca:	11db      	asrs	r3, r3, #7
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 0306 	and.w	r3, r3, #6
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f063 030f 	orn	r3, r3, #15
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	490e      	ldr	r1, [pc, #56]	; (8001420 <I2C_MasterRequestWrite+0xe4>)
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 f92b 	bl	8001642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e010      	b.n	8001418 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80013f6:	897b      	ldrh	r3, [r7, #10]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <I2C_MasterRequestWrite+0xe8>)
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f91b 	bl	8001642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	00010008 	.word	0x00010008
 8001424:	00010002 	.word	0x00010002

08001428 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af02      	add	r7, sp, #8
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	460b      	mov	r3, r1
 8001436:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800144c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d006      	beq.n	8001462 <I2C_MasterRequestRead+0x3a>
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d003      	beq.n	8001462 <I2C_MasterRequestRead+0x3a>
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001460:	d108      	bne.n	8001474 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e00b      	b.n	800148c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	2b11      	cmp	r3, #17
 800147a:	d107      	bne.n	800148c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 f87b 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e06d      	b.n	8001584 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014b0:	d108      	bne.n	80014c4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014b2:	897b      	ldrh	r3, [r7, #10]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	e053      	b.n	800156c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014c4:	897b      	ldrh	r3, [r7, #10]
 80014c6:	11db      	asrs	r3, r3, #7
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f003 0306 	and.w	r3, r3, #6
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f063 030f 	orn	r3, r3, #15
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	492a      	ldr	r1, [pc, #168]	; (800158c <I2C_MasterRequestRead+0x164>)
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f8ad 	bl	8001642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e048      	b.n	8001584 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014f2:	897b      	ldrh	r3, [r7, #10]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4923      	ldr	r1, [pc, #140]	; (8001590 <I2C_MasterRequestRead+0x168>)
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f89d 	bl	8001642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e038      	b.n	8001584 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001536:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f825 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e017      	b.n	8001584 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	11db      	asrs	r3, r3, #7
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0306 	and.w	r3, r3, #6
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f063 030e 	orn	r3, r3, #14
 8001564:	b2da      	uxtb	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <I2C_MasterRequestRead+0x168>)
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f865 	bl	8001642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	00010008 	.word	0x00010008
 8001590:	00010002 	.word	0x00010002

08001594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a4:	e025      	b.n	80015f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d021      	beq.n	80015f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ae:	f7fe ffcd 	bl	800054c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d302      	bcc.n	80015c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d116      	bne.n	80015f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2220      	movs	r2, #32
 80015ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f043 0220 	orr.w	r2, r3, #32
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e023      	b.n	800163a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	0c1b      	lsrs	r3, r3, #16
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10d      	bne.n	8001618 <I2C_WaitOnFlagUntilTimeout+0x84>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4013      	ands	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	bf0c      	ite	eq
 800160e:	2301      	moveq	r3, #1
 8001610:	2300      	movne	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	e00c      	b.n	8001632 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4013      	ands	r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf0c      	ite	eq
 800162a:	2301      	moveq	r3, #1
 800162c:	2300      	movne	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	429a      	cmp	r2, r3
 8001636:	d0b6      	beq.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001650:	e051      	b.n	80016f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001660:	d123      	bne.n	80016aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001670:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800167a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f043 0204 	orr.w	r2, r3, #4
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e046      	b.n	8001738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d021      	beq.n	80016f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b2:	f7fe ff4b 	bl	800054c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d302      	bcc.n	80016c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d116      	bne.n	80016f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f043 0220 	orr.w	r2, r3, #32
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e020      	b.n	8001738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d10c      	bne.n	800171a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4013      	ands	r3, r2
 800170c:	b29b      	uxth	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	bf14      	ite	ne
 8001712:	2301      	movne	r3, #1
 8001714:	2300      	moveq	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	e00b      	b.n	8001732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	43da      	mvns	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4013      	ands	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d18d      	bne.n	8001652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800174c:	e02d      	b.n	80017aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 f8ce 	bl	80018f0 <I2C_IsAcknowledgeFailed>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e02d      	b.n	80017ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d021      	beq.n	80017aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001766:	f7fe fef1 	bl	800054c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	429a      	cmp	r2, r3
 8001774:	d302      	bcc.n	800177c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d116      	bne.n	80017aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f043 0220 	orr.w	r2, r3, #32
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e007      	b.n	80017ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b4:	2b80      	cmp	r3, #128	; 0x80
 80017b6:	d1ca      	bne.n	800174e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017ce:	e02d      	b.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f88d 	bl	80018f0 <I2C_IsAcknowledgeFailed>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e02d      	b.n	800183c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e6:	d021      	beq.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e8:	f7fe feb0 	bl	800054c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d302      	bcc.n	80017fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2220      	movs	r2, #32
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e007      	b.n	800183c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b04      	cmp	r3, #4
 8001838:	d1ca      	bne.n	80017d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001850:	e042      	b.n	80018d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b10      	cmp	r3, #16
 800185e:	d119      	bne.n	8001894 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0210 	mvn.w	r2, #16
 8001868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2220      	movs	r2, #32
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e029      	b.n	80018e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001894:	f7fe fe5a 	bl	800054c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d302      	bcc.n	80018aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e007      	b.n	80018e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e2:	2b40      	cmp	r3, #64	; 0x40
 80018e4:	d1b5      	bne.n	8001852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001906:	d11b      	bne.n	8001940 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001910:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f043 0204 	orr.w	r2, r3, #4
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e22d      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d075      	beq.n	8001a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196e:	4ba3      	ldr	r3, [pc, #652]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d00c      	beq.n	8001994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4ba0      	ldr	r3, [pc, #640]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001982:	2b08      	cmp	r3, #8
 8001984:	d112      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001986:	4b9d      	ldr	r3, [pc, #628]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001992:	d10b      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	4b99      	ldr	r3, [pc, #612]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d05b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x108>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d157      	bne.n	8001a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e208      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x74>
 80019b6:	4b91      	ldr	r3, [pc, #580]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a90      	ldr	r2, [pc, #576]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e01d      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b8b      	ldr	r3, [pc, #556]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a87      	ldr	r2, [pc, #540]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a83      	ldr	r2, [pc, #524]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a80      	ldr	r2, [pc, #512]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7fe fda0 	bl	800054c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a10:	f7fe fd9c 	bl	800054c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1cd      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0xc0>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7fe fd8c 	bl	800054c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7fe fd88 	bl	800054c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1b9      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0xe8>
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d063      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a66:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b62      	ldr	r3, [pc, #392]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d11c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d116      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e18d      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4952      	ldr	r1, [pc, #328]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	e03a      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac0:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <HAL_RCC_OscConfig+0x2b0>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7fe fd41 	bl	800054c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ace:	f7fe fd3d 	bl	800054c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e16e      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4940      	ldr	r1, [pc, #256]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_RCC_OscConfig+0x2b0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7fe fd20 	bl	800054c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b10:	f7fe fd1c 	bl	800054c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e14d      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d030      	beq.n	8001b9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d016      	beq.n	8001b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_OscConfig+0x2b4>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7fe fd00 	bl	800054c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7fe fcfc 	bl	800054c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e12d      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x200>
 8001b6e:	e015      	b.n	8001b9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_OscConfig+0x2b4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7fe fce9 	bl	800054c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7fe fce5 	bl	800054c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e116      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a0 	beq.w	8001cea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x2b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d121      	bne.n	8001c2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_RCC_OscConfig+0x2b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_RCC_OscConfig+0x2b8>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7fe fcab 	bl	800054c <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	e011      	b.n	8001c1e <HAL_RCC_OscConfig+0x2ce>
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	42470000 	.word	0x42470000
 8001c04:	42470e80 	.word	0x42470e80
 8001c08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7fe fc9e 	bl	800054c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e0cf      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
 8001c32:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a65      	ldr	r2, [pc, #404]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	e01c      	b.n	8001c7a <HAL_RCC_OscConfig+0x32a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x312>
 8001c48:	4b60      	ldr	r3, [pc, #384]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a5f      	ldr	r2, [pc, #380]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a5c      	ldr	r2, [pc, #368]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x32a>
 8001c62:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a59      	ldr	r2, [pc, #356]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	4b57      	ldr	r3, [pc, #348]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a56      	ldr	r2, [pc, #344]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7fe fc63 	bl	800054c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7fe fc5f 	bl	800054c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e08e      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCC_OscConfig+0x33a>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7fe fc4d 	bl	800054c <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7fe fc49 	bl	800054c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e078      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a3a      	ldr	r2, [pc, #232]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d064      	beq.n	8001dbc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d05c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d141      	bne.n	8001d8a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_RCC_OscConfig+0x480>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fc1e 	bl	800054c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7fe fc1a 	bl	800054c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e04b      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	019b      	lsls	r3, r3, #6
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	491d      	ldr	r1, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCC_OscConfig+0x480>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe fbf3 	bl	800054c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7fe fbef 	bl	800054c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e020      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x41a>
 8001d88:	e018      	b.n	8001dbc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x480>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fbdc 	bl	800054c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe fbd8 	bl	800054c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e009      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_OscConfig+0x47c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x448>
 8001db6:	e001      	b.n	8001dbc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	42470060 	.word	0x42470060

08001dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0ca      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <HAL_RCC_ClockConfig+0x1b4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d90c      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_RCC_ClockConfig+0x1b4>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b62      	ldr	r3, [pc, #392]	; (8001f88 <HAL_RCC_ClockConfig+0x1b4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b6      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a57      	ldr	r2, [pc, #348]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e40:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	494c      	ldr	r1, [pc, #304]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d044      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07d      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06d      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e065      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4933      	ldr	r1, [pc, #204]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fb42 	bl	800054c <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fb3e 	bl	800054c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e04d      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d20c      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_ClockConfig+0x1b4>)
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e030      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4915      	ldr	r1, [pc, #84]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	490d      	ldr	r1, [pc, #52]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f5a:	f000 f829 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f005 faae 	bl	80074d8 <HAL_InitTick>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023c00 	.word	0x40023c00
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	08007fa0 	.word	0x08007fa0
 8001f94:	2000000c 	.word	0x2000000c

08001f98 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_RCC_EnableCSS+0x14>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	4247004c 	.word	0x4247004c

08001fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fc6:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d007      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x32>
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d008      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x38>
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 808d 	bne.w	80020f6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	; (800210c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fde:	60bb      	str	r3, [r7, #8]
       break;
 8001fe0:	e08c      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe2:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fe4:	60bb      	str	r3, [r7, #8]
      break;
 8001fe6:	e089      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe8:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff2:	4b45      	ldr	r3, [pc, #276]	; (8002108 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d023      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffe:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_GetSysClockFreq+0x158>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	099b      	lsrs	r3, r3, #6
 8002004:	f04f 0400 	mov.w	r4, #0
 8002008:	f240 11ff 	movw	r1, #511	; 0x1ff
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	ea03 0501 	and.w	r5, r3, r1
 8002014:	ea04 0602 	and.w	r6, r4, r2
 8002018:	4a3d      	ldr	r2, [pc, #244]	; (8002110 <HAL_RCC_GetSysClockFreq+0x160>)
 800201a:	fb02 f106 	mul.w	r1, r2, r6
 800201e:	2200      	movs	r2, #0
 8002020:	fb02 f205 	mul.w	r2, r2, r5
 8002024:	440a      	add	r2, r1
 8002026:	493a      	ldr	r1, [pc, #232]	; (8002110 <HAL_RCC_GetSysClockFreq+0x160>)
 8002028:	fba5 0101 	umull	r0, r1, r5, r1
 800202c:	1853      	adds	r3, r2, r1
 800202e:	4619      	mov	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f04f 0400 	mov.w	r4, #0
 8002036:	461a      	mov	r2, r3
 8002038:	4623      	mov	r3, r4
 800203a:	f7fe f8d1 	bl	80001e0 <__aeabi_uldivmod>
 800203e:	4603      	mov	r3, r0
 8002040:	460c      	mov	r4, r1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e049      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_RCC_GetSysClockFreq+0x158>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	f04f 0400 	mov.w	r4, #0
 8002050:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	ea03 0501 	and.w	r5, r3, r1
 800205c:	ea04 0602 	and.w	r6, r4, r2
 8002060:	4629      	mov	r1, r5
 8002062:	4632      	mov	r2, r6
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	f04f 0400 	mov.w	r4, #0
 800206c:	0154      	lsls	r4, r2, #5
 800206e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002072:	014b      	lsls	r3, r1, #5
 8002074:	4619      	mov	r1, r3
 8002076:	4622      	mov	r2, r4
 8002078:	1b49      	subs	r1, r1, r5
 800207a:	eb62 0206 	sbc.w	r2, r2, r6
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	f04f 0400 	mov.w	r4, #0
 8002086:	0194      	lsls	r4, r2, #6
 8002088:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800208c:	018b      	lsls	r3, r1, #6
 800208e:	1a5b      	subs	r3, r3, r1
 8002090:	eb64 0402 	sbc.w	r4, r4, r2
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	00e2      	lsls	r2, r4, #3
 800209e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020a2:	00d9      	lsls	r1, r3, #3
 80020a4:	460b      	mov	r3, r1
 80020a6:	4614      	mov	r4, r2
 80020a8:	195b      	adds	r3, r3, r5
 80020aa:	eb44 0406 	adc.w	r4, r4, r6
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	02a2      	lsls	r2, r4, #10
 80020b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020bc:	0299      	lsls	r1, r3, #10
 80020be:	460b      	mov	r3, r1
 80020c0:	4614      	mov	r4, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	4621      	mov	r1, r4
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f04f 0400 	mov.w	r4, #0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4623      	mov	r3, r4
 80020d0:	f7fe f886 	bl	80001e0 <__aeabi_uldivmod>
 80020d4:	4603      	mov	r3, r0
 80020d6:	460c      	mov	r4, r1
 80020d8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_GetSysClockFreq+0x158>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0c1b      	lsrs	r3, r3, #16
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	3301      	adds	r3, #1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	60bb      	str	r3, [r7, #8]
      break;
 80020f4:	e002      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetSysClockFreq+0x15c>)
 80020f8:	60bb      	str	r3, [r7, #8]
      break;
 80020fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fc:	68bb      	ldr	r3, [r7, #8]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	00f42400 	.word	0x00f42400
 8002110:	016e3600 	.word	0x016e3600

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCC_GetHCLKFreq+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	2000000c 	.word	0x2000000c

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002130:	f7ff fff0 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002134:	4601      	mov	r1, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a9b      	lsrs	r3, r3, #10
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4a03      	ldr	r2, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	08007fb0 	.word	0x08007fb0

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002158:	f7ff ffdc 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 800215c:	4601      	mov	r1, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0b5b      	lsrs	r3, r3, #13
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4a03      	ldr	r2, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	08007fb0 	.word	0x08007fb0

0800217c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	220f      	movs	r2, #15
 800218a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_GetClockConfig+0x5c>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_RCC_GetClockConfig+0x5c>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_RCC_GetClockConfig+0x5c>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_GetClockConfig+0x5c>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_RCC_GetClockConfig+0x60>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 020f 	and.w	r2, r3, #15
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	601a      	str	r2, [r3, #0]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e01d      	b.n	800222e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f005 f8c2 	bl	8007390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f000 fa8a 	bl	8002738 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b06      	cmp	r3, #6
 800225e:	d007      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e01d      	b.n	80022cc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f815 	bl	80022d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f000 fa3b 	bl	8002738 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fc28 	bl	8002b50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a10      	ldr	r2, [pc, #64]	; (8002348 <HAL_TIM_PWM_Start+0x60>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d107      	bne.n	800231a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b06      	cmp	r3, #6
 800232a:	d007      	beq.n	800233c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40010000 	.word	0x40010000

0800234c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d122      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11b      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0202 	mvn.w	r2, #2
 8002378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9b4 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f9a6 	bl	80026e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f9b7 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0204 	mvn.w	r2, #4
 80023cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f98a 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f97c 	bl	80026e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f98d 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f960 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f952 	bl	80026e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f963 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b10      	cmp	r3, #16
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b10      	cmp	r3, #16
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0210 	mvn.w	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2208      	movs	r2, #8
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f936 	bl	80026fc <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f928 	bl	80026e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f939 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f004 f942 	bl	8006754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fb59 	bl	8002bae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8fe 	bl	8002724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b20      	cmp	r3, #32
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0220 	mvn.w	r2, #32
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fb23 	bl	8002b9a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002572:	2302      	movs	r3, #2
 8002574:	e0b4      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0c      	cmp	r3, #12
 800258a:	f200 809f 	bhi.w	80026cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025c9 	.word	0x080025c9
 8002598:	080026cd 	.word	0x080026cd
 800259c:	080026cd 	.word	0x080026cd
 80025a0:	080026cd 	.word	0x080026cd
 80025a4:	08002609 	.word	0x08002609
 80025a8:	080026cd 	.word	0x080026cd
 80025ac:	080026cd 	.word	0x080026cd
 80025b0:	080026cd 	.word	0x080026cd
 80025b4:	0800264b 	.word	0x0800264b
 80025b8:	080026cd 	.word	0x080026cd
 80025bc:	080026cd 	.word	0x080026cd
 80025c0:	080026cd 	.word	0x080026cd
 80025c4:	0800268b 	.word	0x0800268b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f932 	bl	8002838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6999      	ldr	r1, [r3, #24]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	619a      	str	r2, [r3, #24]
      break;
 8002606:	e062      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f978 	bl	8002904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6999      	ldr	r1, [r3, #24]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	021a      	lsls	r2, r3, #8
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	619a      	str	r2, [r3, #24]
      break;
 8002648:	e041      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 f9c3 	bl	80029dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0208 	orr.w	r2, r2, #8
 8002664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0204 	bic.w	r2, r2, #4
 8002674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69d9      	ldr	r1, [r3, #28]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	61da      	str	r2, [r3, #28]
      break;
 8002688:	e021      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa0d 	bl	8002ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69d9      	ldr	r1, [r3, #28]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	61da      	str	r2, [r3, #28]
      break;
 80026ca:	e000      	b.n	80026ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80026cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a34      	ldr	r2, [pc, #208]	; (800281c <TIM_Base_SetConfig+0xe4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00f      	beq.n	8002770 <TIM_Base_SetConfig+0x38>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002756:	d00b      	beq.n	8002770 <TIM_Base_SetConfig+0x38>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a31      	ldr	r2, [pc, #196]	; (8002820 <TIM_Base_SetConfig+0xe8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <TIM_Base_SetConfig+0x38>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a30      	ldr	r2, [pc, #192]	; (8002824 <TIM_Base_SetConfig+0xec>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d003      	beq.n	8002770 <TIM_Base_SetConfig+0x38>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a2f      	ldr	r2, [pc, #188]	; (8002828 <TIM_Base_SetConfig+0xf0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a25      	ldr	r2, [pc, #148]	; (800281c <TIM_Base_SetConfig+0xe4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01b      	beq.n	80027c2 <TIM_Base_SetConfig+0x8a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002790:	d017      	beq.n	80027c2 <TIM_Base_SetConfig+0x8a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a22      	ldr	r2, [pc, #136]	; (8002820 <TIM_Base_SetConfig+0xe8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <TIM_Base_SetConfig+0x8a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a21      	ldr	r2, [pc, #132]	; (8002824 <TIM_Base_SetConfig+0xec>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00f      	beq.n	80027c2 <TIM_Base_SetConfig+0x8a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <TIM_Base_SetConfig+0xf0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <TIM_Base_SetConfig+0x8a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1f      	ldr	r2, [pc, #124]	; (800282c <TIM_Base_SetConfig+0xf4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x8a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <TIM_Base_SetConfig+0xf8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x8a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <TIM_Base_SetConfig+0xfc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d108      	bne.n	80027d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <TIM_Base_SetConfig+0xe4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d103      	bne.n	8002808 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40010000 	.word	0x40010000
 8002820:	40000400 	.word	0x40000400
 8002824:	40000800 	.word	0x40000800
 8002828:	40000c00 	.word	0x40000c00
 800282c:	40014000 	.word	0x40014000
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800

08002838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f023 0201 	bic.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f023 0302 	bic.w	r3, r3, #2
 8002880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <TIM_OC1_SetConfig+0xc8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d10c      	bne.n	80028ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f023 0308 	bic.w	r3, r3, #8
 800289a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <TIM_OC1_SetConfig+0xc8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d111      	bne.n	80028da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	621a      	str	r2, [r3, #32]
}
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40010000 	.word	0x40010000

08002904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f023 0210 	bic.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0320 	bic.w	r3, r3, #32
 800294e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <TIM_OC2_SetConfig+0xd4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10d      	bne.n	8002980 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800297e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <TIM_OC2_SetConfig+0xd4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d113      	bne.n	80029b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800298e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000

080029dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <TIM_OC3_SetConfig+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10d      	bne.n	8002a56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <TIM_OC3_SetConfig+0xd0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d113      	bne.n	8002a86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40010000 	.word	0x40010000

08002ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <TIM_OC4_SetConfig+0x9c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d109      	bne.n	8002b24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	019b      	lsls	r3, r3, #6
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000

08002b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2201      	movs	r2, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	401a      	ands	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1a      	ldr	r2, [r3, #32]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e03f      	b.n	8002c54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f004 fc2d 	bl	8007448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2224      	movs	r2, #36	; 0x24
 8002bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f90c 	bl	8002e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	f040 8083 	bne.w	8002d84 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_UART_Transmit+0x2e>
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07b      	b.n	8002d86 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_UART_Transmit+0x40>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e074      	b.n	8002d86 <HAL_UART_Transmit+0x12a>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2221      	movs	r2, #33	; 0x21
 8002cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cb2:	f7fd fc4b 	bl	800054c <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	88fa      	ldrh	r2, [r7, #6]
 8002cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cc4:	e042      	b.n	8002d4c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d122      	bne.n	8002d24 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f850 	bl	8002d8e <UART_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e046      	b.n	8002d86 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d0a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3302      	adds	r3, #2
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	e017      	b.n	8002d4c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	e013      	b.n	8002d4c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f82d 	bl	8002d8e <UART_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e023      	b.n	8002d86 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	60ba      	str	r2, [r7, #8]
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1b7      	bne.n	8002cc6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2140      	movs	r1, #64	; 0x40
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f814 	bl	8002d8e <UART_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e00a      	b.n	8002d86 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9e:	e02c      	b.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d028      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x30>
 8002dae:	f7fd fbcd 	bl	800054c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d21d      	bcs.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dcc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e00f      	b.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4013      	ands	r3, r2
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d0c3      	beq.n	8002da0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e24:	b5b0      	push	{r4, r5, r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e64:	f023 030c 	bic.w	r3, r3, #12
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	68f9      	ldr	r1, [r7, #12]
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e90:	f040 80e4 	bne.w	800305c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4aab      	ldr	r2, [pc, #684]	; (8003148 <UART_SetConfig+0x324>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <UART_SetConfig+0x84>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4aaa      	ldr	r2, [pc, #680]	; (800314c <UART_SetConfig+0x328>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d16c      	bne.n	8002f82 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ea8:	f7ff f954 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009a      	lsls	r2, r3, #2
 8002eb6:	441a      	add	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	4aa3      	ldr	r2, [pc, #652]	; (8003150 <UART_SetConfig+0x32c>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	011c      	lsls	r4, r3, #4
 8002ecc:	f7ff f942 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009a      	lsls	r2, r3, #2
 8002eda:	441a      	add	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ee6:	f7ff f935 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8002eea:	4602      	mov	r2, r0
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009a      	lsls	r2, r3, #2
 8002ef4:	441a      	add	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	4a93      	ldr	r2, [pc, #588]	; (8003150 <UART_SetConfig+0x32c>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2264      	movs	r2, #100	; 0x64
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	1aeb      	subs	r3, r5, r3
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	3332      	adds	r3, #50	; 0x32
 8002f14:	4a8e      	ldr	r2, [pc, #568]	; (8003150 <UART_SetConfig+0x32c>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f22:	441c      	add	r4, r3
 8002f24:	f7ff f916 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	009a      	lsls	r2, r3, #2
 8002f32:	441a      	add	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f3e:	f7ff f909 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	4a7d      	ldr	r2, [pc, #500]	; (8003150 <UART_SetConfig+0x32c>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2264      	movs	r2, #100	; 0x64
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	1aeb      	subs	r3, r5, r3
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	3332      	adds	r3, #50	; 0x32
 8002f6c:	4a78      	ldr	r2, [pc, #480]	; (8003150 <UART_SetConfig+0x32c>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	f003 0207 	and.w	r2, r3, #7
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4422      	add	r2, r4
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	e154      	b.n	800322c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f82:	f7ff f8d3 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002f86:	4602      	mov	r2, r0
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009a      	lsls	r2, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	4a6c      	ldr	r2, [pc, #432]	; (8003150 <UART_SetConfig+0x32c>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	011c      	lsls	r4, r3, #4
 8002fa6:	f7ff f8c1 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fc0:	f7ff f8b4 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009a      	lsls	r2, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	4a5d      	ldr	r2, [pc, #372]	; (8003150 <UART_SetConfig+0x32c>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	2264      	movs	r2, #100	; 0x64
 8002fe4:	fb02 f303 	mul.w	r3, r2, r3
 8002fe8:	1aeb      	subs	r3, r5, r3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3332      	adds	r3, #50	; 0x32
 8002fee:	4a58      	ldr	r2, [pc, #352]	; (8003150 <UART_SetConfig+0x32c>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ffc:	441c      	add	r4, r3
 8002ffe:	f7ff f895 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003002:	4602      	mov	r2, r0
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009a      	lsls	r2, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fbb2 f5f3 	udiv	r5, r2, r3
 8003018:	f7ff f888 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 800301c:	4602      	mov	r2, r0
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009a      	lsls	r2, r3, #2
 8003026:	441a      	add	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	4a47      	ldr	r2, [pc, #284]	; (8003150 <UART_SetConfig+0x32c>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	2264      	movs	r2, #100	; 0x64
 800303c:	fb02 f303 	mul.w	r3, r2, r3
 8003040:	1aeb      	subs	r3, r5, r3
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	3332      	adds	r3, #50	; 0x32
 8003046:	4a42      	ldr	r2, [pc, #264]	; (8003150 <UART_SetConfig+0x32c>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	f003 0207 	and.w	r2, r3, #7
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4422      	add	r2, r4
 8003058:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800305a:	e0e7      	b.n	800322c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a39      	ldr	r2, [pc, #228]	; (8003148 <UART_SetConfig+0x324>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <UART_SetConfig+0x24c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a38      	ldr	r2, [pc, #224]	; (800314c <UART_SetConfig+0x328>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d171      	bne.n	8003154 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003070:	f7ff f870 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003074:	4602      	mov	r2, r0
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009a      	lsls	r2, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4a31      	ldr	r2, [pc, #196]	; (8003150 <UART_SetConfig+0x32c>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	011c      	lsls	r4, r3, #4
 8003094:	f7ff f85e 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003098:	4602      	mov	r2, r0
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009a      	lsls	r2, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	fbb2 f5f3 	udiv	r5, r2, r3
 80030ae:	f7ff f851 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	009a      	lsls	r2, r3, #2
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	4a21      	ldr	r2, [pc, #132]	; (8003150 <UART_SetConfig+0x32c>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2264      	movs	r2, #100	; 0x64
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	1aeb      	subs	r3, r5, r3
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	3332      	adds	r3, #50	; 0x32
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <UART_SetConfig+0x32c>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e8:	441c      	add	r4, r3
 80030ea:	f7ff f833 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 80030ee:	4602      	mov	r2, r0
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	441a      	add	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fbb2 f5f3 	udiv	r5, r2, r3
 8003104:	f7ff f826 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003108:	4602      	mov	r2, r0
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009a      	lsls	r2, r3, #2
 8003112:	441a      	add	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <UART_SetConfig+0x32c>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	2264      	movs	r2, #100	; 0x64
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	1aeb      	subs	r3, r5, r3
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	3332      	adds	r3, #50	; 0x32
 8003132:	4a07      	ldr	r2, [pc, #28]	; (8003150 <UART_SetConfig+0x32c>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f003 020f 	and.w	r2, r3, #15
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4422      	add	r2, r4
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	e071      	b.n	800322c <UART_SetConfig+0x408>
 8003148:	40011000 	.word	0x40011000
 800314c:	40011400 	.word	0x40011400
 8003150:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003154:	f7fe ffea 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003158:	4602      	mov	r2, r0
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	4a31      	ldr	r2, [pc, #196]	; (8003234 <UART_SetConfig+0x410>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	011c      	lsls	r4, r3, #4
 8003178:	f7fe ffd8 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 800317c:	4602      	mov	r2, r0
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	009a      	lsls	r2, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003192:	f7fe ffcb 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003196:	4602      	mov	r2, r0
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009a      	lsls	r2, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	4a21      	ldr	r2, [pc, #132]	; (8003234 <UART_SetConfig+0x410>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2264      	movs	r2, #100	; 0x64
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	1aeb      	subs	r3, r5, r3
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	3332      	adds	r3, #50	; 0x32
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <UART_SetConfig+0x410>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031cc:	441c      	add	r4, r3
 80031ce:	f7fe ffad 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	009a      	lsls	r2, r3, #2
 80031dc:	441a      	add	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fbb2 f5f3 	udiv	r5, r2, r3
 80031e8:	f7fe ffa0 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <UART_SetConfig+0x410>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2264      	movs	r2, #100	; 0x64
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	1aeb      	subs	r3, r5, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a07      	ldr	r2, [pc, #28]	; (8003234 <UART_SetConfig+0x410>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 020f 	and.w	r2, r3, #15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4422      	add	r2, r4
 8003228:	609a      	str	r2, [r3, #8]
}
 800322a:	e7ff      	b.n	800322c <UART_SetConfig+0x408>
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bdb0      	pop	{r4, r5, r7, pc}
 8003234:	51eb851f 	.word	0x51eb851f

08003238 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323e:	f3ef 8305 	mrs	r3, IPSR
 8003242:	60bb      	str	r3, [r7, #8]
  return(result);
 8003244:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	607b      	str	r3, [r7, #4]
  return(result);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <osKernelInitialize+0x32>
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <osKernelInitialize+0x64>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d109      	bne.n	8003272 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800325e:	f3ef 8311 	mrs	r3, BASEPRI
 8003262:	603b      	str	r3, [r7, #0]
  return(result);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800326a:	f06f 0305 	mvn.w	r3, #5
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e00c      	b.n	800328c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <osKernelInitialize+0x64>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <osKernelInitialize+0x64>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e002      	b.n	800328c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800328c:	68fb      	ldr	r3, [r7, #12]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000002c 	.word	0x2000002c

080032a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032a6:	f3ef 8305 	mrs	r3, IPSR
 80032aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b2:	f3ef 8310 	mrs	r3, PRIMASK
 80032b6:	607b      	str	r3, [r7, #4]
  return(result);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <osKernelStart+0x32>
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <osKernelStart+0x64>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d109      	bne.n	80032da <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032c6:	f3ef 8311 	mrs	r3, BASEPRI
 80032ca:	603b      	str	r3, [r7, #0]
  return(result);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <osKernelStart+0x3a>
    stat = osErrorISR;
 80032d2:	f06f 0305 	mvn.w	r3, #5
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e00e      	b.n	80032f8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <osKernelStart+0x64>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <osKernelStart+0x64>)
 80032e4:	2202      	movs	r2, #2
 80032e6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80032e8:	f001 fa16 	bl	8004718 <vTaskStartScheduler>
      stat = osOK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e002      	b.n	80032f8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032f8:	68fb      	ldr	r3, [r7, #12]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000002c 	.word	0x2000002c

08003308 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b092      	sub	sp, #72	; 0x48
 800330c:	af04      	add	r7, sp, #16
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003318:	f3ef 8305 	mrs	r3, IPSR
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003320:	2b00      	cmp	r3, #0
 8003322:	f040 8095 	bne.w	8003450 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003326:	f3ef 8310 	mrs	r3, PRIMASK
 800332a:	623b      	str	r3, [r7, #32]
  return(result);
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 808e 	bne.w	8003450 <osThreadNew+0x148>
 8003334:	4b49      	ldr	r3, [pc, #292]	; (800345c <osThreadNew+0x154>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d106      	bne.n	800334a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800333c:	f3ef 8311 	mrs	r3, BASEPRI
 8003340:	61fb      	str	r3, [r7, #28]
  return(result);
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f040 8083 	bne.w	8003450 <osThreadNew+0x148>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d07f      	beq.n	8003450 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8003350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003356:	2318      	movs	r3, #24
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800335a:	2300      	movs	r3, #0
 800335c:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800335e:	f107 031b 	add.w	r3, r7, #27
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003364:	f04f 33ff 	mov.w	r3, #4294967295
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d045      	beq.n	80033fc <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <osThreadNew+0x76>
        name = attr->name;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <osThreadNew+0x9c>
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	2b38      	cmp	r3, #56	; 0x38
 8003396:	d805      	bhi.n	80033a4 <osThreadNew+0x9c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <osThreadNew+0xa0>
        return (NULL);
 80033a4:	2300      	movs	r3, #0
 80033a6:	e054      	b.n	8003452 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <osThreadNew+0xd6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b5b      	cmp	r3, #91	; 0x5b
 80033c6:	d90a      	bls.n	80033de <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <osThreadNew+0xd6>
        mem = 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
 80033dc:	e010      	b.n	8003400 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10c      	bne.n	8003400 <osThreadNew+0xf8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <osThreadNew+0xf8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d104      	bne.n	8003400 <osThreadNew+0xf8>
          mem = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fa:	e001      	b.n	8003400 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b01      	cmp	r3, #1
 8003404:	d110      	bne.n	8003428 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800340e:	9202      	str	r2, [sp, #8]
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800341a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 ffb3 	bl	8004388 <xTaskCreateStatic>
 8003422:	4603      	mov	r3, r0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e013      	b.n	8003450 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	2b00      	cmp	r3, #0
 800342c:	d110      	bne.n	8003450 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	b29a      	uxth	r2, r3
 8003432:	f107 0314 	add.w	r3, r7, #20
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fffa 	bl	800443a <xTaskCreate>
 8003446:	4603      	mov	r3, r0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d001      	beq.n	8003450 <osThreadNew+0x148>
          hTask = NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003450:	697b      	ldr	r3, [r7, #20]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3738      	adds	r7, #56	; 0x38
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000002c 	.word	0x2000002c

08003460 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003468:	f3ef 8305 	mrs	r3, IPSR
 800346c:	613b      	str	r3, [r7, #16]
  return(result);
 800346e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10f      	bne.n	8003494 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
 8003478:	60fb      	str	r3, [r7, #12]
  return(result);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <osDelay+0x34>
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <osDelay+0x58>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d109      	bne.n	800349c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003488:	f3ef 8311 	mrs	r3, BASEPRI
 800348c:	60bb      	str	r3, [r7, #8]
  return(result);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <osDelay+0x3c>
    stat = osErrorISR;
 8003494:	f06f 0305 	mvn.w	r3, #5
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e007      	b.n	80034ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f001 f902 	bl	80046b0 <vTaskDelay>
    }
  }

  return (stat);
 80034ac:	697b      	ldr	r3, [r7, #20]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2000002c 	.word	0x2000002c

080034bc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034c8:	f3ef 8305 	mrs	r3, IPSR
 80034cc:	613b      	str	r3, [r7, #16]
  return(result);
 80034ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 8085 	bne.w	80035e0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d6:	f3ef 8310 	mrs	r3, PRIMASK
 80034da:	60fb      	str	r3, [r7, #12]
  return(result);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d17e      	bne.n	80035e0 <osMutexNew+0x124>
 80034e2:	4b42      	ldr	r3, [pc, #264]	; (80035ec <osMutexNew+0x130>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d105      	bne.n	80034f6 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034ea:	f3ef 8311 	mrs	r3, BASEPRI
 80034ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d174      	bne.n	80035e0 <osMutexNew+0x124>
    if (attr != NULL) {
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <osMutexNew+0x48>
      type = attr->attr_bits;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	e001      	b.n	8003508 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <osMutexNew+0x5c>
      rmtx = 1U;
 8003512:	2301      	movs	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	e001      	b.n	800351c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d15c      	bne.n	80035e0 <osMutexNew+0x124>
      mem = -1;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
 800352a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d015      	beq.n	800355e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <osMutexNew+0x8c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b4f      	cmp	r3, #79	; 0x4f
 8003540:	d902      	bls.n	8003548 <osMutexNew+0x8c>
          mem = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e00c      	b.n	8003562 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <osMutexNew+0xa6>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <osMutexNew+0xa6>
            mem = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e001      	b.n	8003562 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d112      	bne.n	800358e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4619      	mov	r1, r3
 8003574:	2004      	movs	r0, #4
 8003576:	f000 fb15 	bl	8003ba4 <xQueueCreateMutexStatic>
 800357a:	6278      	str	r0, [r7, #36]	; 0x24
 800357c:	e016      	b.n	80035ac <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	4619      	mov	r1, r3
 8003584:	2001      	movs	r0, #1
 8003586:	f000 fb0d 	bl	8003ba4 <xQueueCreateMutexStatic>
 800358a:	6278      	str	r0, [r7, #36]	; 0x24
 800358c:	e00e      	b.n	80035ac <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800359a:	2004      	movs	r0, #4
 800359c:	f000 faea 	bl	8003b74 <xQueueCreateMutex>
 80035a0:	6278      	str	r0, [r7, #36]	; 0x24
 80035a2:	e003      	b.n	80035ac <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80035a4:	2001      	movs	r0, #1
 80035a6:	f000 fae5 	bl	8003b74 <xQueueCreateMutex>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <osMutexNew+0x110>
        if (attr != NULL) {
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <osMutexNew+0x104>
          name = attr->name;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e001      	b.n	80035c4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80035c4:	6979      	ldr	r1, [r7, #20]
 80035c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035c8:	f000 fe82 	bl	80042d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <osMutexNew+0x124>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3728      	adds	r7, #40	; 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	2000002c 	.word	0x2000002c

080035f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08c      	sub	sp, #48	; 0x30
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003600:	f3ef 8305 	mrs	r3, IPSR
 8003604:	61bb      	str	r3, [r7, #24]
  return(result);
 8003606:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003608:	2b00      	cmp	r3, #0
 800360a:	d170      	bne.n	80036ee <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360c:	f3ef 8310 	mrs	r3, PRIMASK
 8003610:	617b      	str	r3, [r7, #20]
  return(result);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d16a      	bne.n	80036ee <osMessageQueueNew+0xfe>
 8003618:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <osMessageQueueNew+0x108>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d105      	bne.n	800362c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003620:	f3ef 8311 	mrs	r3, BASEPRI
 8003624:	613b      	str	r3, [r7, #16]
  return(result);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d160      	bne.n	80036ee <osMessageQueueNew+0xfe>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d05d      	beq.n	80036ee <osMessageQueueNew+0xfe>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05a      	beq.n	80036ee <osMessageQueueNew+0xfe>
    mem = -1;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
 800363c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d029      	beq.n	8003698 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d012      	beq.n	8003672 <osMessageQueueNew+0x82>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b4f      	cmp	r3, #79	; 0x4f
 8003652:	d90e      	bls.n	8003672 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	429a      	cmp	r2, r3
 800366a:	d302      	bcc.n	8003672 <osMessageQueueNew+0x82>
        mem = 1;
 800366c:	2301      	movs	r3, #1
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	e014      	b.n	800369c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d110      	bne.n	800369c <osMessageQueueNew+0xac>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d108      	bne.n	800369c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <osMessageQueueNew+0xac>
          mem = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	e001      	b.n	800369c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10c      	bne.n	80036bc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	460b      	mov	r3, r1
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f972 	bl	800399c <xQueueGenericCreateStatic>
 80036b8:	6278      	str	r0, [r7, #36]	; 0x24
 80036ba:	e008      	b.n	80036ce <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80036c2:	2200      	movs	r2, #0
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f9da 	bl	8003a80 <xQueueGenericCreate>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e001      	b.n	80036e6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80036e6:	69f9      	ldr	r1, [r7, #28]
 80036e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ea:	f000 fdf1 	bl	80042d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	2000002c 	.word	0x2000002c

080036fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <vApplicationGetIdleTaskMemory+0x2c>)
 800370c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4a06      	ldr	r2, [pc, #24]	; (800372c <vApplicationGetIdleTaskMemory+0x30>)
 8003712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20000030 	.word	0x20000030
 800372c:	2000008c 	.word	0x2000008c

08003730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a07      	ldr	r2, [pc, #28]	; (800375c <vApplicationGetTimerTaskMemory+0x2c>)
 8003740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <vApplicationGetTimerTaskMemory+0x30>)
 8003746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800374e:	601a      	str	r2, [r3, #0]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	2000108c 	.word	0x2000108c
 8003760:	200010e8 	.word	0x200010e8

08003764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f103 0208 	add.w	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f103 0208 	add.w	r2, r3, #8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f103 0208 	add.w	r2, r3, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d103      	bne.n	8003826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e00c      	b.n	8003840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3308      	adds	r3, #8
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e002      	b.n	8003834 <vListInsert+0x2e>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d2f6      	bcs.n	800382e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6892      	ldr	r2, [r2, #8]
 800388e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d103      	bne.n	80038ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	1e5a      	subs	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	e7fe      	b.n	80038f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80038f4:	f002 f862 	bl	80059bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	441a      	add	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	3b01      	subs	r3, #1
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d114      	bne.n	8003974 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01a      	beq.n	8003988 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3310      	adds	r3, #16
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f964 	bl	8004c24 <xTaskRemoveFromEventList>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d012      	beq.n	8003988 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <xQueueGenericReset+0xcc>)
 8003964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	e009      	b.n	8003988 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3310      	adds	r3, #16
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fef3 	bl	8003764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3324      	adds	r3, #36	; 0x24
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff feee 	bl	8003764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003988:	f002 f846 	bl	8005a18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800398c:	2301      	movs	r3, #1
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08e      	sub	sp, #56	; 0x38
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <xQueueGenericCreateStatic+0x28>
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c2:	e7fe      	b.n	80039c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <xQueueGenericCreateStatic+0x42>
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <xQueueGenericCreateStatic+0x4e>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <xQueueGenericCreateStatic+0x52>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericCreateStatic+0x54>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <xQueueGenericCreateStatic+0x6c>
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	e7fe      	b.n	8003a06 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <xQueueGenericCreateStatic+0x78>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <xQueueGenericCreateStatic+0x7c>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <xQueueGenericCreateStatic+0x7e>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <xQueueGenericCreateStatic+0x96>
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e7fe      	b.n	8003a30 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a32:	2350      	movs	r3, #80	; 0x50
 8003a34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b50      	cmp	r3, #80	; 0x50
 8003a3a:	d009      	beq.n	8003a50 <xQueueGenericCreateStatic+0xb4>
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	e7fe      	b.n	8003a4e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f842 	bl	8003afa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3730      	adds	r7, #48	; 0x30
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <xQueueGenericCreate+0x28>
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e7fe      	b.n	8003aa6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e004      	b.n	8003abe <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3350      	adds	r3, #80	; 0x50
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 f894 	bl	8005bf0 <pvPortMalloc>
 8003ac8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00f      	beq.n	8003af0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	3350      	adds	r3, #80	; 0x50
 8003ad4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ade:	79fa      	ldrb	r2, [r7, #7]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f805 	bl	8003afa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003af0:	69bb      	ldr	r3, [r7, #24]
	}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e002      	b.n	8003b1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b28:	2101      	movs	r1, #1
 8003b2a:	69b8      	ldr	r0, [r7, #24]
 8003b2c:	f7ff fece 	bl	80038cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b60:	2300      	movs	r3, #0
 8003b62:	2200      	movs	r2, #0
 8003b64:	2100      	movs	r1, #0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f838 	bl	8003bdc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6939      	ldr	r1, [r7, #16]
 8003b8c:	6978      	ldr	r0, [r7, #20]
 8003b8e:	f7ff ff77 	bl	8003a80 <xQueueGenericCreate>
 8003b92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff ffd3 	bl	8003b40 <prvInitialiseMutex>

		return pxNewQueue;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
	}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	6939      	ldr	r1, [r7, #16]
 8003bc2:	6978      	ldr	r0, [r7, #20]
 8003bc4:	f7ff feea 	bl	800399c <xQueueGenericCreateStatic>
 8003bc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff ffb8 	bl	8003b40 <prvInitialiseMutex>

		return pxNewQueue;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
	}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08e      	sub	sp, #56	; 0x38
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bea:	2300      	movs	r3, #0
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <xQueueGenericSend+0x30>
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0a:	e7fe      	b.n	8003c0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <xQueueGenericSend+0x3e>
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <xQueueGenericSend+0x42>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <xQueueGenericSend+0x44>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <xQueueGenericSend+0x5c>
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
 8003c36:	e7fe      	b.n	8003c36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d103      	bne.n	8003c46 <xQueueGenericSend+0x6a>
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <xQueueGenericSend+0x6e>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <xQueueGenericSend+0x70>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <xQueueGenericSend+0x88>
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	e7fe      	b.n	8003c62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c64:	f001 f99a 	bl	8004f9c <xTaskGetSchedulerState>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <xQueueGenericSend+0x98>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <xQueueGenericSend+0x9c>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <xQueueGenericSend+0x9e>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <xQueueGenericSend+0xb6>
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e7fe      	b.n	8003c90 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c92:	f001 fe93 	bl	80059bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <xQueueGenericSend+0xcc>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d129      	bne.n	8003cfc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cae:	f000 f9ff 	bl	80040b0 <prvCopyDataToQueue>
 8003cb2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	3324      	adds	r3, #36	; 0x24
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 ffaf 	bl	8004c24 <xTaskRemoveFromEventList>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <xQueueGenericSend+0x1f0>)
 8003cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	e00a      	b.n	8003cf4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ce4:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <xQueueGenericSend+0x1f0>)
 8003ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cf4:	f001 fe90 	bl	8005a18 <vPortExitCritical>
				return pdPASS;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e063      	b.n	8003dc4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d02:	f001 fe89 	bl	8005a18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e05c      	b.n	8003dc4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 ffe7 	bl	8004ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d1e:	f001 fe7b 	bl	8005a18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d22:	f000 fd5d 	bl	80047e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d26:	f001 fe49 	bl	80059bc <vPortEnterCritical>
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d30:	b25b      	sxtb	r3, r3
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d103      	bne.n	8003d40 <xQueueGenericSend+0x164>
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d103      	bne.n	8003d56 <xQueueGenericSend+0x17a>
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d56:	f001 fe5f 	bl	8005a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d5a:	1d3a      	adds	r2, r7, #4
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 ffd6 	bl	8004d14 <xTaskCheckForTimeOut>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d124      	bne.n	8003db8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d70:	f000 fa96 	bl	80042a0 <prvIsQueueFull>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	3310      	adds	r3, #16
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 ff00 	bl	8004b88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d8a:	f000 fa21 	bl	80041d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d8e:	f000 fd35 	bl	80047fc <xTaskResumeAll>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f47f af7c 	bne.w	8003c92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <xQueueGenericSend+0x1f0>)
 8003d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	e772      	b.n	8003c92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dae:	f000 fa0f 	bl	80041d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003db2:	f000 fd23 	bl	80047fc <xTaskResumeAll>
 8003db6:	e76c      	b.n	8003c92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dba:	f000 fa09 	bl	80041d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dbe:	f000 fd1d 	bl	80047fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dc2:	2300      	movs	r3, #0
		}
	}
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3738      	adds	r7, #56	; 0x38
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	e000ed04 	.word	0xe000ed04

08003dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08e      	sub	sp, #56	; 0x38
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <xQueueGenericSendFromISR+0x2c>
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	e7fe      	b.n	8003dfa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <xQueueGenericSendFromISR+0x3a>
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <xQueueGenericSendFromISR+0x3e>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <xQueueGenericSendFromISR+0x40>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <xQueueGenericSendFromISR+0x58>
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	e7fe      	b.n	8003e26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d103      	bne.n	8003e36 <xQueueGenericSendFromISR+0x66>
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <xQueueGenericSendFromISR+0x6a>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueGenericSendFromISR+0x6c>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <xQueueGenericSendFromISR+0x84>
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e7fe      	b.n	8003e52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e54:	f001 fe8e 	bl	8005b74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e58:	f3ef 8211 	mrs	r2, BASEPRI
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	61ba      	str	r2, [r7, #24]
 8003e6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <xQueueGenericSendFromISR+0xb6>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d12c      	bne.n	8003ee0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e96:	f000 f90b 	bl	80040b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d112      	bne.n	8003eca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	3324      	adds	r3, #36	; 0x24
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 feb7 	bl	8004c24 <xTaskRemoveFromEventList>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00e      	beq.n	8003eda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e007      	b.n	8003eda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ece:	3301      	adds	r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	b25a      	sxtb	r2, r3
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003eda:	2301      	movs	r3, #1
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003ede:	e001      	b.n	8003ee4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3738      	adds	r7, #56	; 0x38
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	; 0x30
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <xQueueReceive+0x2e>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	e7fe      	b.n	8003f24 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <xQueueReceive+0x3c>
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <xQueueReceive+0x40>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <xQueueReceive+0x42>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <xQueueReceive+0x5a>
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	61fb      	str	r3, [r7, #28]
 8003f50:	e7fe      	b.n	8003f50 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f52:	f001 f823 	bl	8004f9c <xTaskGetSchedulerState>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <xQueueReceive+0x6a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <xQueueReceive+0x6e>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <xQueueReceive+0x70>
 8003f66:	2300      	movs	r3, #0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <xQueueReceive+0x88>
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e7fe      	b.n	8003f7e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f80:	f001 fd1c 	bl	80059bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01f      	beq.n	8003fd0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f94:	f000 f8f6 	bl	8004184 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00f      	beq.n	8003fc8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	3310      	adds	r3, #16
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fe39 	bl	8004c24 <xTaskRemoveFromEventList>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fb8:	4b3c      	ldr	r3, [pc, #240]	; (80040ac <xQueueReceive+0x1b4>)
 8003fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fc8:	f001 fd26 	bl	8005a18 <vPortExitCritical>
				return pdPASS;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e069      	b.n	80040a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fd6:	f001 fd1f 	bl	8005a18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e062      	b.n	80040a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fe4:	f107 0310 	add.w	r3, r7, #16
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fe7d 	bl	8004ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ff2:	f001 fd11 	bl	8005a18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ff6:	f000 fbf3 	bl	80047e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ffa:	f001 fcdf 	bl	80059bc <vPortEnterCritical>
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004004:	b25b      	sxtb	r3, r3
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d103      	bne.n	8004014 <xQueueReceive+0x11c>
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800401a:	b25b      	sxtb	r3, r3
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d103      	bne.n	800402a <xQueueReceive+0x132>
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402a:	f001 fcf5 	bl	8005a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800402e:	1d3a      	adds	r2, r7, #4
 8004030:	f107 0310 	add.w	r3, r7, #16
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fe6c 	bl	8004d14 <xTaskCheckForTimeOut>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d123      	bne.n	800408a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004044:	f000 f916 	bl	8004274 <prvIsQueueEmpty>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d017      	beq.n	800407e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	3324      	adds	r3, #36	; 0x24
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fd96 	bl	8004b88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800405c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800405e:	f000 f8b7 	bl	80041d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004062:	f000 fbcb 	bl	80047fc <xTaskResumeAll>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d189      	bne.n	8003f80 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <xQueueReceive+0x1b4>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	e780      	b.n	8003f80 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800407e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004080:	f000 f8a6 	bl	80041d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004084:	f000 fbba 	bl	80047fc <xTaskResumeAll>
 8004088:	e77a      	b.n	8003f80 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800408a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408c:	f000 f8a0 	bl	80041d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004090:	f000 fbb4 	bl	80047fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004096:	f000 f8ed 	bl	8004274 <prvIsQueueEmpty>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	f43f af6f 	beq.w	8003f80 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3730      	adds	r7, #48	; 0x30
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d14d      	bne.n	8004172 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 ff7c 	bl	8004fd8 <xTaskPriorityDisinherit>
 80040e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	e043      	b.n	8004172 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d119      	bne.n	8004124 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6898      	ldr	r0, [r3, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	461a      	mov	r2, r3
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	f003 fb02 	bl	8007704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	441a      	add	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d32b      	bcc.n	8004172 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	e026      	b.n	8004172 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68d8      	ldr	r0, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	461a      	mov	r2, r3
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	f003 fae8 	bl	8007704 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	425b      	negs	r3, r3
 800413e:	441a      	add	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d207      	bcs.n	8004160 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	425b      	negs	r3, r3
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d105      	bne.n	8004172 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3b01      	subs	r3, #1
 8004170:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800417a:	697b      	ldr	r3, [r7, #20]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	441a      	add	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d303      	bcc.n	80041b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68d9      	ldr	r1, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	461a      	mov	r2, r3
 80041c2:	6838      	ldr	r0, [r7, #0]
 80041c4:	f003 fa9e 	bl	8007704 <memcpy>
	}
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041d8:	f001 fbf0 	bl	80059bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041e4:	e011      	b.n	800420a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fd16 	bl	8004c24 <xTaskRemoveFromEventList>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041fe:	f000 fde9 	bl	8004dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	3b01      	subs	r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800420a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	dce9      	bgt.n	80041e6 <prvUnlockQueue+0x16>
 8004212:	e000      	b.n	8004216 <prvUnlockQueue+0x46>
					break;
 8004214:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800421e:	f001 fbfb 	bl	8005a18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004222:	f001 fbcb 	bl	80059bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800422e:	e011      	b.n	8004254 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3310      	adds	r3, #16
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fcf1 	bl	8004c24 <xTaskRemoveFromEventList>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004248:	f000 fdc4 	bl	8004dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	3b01      	subs	r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004258:	2b00      	cmp	r3, #0
 800425a:	dce9      	bgt.n	8004230 <prvUnlockQueue+0x60>
 800425c:	e000      	b.n	8004260 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800425e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004268:	f001 fbd6 	bl	8005a18 <vPortExitCritical>
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800427c:	f001 fb9e 	bl	80059bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e001      	b.n	8004292 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004292:	f001 fbc1 	bl	8005a18 <vPortExitCritical>

	return xReturn;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042a8:	f001 fb88 	bl	80059bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d102      	bne.n	80042be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e001      	b.n	80042c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042c2:	f001 fba9 	bl	8005a18 <vPortExitCritical>

	return xReturn;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e014      	b.n	800430a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042e0:	4a0e      	ldr	r2, [pc, #56]	; (800431c <vQueueAddToRegistry+0x4c>)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042ec:	490b      	ldr	r1, [pc, #44]	; (800431c <vQueueAddToRegistry+0x4c>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <vQueueAddToRegistry+0x4c>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004302:	e005      	b.n	8004310 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3301      	adds	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b07      	cmp	r3, #7
 800430e:	d9e7      	bls.n	80042e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	20013740 	.word	0x20013740

08004320 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004330:	f001 fb44 	bl	80059bc <vPortEnterCritical>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800433a:	b25b      	sxtb	r3, r3
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d103      	bne.n	800434a <vQueueWaitForMessageRestricted+0x2a>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004350:	b25b      	sxtb	r3, r3
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d103      	bne.n	8004360 <vQueueWaitForMessageRestricted+0x40>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004360:	f001 fb5a 	bl	8005a18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	3324      	adds	r3, #36	; 0x24
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fc2b 	bl	8004bd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7ff ff28 	bl	80041d0 <prvUnlockQueue>
	}
 8004380:	bf00      	nop
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08e      	sub	sp, #56	; 0x38
 800438c:	af04      	add	r7, sp, #16
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <xTaskCreateStatic+0x28>
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	623b      	str	r3, [r7, #32]
 80043ae:	e7fe      	b.n	80043ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <xTaskCreateStatic+0x42>
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e7fe      	b.n	80043c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043ca:	235c      	movs	r3, #92	; 0x5c
 80043cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b5c      	cmp	r3, #92	; 0x5c
 80043d2:	d009      	beq.n	80043e8 <xTaskCreateStatic+0x60>
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	e7fe      	b.n	80043e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01e      	beq.n	800442c <xTaskCreateStatic+0xa4>
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01b      	beq.n	800442c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	2202      	movs	r2, #2
 8004402:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004406:	2300      	movs	r3, #0
 8004408:	9303      	str	r3, [sp, #12]
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	9302      	str	r3, [sp, #8]
 800440e:	f107 0314 	add.w	r3, r7, #20
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f850 	bl	80044c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004426:	f000 f8d3 	bl	80045d0 <prvAddNewTaskToReadyList>
 800442a:	e001      	b.n	8004430 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004430:	697b      	ldr	r3, [r7, #20]
	}
 8004432:	4618      	mov	r0, r3
 8004434:	3728      	adds	r7, #40	; 0x28
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800443a:	b580      	push	{r7, lr}
 800443c:	b08c      	sub	sp, #48	; 0x30
 800443e:	af04      	add	r7, sp, #16
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4618      	mov	r0, r3
 8004450:	f001 fbce 	bl	8005bf0 <pvPortMalloc>
 8004454:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800445c:	205c      	movs	r0, #92	; 0x5c
 800445e:	f001 fbc7 	bl	8005bf0 <pvPortMalloc>
 8004462:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
 8004470:	e005      	b.n	800447e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004472:	6978      	ldr	r0, [r7, #20]
 8004474:	f001 fc7e 	bl	8005d74 <vPortFree>
 8004478:	e001      	b.n	800447e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d017      	beq.n	80044b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800448c:	88fa      	ldrh	r2, [r7, #6]
 800448e:	2300      	movs	r3, #0
 8004490:	9303      	str	r3, [sp, #12]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	9302      	str	r3, [sp, #8]
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f80e 	bl	80044c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044a8:	69f8      	ldr	r0, [r7, #28]
 80044aa:	f000 f891 	bl	80045d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044ae:	2301      	movs	r3, #1
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	e002      	b.n	80044ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
 80044b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044ba:	69bb      	ldr	r3, [r7, #24]
	}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	461a      	mov	r2, r3
 80044dc:	21a5      	movs	r1, #165	; 0xa5
 80044de:	f003 f91c 	bl	800771a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044ec:	3b01      	subs	r3, #1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <prvInitialiseNewTask+0x56>
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e7fe      	b.n	8004518 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	e012      	b.n	8004546 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	7819      	ldrb	r1, [r3, #0]
 8004528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	4413      	add	r3, r2
 800452e:	3334      	adds	r3, #52	; 0x34
 8004530:	460a      	mov	r2, r1
 8004532:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	3301      	adds	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2b0f      	cmp	r3, #15
 800454a:	d9e9      	bls.n	8004520 <prvInitialiseNewTask+0x5c>
 800454c:	e000      	b.n	8004550 <prvInitialiseNewTask+0x8c>
		{
			break;
 800454e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2b37      	cmp	r3, #55	; 0x37
 800455c:	d901      	bls.n	8004562 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800455e:	2337      	movs	r3, #55	; 0x37
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	3304      	adds	r3, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff f913 	bl	80037a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	3318      	adds	r3, #24
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f90e 	bl	80037a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	69b8      	ldr	r0, [r7, #24]
 80045b2:	f001 f8db 	bl	800576c <pxPortInitialiseStack>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045c8:	bf00      	nop
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045d8:	f001 f9f0 	bl	80059bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045dc:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a2c      	ldr	r2, [pc, #176]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 80045e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045e6:	4b2c      	ldr	r3, [pc, #176]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ee:	4a2a      	ldr	r2, [pc, #168]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <prvAddNewTaskToReadyList+0xc4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d110      	bne.n	800461e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045fc:	f000 fc0e 	bl	8004e1c <prvInitialiseTaskLists>
 8004600:	e00d      	b.n	800461e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <prvAddNewTaskToReadyList+0xcc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800460a:	4b23      	ldr	r3, [pc, #140]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	429a      	cmp	r2, r3
 8004616:	d802      	bhi.n	800461e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004618:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <prvAddNewTaskToReadyList+0xd0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <prvAddNewTaskToReadyList+0xd0>)
 8004626:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <prvAddNewTaskToReadyList+0xd0>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <prvAddNewTaskToReadyList+0xd4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d903      	bls.n	8004644 <prvAddNewTaskToReadyList+0x74>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <prvAddNewTaskToReadyList+0xd4>)
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <prvAddNewTaskToReadyList+0xd8>)
 8004652:	441a      	add	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7ff f8af 	bl	80037be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004660:	f001 f9da 	bl	8005a18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004664:	4b0d      	ldr	r3, [pc, #52]	; (800469c <prvAddNewTaskToReadyList+0xcc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <prvAddNewTaskToReadyList+0xc8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	429a      	cmp	r2, r3
 8004678:	d207      	bcs.n	800468a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <prvAddNewTaskToReadyList+0xdc>)
 800467c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	200035bc 	.word	0x200035bc
 8004698:	200030e8 	.word	0x200030e8
 800469c:	200035c8 	.word	0x200035c8
 80046a0:	200035d8 	.word	0x200035d8
 80046a4:	200035c4 	.word	0x200035c4
 80046a8:	200030ec 	.word	0x200030ec
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d016      	beq.n	80046f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <vTaskDelay+0x60>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <vTaskDelay+0x2e>
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	e7fe      	b.n	80046dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80046de:	f000 f87f 	bl	80047e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046e2:	2100      	movs	r1, #0
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fce3 	bl	80050b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046ea:	f000 f887 	bl	80047fc <xTaskResumeAll>
 80046ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d107      	bne.n	8004706 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <vTaskDelay+0x64>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	200035e4 	.word	0x200035e4
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004726:	463a      	mov	r2, r7
 8004728:	1d39      	adds	r1, r7, #4
 800472a:	f107 0308 	add.w	r3, r7, #8
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe ffe4 	bl	80036fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004734:	6839      	ldr	r1, [r7, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	9202      	str	r2, [sp, #8]
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2300      	movs	r3, #0
 8004744:	460a      	mov	r2, r1
 8004746:	4920      	ldr	r1, [pc, #128]	; (80047c8 <vTaskStartScheduler+0xb0>)
 8004748:	4820      	ldr	r0, [pc, #128]	; (80047cc <vTaskStartScheduler+0xb4>)
 800474a:	f7ff fe1d 	bl	8004388 <xTaskCreateStatic>
 800474e:	4602      	mov	r2, r0
 8004750:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <vTaskStartScheduler+0xb8>)
 8004752:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <vTaskStartScheduler+0xb8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e001      	b.n	8004766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d102      	bne.n	8004772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800476c:	f000 fcf4 	bl	8005158 <xTimerCreateTimerTask>
 8004770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d115      	bne.n	80047a4 <vTaskStartScheduler+0x8c>
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <vTaskStartScheduler+0xbc>)
 800478c:	f04f 32ff 	mov.w	r2, #4294967295
 8004790:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <vTaskStartScheduler+0xc0>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004798:	4b10      	ldr	r3, [pc, #64]	; (80047dc <vTaskStartScheduler+0xc4>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800479e:	f001 f86f 	bl	8005880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047a2:	e00d      	b.n	80047c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d109      	bne.n	80047c0 <vTaskStartScheduler+0xa8>
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e7fe      	b.n	80047be <vTaskStartScheduler+0xa6>
}
 80047c0:	bf00      	nop
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	08007744 	.word	0x08007744
 80047cc:	08004ded 	.word	0x08004ded
 80047d0:	200035e0 	.word	0x200035e0
 80047d4:	200035dc 	.word	0x200035dc
 80047d8:	200035c8 	.word	0x200035c8
 80047dc:	200035c0 	.word	0x200035c0

080047e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <vTaskSuspendAll+0x18>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	4a03      	ldr	r2, [pc, #12]	; (80047f8 <vTaskSuspendAll+0x18>)
 80047ec:	6013      	str	r3, [r2, #0]
}
 80047ee:	bf00      	nop
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	200035e4 	.word	0x200035e4

080047fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800480a:	4b41      	ldr	r3, [pc, #260]	; (8004910 <xTaskResumeAll+0x114>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <xTaskResumeAll+0x2a>
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	e7fe      	b.n	8004824 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004826:	f001 f8c9 	bl	80059bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800482a:	4b39      	ldr	r3, [pc, #228]	; (8004910 <xTaskResumeAll+0x114>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3b01      	subs	r3, #1
 8004830:	4a37      	ldr	r2, [pc, #220]	; (8004910 <xTaskResumeAll+0x114>)
 8004832:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004834:	4b36      	ldr	r3, [pc, #216]	; (8004910 <xTaskResumeAll+0x114>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d162      	bne.n	8004902 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <xTaskResumeAll+0x118>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05e      	beq.n	8004902 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004844:	e02f      	b.n	80048a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004846:	4b34      	ldr	r3, [pc, #208]	; (8004918 <xTaskResumeAll+0x11c>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3318      	adds	r3, #24
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f810 	bl	8003878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3304      	adds	r3, #4
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff f80b 	bl	8003878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	4b2d      	ldr	r3, [pc, #180]	; (800491c <xTaskResumeAll+0x120>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d903      	bls.n	8004876 <xTaskResumeAll+0x7a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4a2a      	ldr	r2, [pc, #168]	; (800491c <xTaskResumeAll+0x120>)
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4a27      	ldr	r2, [pc, #156]	; (8004920 <xTaskResumeAll+0x124>)
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7fe ff96 	bl	80037be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <xTaskResumeAll+0x128>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <xTaskResumeAll+0x12c>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <xTaskResumeAll+0x11c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1cb      	bne.n	8004846 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048b4:	f000 fb4c 	bl	8004f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048b8:	4b1c      	ldr	r3, [pc, #112]	; (800492c <xTaskResumeAll+0x130>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d010      	beq.n	80048e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048c4:	f000 f846 	bl	8004954 <xTaskIncrementTick>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80048ce:	4b16      	ldr	r3, [pc, #88]	; (8004928 <xTaskResumeAll+0x12c>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f1      	bne.n	80048c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <xTaskResumeAll+0x130>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <xTaskResumeAll+0x12c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048ee:	2301      	movs	r3, #1
 80048f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <xTaskResumeAll+0x134>)
 80048f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004902:	f001 f889 	bl	8005a18 <vPortExitCritical>

	return xAlreadyYielded;
 8004906:	68bb      	ldr	r3, [r7, #8]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	200035e4 	.word	0x200035e4
 8004914:	200035bc 	.word	0x200035bc
 8004918:	2000357c 	.word	0x2000357c
 800491c:	200035c4 	.word	0x200035c4
 8004920:	200030ec 	.word	0x200030ec
 8004924:	200030e8 	.word	0x200030e8
 8004928:	200035d0 	.word	0x200035d0
 800492c:	200035cc 	.word	0x200035cc
 8004930:	e000ed04 	.word	0xe000ed04

08004934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <xTaskGetTickCount+0x1c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004940:	687b      	ldr	r3, [r7, #4]
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	200035c0 	.word	0x200035c0

08004954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800495e:	4b51      	ldr	r3, [pc, #324]	; (8004aa4 <xTaskIncrementTick+0x150>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 808d 	bne.w	8004a82 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004968:	4b4f      	ldr	r3, [pc, #316]	; (8004aa8 <xTaskIncrementTick+0x154>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004970:	4a4d      	ldr	r2, [pc, #308]	; (8004aa8 <xTaskIncrementTick+0x154>)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d11f      	bne.n	80049bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800497c:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <xTaskIncrementTick+0x158>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <xTaskIncrementTick+0x46>
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	e7fe      	b.n	8004998 <xTaskIncrementTick+0x44>
 800499a:	4b44      	ldr	r3, [pc, #272]	; (8004aac <xTaskIncrementTick+0x158>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <xTaskIncrementTick+0x15c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a41      	ldr	r2, [pc, #260]	; (8004aac <xTaskIncrementTick+0x158>)
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4a41      	ldr	r2, [pc, #260]	; (8004ab0 <xTaskIncrementTick+0x15c>)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <xTaskIncrementTick+0x160>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	4a3f      	ldr	r2, [pc, #252]	; (8004ab4 <xTaskIncrementTick+0x160>)
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	f000 faca 	bl	8004f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049bc:	4b3e      	ldr	r3, [pc, #248]	; (8004ab8 <xTaskIncrementTick+0x164>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d34e      	bcc.n	8004a64 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <xTaskIncrementTick+0x158>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <xTaskIncrementTick+0x80>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <xTaskIncrementTick+0x82>
 80049d4:	2300      	movs	r3, #0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049da:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <xTaskIncrementTick+0x164>)
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295
 80049e0:	601a      	str	r2, [r3, #0]
					break;
 80049e2:	e03f      	b.n	8004a64 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049e4:	4b31      	ldr	r3, [pc, #196]	; (8004aac <xTaskIncrementTick+0x158>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d203      	bcs.n	8004a04 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049fc:	4a2e      	ldr	r2, [pc, #184]	; (8004ab8 <xTaskIncrementTick+0x164>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6013      	str	r3, [r2, #0]
						break;
 8004a02:	e02f      	b.n	8004a64 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe ff35 	bl	8003878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	3318      	adds	r3, #24
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe ff2c 	bl	8003878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	4b25      	ldr	r3, [pc, #148]	; (8004abc <xTaskIncrementTick+0x168>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d903      	bls.n	8004a34 <xTaskIncrementTick+0xe0>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <xTaskIncrementTick+0x168>)
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <xTaskIncrementTick+0x16c>)
 8004a42:	441a      	add	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f7fe feb7 	bl	80037be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <xTaskIncrementTick+0x170>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3b3      	bcc.n	80049c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a62:	e7b0      	b.n	80049c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a64:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <xTaskIncrementTick+0x170>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	4915      	ldr	r1, [pc, #84]	; (8004ac0 <xTaskIncrementTick+0x16c>)
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d907      	bls.n	8004a8c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e004      	b.n	8004a8c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a82:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <xTaskIncrementTick+0x174>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3301      	adds	r3, #1
 8004a88:	4a0f      	ldr	r2, [pc, #60]	; (8004ac8 <xTaskIncrementTick+0x174>)
 8004a8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <xTaskIncrementTick+0x178>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a98:	697b      	ldr	r3, [r7, #20]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	200035e4 	.word	0x200035e4
 8004aa8:	200035c0 	.word	0x200035c0
 8004aac:	20003574 	.word	0x20003574
 8004ab0:	20003578 	.word	0x20003578
 8004ab4:	200035d4 	.word	0x200035d4
 8004ab8:	200035dc 	.word	0x200035dc
 8004abc:	200035c4 	.word	0x200035c4
 8004ac0:	200030ec 	.word	0x200030ec
 8004ac4:	200030e8 	.word	0x200030e8
 8004ac8:	200035cc 	.word	0x200035cc
 8004acc:	200035d0 	.word	0x200035d0

08004ad0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ad6:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <vTaskSwitchContext+0xa4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <vTaskSwitchContext+0xa8>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ae4:	e040      	b.n	8004b68 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <vTaskSwitchContext+0xa8>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004aec:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <vTaskSwitchContext+0xac>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	e00f      	b.n	8004b14 <vTaskSwitchContext+0x44>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <vTaskSwitchContext+0x3e>
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	e7fe      	b.n	8004b0c <vTaskSwitchContext+0x3c>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	491a      	ldr	r1, [pc, #104]	; (8004b80 <vTaskSwitchContext+0xb0>)
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0e5      	beq.n	8004af4 <vTaskSwitchContext+0x24>
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <vTaskSwitchContext+0xb0>)
 8004b34:	4413      	add	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d104      	bne.n	8004b58 <vTaskSwitchContext+0x88>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	605a      	str	r2, [r3, #4]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <vTaskSwitchContext+0xb4>)
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <vTaskSwitchContext+0xac>)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6013      	str	r3, [r2, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	200035e4 	.word	0x200035e4
 8004b78:	200035d0 	.word	0x200035d0
 8004b7c:	200035c4 	.word	0x200035c4
 8004b80:	200030ec 	.word	0x200030ec
 8004b84:	200030e8 	.word	0x200030e8

08004b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <vTaskPlaceOnEventList+0x24>
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e7fe      	b.n	8004baa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <vTaskPlaceOnEventList+0x44>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fe fe26 	bl	8003806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bba:	2101      	movs	r1, #1
 8004bbc:	6838      	ldr	r0, [r7, #0]
 8004bbe:	f000 fa77 	bl	80050b0 <prvAddCurrentTaskToDelayedList>
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200030e8 	.word	0x200030e8

08004bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <vTaskPlaceOnEventListRestricted+0x26>
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e7fe      	b.n	8004bf4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <vTaskPlaceOnEventListRestricted+0x50>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3318      	adds	r3, #24
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7fe fddd 	bl	80037be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	68b8      	ldr	r0, [r7, #8]
 8004c14:	f000 fa4c 	bl	80050b0 <prvAddCurrentTaskToDelayedList>
	}
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	200030e8 	.word	0x200030e8

08004c24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <xTaskRemoveFromEventList+0x2a>
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e7fe      	b.n	8004c4c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3318      	adds	r3, #24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe fe10 	bl	8003878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c58:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <xTaskRemoveFromEventList+0xac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d11d      	bne.n	8004c9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe fe07 	bl	8003878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <xTaskRemoveFromEventList+0xb0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d903      	bls.n	8004c7e <xTaskRemoveFromEventList+0x5a>
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <xTaskRemoveFromEventList+0xb0>)
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <xTaskRemoveFromEventList+0xb4>)
 8004c8c:	441a      	add	r2, r3
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7fe fd92 	bl	80037be <vListInsertEnd>
 8004c9a:	e005      	b.n	8004ca8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	3318      	adds	r3, #24
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	480e      	ldr	r0, [pc, #56]	; (8004cdc <xTaskRemoveFromEventList+0xb8>)
 8004ca4:	f7fe fd8b 	bl	80037be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <xTaskRemoveFromEventList+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d905      	bls.n	8004cc2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cba:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <xTaskRemoveFromEventList+0xc0>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e001      	b.n	8004cc6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004cc6:	697b      	ldr	r3, [r7, #20]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200035e4 	.word	0x200035e4
 8004cd4:	200035c4 	.word	0x200035c4
 8004cd8:	200030ec 	.word	0x200030ec
 8004cdc:	2000357c 	.word	0x2000357c
 8004ce0:	200030e8 	.word	0x200030e8
 8004ce4:	200035d0 	.word	0x200035d0

08004ce8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <vTaskInternalSetTimeOutState+0x24>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <vTaskInternalSetTimeOutState+0x28>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	605a      	str	r2, [r3, #4]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	200035d4 	.word	0x200035d4
 8004d10:	200035c0 	.word	0x200035c0

08004d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <xTaskCheckForTimeOut+0x24>
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e7fe      	b.n	8004d36 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <xTaskCheckForTimeOut+0x3e>
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e7fe      	b.n	8004d50 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004d52:	f000 fe33 	bl	80059bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <xTaskCheckForTimeOut+0xb8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d102      	bne.n	8004d76 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	e023      	b.n	8004dbe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <xTaskCheckForTimeOut+0xbc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d007      	beq.n	8004d92 <xTaskCheckForTimeOut+0x7e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d302      	bcc.n	8004d92 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	e015      	b.n	8004dbe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d20b      	bcs.n	8004db4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1ad2      	subs	r2, r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff ff9d 	bl	8004ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	e004      	b.n	8004dbe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dbe:	f000 fe2b 	bl	8005a18 <vPortExitCritical>

	return xReturn;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	200035c0 	.word	0x200035c0
 8004dd0:	200035d4 	.word	0x200035d4

08004dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <vTaskMissedYield+0x14>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	200035d0 	.word	0x200035d0

08004dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004df4:	f000 f852 	bl	8004e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <prvIdleTask+0x28>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d9f9      	bls.n	8004df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <prvIdleTask+0x2c>)
 8004e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e10:	e7f0      	b.n	8004df4 <prvIdleTask+0x8>
 8004e12:	bf00      	nop
 8004e14:	200030ec 	.word	0x200030ec
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	e00c      	b.n	8004e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <prvInitialiseTaskLists+0x60>)
 8004e34:	4413      	add	r3, r2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe fc94 	bl	8003764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b37      	cmp	r3, #55	; 0x37
 8004e46:	d9ef      	bls.n	8004e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e48:	480d      	ldr	r0, [pc, #52]	; (8004e80 <prvInitialiseTaskLists+0x64>)
 8004e4a:	f7fe fc8b 	bl	8003764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e4e:	480d      	ldr	r0, [pc, #52]	; (8004e84 <prvInitialiseTaskLists+0x68>)
 8004e50:	f7fe fc88 	bl	8003764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e54:	480c      	ldr	r0, [pc, #48]	; (8004e88 <prvInitialiseTaskLists+0x6c>)
 8004e56:	f7fe fc85 	bl	8003764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e5a:	480c      	ldr	r0, [pc, #48]	; (8004e8c <prvInitialiseTaskLists+0x70>)
 8004e5c:	f7fe fc82 	bl	8003764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e60:	480b      	ldr	r0, [pc, #44]	; (8004e90 <prvInitialiseTaskLists+0x74>)
 8004e62:	f7fe fc7f 	bl	8003764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <prvInitialiseTaskLists+0x78>)
 8004e68:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <prvInitialiseTaskLists+0x64>)
 8004e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <prvInitialiseTaskLists+0x7c>)
 8004e6e:	4a05      	ldr	r2, [pc, #20]	; (8004e84 <prvInitialiseTaskLists+0x68>)
 8004e70:	601a      	str	r2, [r3, #0]
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200030ec 	.word	0x200030ec
 8004e80:	2000354c 	.word	0x2000354c
 8004e84:	20003560 	.word	0x20003560
 8004e88:	2000357c 	.word	0x2000357c
 8004e8c:	20003590 	.word	0x20003590
 8004e90:	200035a8 	.word	0x200035a8
 8004e94:	20003574 	.word	0x20003574
 8004e98:	20003578 	.word	0x20003578

08004e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ea2:	e019      	b.n	8004ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ea4:	f000 fd8a 	bl	80059bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <prvCheckTasksWaitingTermination+0x4c>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fe fcdf 	bl	8003878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004eba:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <prvCheckTasksWaitingTermination+0x50>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <prvCheckTasksWaitingTermination+0x50>)
 8004ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <prvCheckTasksWaitingTermination+0x54>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <prvCheckTasksWaitingTermination+0x54>)
 8004ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ece:	f000 fda3 	bl	8005a18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f80e 	bl	8004ef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <prvCheckTasksWaitingTermination+0x54>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e1      	bne.n	8004ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20003590 	.word	0x20003590
 8004eec:	200035bc 	.word	0x200035bc
 8004ef0:	200035a4 	.word	0x200035a4

08004ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d108      	bne.n	8004f18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 ff32 	bl	8005d74 <vPortFree>
				vPortFree( pxTCB );
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 ff2f 	bl	8005d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f16:	e017      	b.n	8004f48 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d103      	bne.n	8004f2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 ff26 	bl	8005d74 <vPortFree>
	}
 8004f28:	e00e      	b.n	8004f48 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d009      	beq.n	8004f48 <prvDeleteTCB+0x54>
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e7fe      	b.n	8004f46 <prvDeleteTCB+0x52>
	}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f56:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <prvResetNextTaskUnblockTime+0x44>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <prvResetNextTaskUnblockTime+0x14>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <prvResetNextTaskUnblockTime+0x16>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <prvResetNextTaskUnblockTime+0x48>)
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f72:	e008      	b.n	8004f86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <prvResetNextTaskUnblockTime+0x44>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <prvResetNextTaskUnblockTime+0x48>)
 8004f84:	6013      	str	r3, [r2, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20003574 	.word	0x20003574
 8004f98:	200035dc 	.word	0x200035dc

08004f9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <xTaskGetSchedulerState+0x34>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004faa:	2301      	movs	r3, #1
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	e008      	b.n	8004fc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <xTaskGetSchedulerState+0x38>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	607b      	str	r3, [r7, #4]
 8004fbc:	e001      	b.n	8004fc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fc2:	687b      	ldr	r3, [r7, #4]
	}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	200035c8 	.word	0x200035c8
 8004fd4:	200035e4 	.word	0x200035e4

08004fd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d054      	beq.n	8005098 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fee:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <xTaskPriorityDisinherit+0xcc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d009      	beq.n	800500c <xTaskPriorityDisinherit+0x34>
 8004ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e7fe      	b.n	800500a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <xTaskPriorityDisinherit+0x50>
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	e7fe      	b.n	8005026 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502c:	1e5a      	subs	r2, r3, #1
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	429a      	cmp	r2, r3
 800503c:	d02c      	beq.n	8005098 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005042:	2b00      	cmp	r3, #0
 8005044:	d128      	bne.n	8005098 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3304      	adds	r3, #4
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fc14 	bl	8003878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <xTaskPriorityDisinherit+0xd0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d903      	bls.n	8005078 <xTaskPriorityDisinherit+0xa0>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	4a0c      	ldr	r2, [pc, #48]	; (80050a8 <xTaskPriorityDisinherit+0xd0>)
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4a09      	ldr	r2, [pc, #36]	; (80050ac <xTaskPriorityDisinherit+0xd4>)
 8005086:	441a      	add	r2, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7fe fb95 	bl	80037be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005094:	2301      	movs	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005098:	697b      	ldr	r3, [r7, #20]
	}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	200030e8 	.word	0x200030e8
 80050a8:	200035c4 	.word	0x200035c4
 80050ac:	200030ec 	.word	0x200030ec

080050b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050ba:	4b21      	ldr	r3, [pc, #132]	; (8005140 <prvAddCurrentTaskToDelayedList+0x90>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c0:	4b20      	ldr	r3, [pc, #128]	; (8005144 <prvAddCurrentTaskToDelayedList+0x94>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fbd6 	bl	8003878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d10a      	bne.n	80050ea <prvAddCurrentTaskToDelayedList+0x3a>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <prvAddCurrentTaskToDelayedList+0x94>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4819      	ldr	r0, [pc, #100]	; (8005148 <prvAddCurrentTaskToDelayedList+0x98>)
 80050e4:	f7fe fb6b 	bl	80037be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050e8:	e026      	b.n	8005138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4413      	add	r3, r2
 80050f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <prvAddCurrentTaskToDelayedList+0x94>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d209      	bcs.n	8005116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <prvAddCurrentTaskToDelayedList+0x94>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f7fe fb79 	bl	8003806 <vListInsert>
}
 8005114:	e010      	b.n	8005138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005116:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <prvAddCurrentTaskToDelayedList+0x94>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3304      	adds	r3, #4
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7fe fb6f 	bl	8003806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	d202      	bcs.n	8005138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005132:	4a08      	ldr	r2, [pc, #32]	; (8005154 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6013      	str	r3, [r2, #0]
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	200035c0 	.word	0x200035c0
 8005144:	200030e8 	.word	0x200030e8
 8005148:	200035a8 	.word	0x200035a8
 800514c:	20003578 	.word	0x20003578
 8005150:	20003574 	.word	0x20003574
 8005154:	200035dc 	.word	0x200035dc

08005158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005162:	f000 fac3 	bl	80056ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005166:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <xTimerCreateTimerTask+0x80>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d021      	beq.n	80051b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005176:	1d3a      	adds	r2, r7, #4
 8005178:	f107 0108 	add.w	r1, r7, #8
 800517c:	f107 030c 	add.w	r3, r7, #12
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fad5 	bl	8003730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	9202      	str	r2, [sp, #8]
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	2302      	movs	r3, #2
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	460a      	mov	r2, r1
 8005198:	4910      	ldr	r1, [pc, #64]	; (80051dc <xTimerCreateTimerTask+0x84>)
 800519a:	4811      	ldr	r0, [pc, #68]	; (80051e0 <xTimerCreateTimerTask+0x88>)
 800519c:	f7ff f8f4 	bl	8004388 <xTaskCreateStatic>
 80051a0:	4602      	mov	r2, r0
 80051a2:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <xTimerCreateTimerTask+0x8c>)
 80051a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051a6:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <xTimerCreateTimerTask+0x8c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051ae:	2301      	movs	r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d109      	bne.n	80051cc <xTimerCreateTimerTask+0x74>
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e7fe      	b.n	80051ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 80051cc:	697b      	ldr	r3, [r7, #20]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20003618 	.word	0x20003618
 80051dc:	0800774c 	.word	0x0800774c
 80051e0:	08005301 	.word	0x08005301
 80051e4:	2000361c 	.word	0x2000361c

080051e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <xTimerGenericCommand+0x2c>
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	e7fe      	b.n	8005212 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005214:	4b19      	ldr	r3, [pc, #100]	; (800527c <xTimerGenericCommand+0x94>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d02a      	beq.n	8005272 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b05      	cmp	r3, #5
 800522c:	dc18      	bgt.n	8005260 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800522e:	f7ff feb5 	bl	8004f9c <xTaskGetSchedulerState>
 8005232:	4603      	mov	r3, r0
 8005234:	2b02      	cmp	r3, #2
 8005236:	d109      	bne.n	800524c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <xTimerGenericCommand+0x94>)
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	f107 0110 	add.w	r1, r7, #16
 8005240:	2300      	movs	r3, #0
 8005242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005244:	f7fe fcca 	bl	8003bdc <xQueueGenericSend>
 8005248:	6278      	str	r0, [r7, #36]	; 0x24
 800524a:	e012      	b.n	8005272 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <xTimerGenericCommand+0x94>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	f107 0110 	add.w	r1, r7, #16
 8005254:	2300      	movs	r3, #0
 8005256:	2200      	movs	r2, #0
 8005258:	f7fe fcc0 	bl	8003bdc <xQueueGenericSend>
 800525c:	6278      	str	r0, [r7, #36]	; 0x24
 800525e:	e008      	b.n	8005272 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <xTimerGenericCommand+0x94>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	f107 0110 	add.w	r1, r7, #16
 8005268:	2300      	movs	r3, #0
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	f7fe fdb0 	bl	8003dd0 <xQueueGenericSendFromISR>
 8005270:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005274:	4618      	mov	r0, r3
 8005276:	3728      	adds	r7, #40	; 0x28
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20003618 	.word	0x20003618

08005280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800528a:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <prvProcessExpiredTimer+0x7c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe faed 	bl	8003878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d121      	bne.n	80052ea <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	18d1      	adds	r1, r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	6978      	ldr	r0, [r7, #20]
 80052b4:	f000 f8c8 	bl	8005448 <prvInsertTimerInActiveList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052be:	2300      	movs	r3, #0
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2300      	movs	r3, #0
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	2100      	movs	r1, #0
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f7ff ff8d 	bl	80051e8 <xTimerGenericCommand>
 80052ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <prvProcessExpiredTimer+0x6a>
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e7fe      	b.n	80052e8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	6978      	ldr	r0, [r7, #20]
 80052f0:	4798      	blx	r3
}
 80052f2:	bf00      	nop
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20003610 	.word	0x20003610

08005300 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005308:	f107 0308 	add.w	r3, r7, #8
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f857 	bl	80053c0 <prvGetNextExpireTime>
 8005312:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4619      	mov	r1, r3
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f803 	bl	8005324 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800531e:	f000 f8d5 	bl	80054cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005322:	e7f1      	b.n	8005308 <prvTimerTask+0x8>

08005324 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800532e:	f7ff fa57 	bl	80047e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f866 	bl	8005408 <prvSampleTimeNow>
 800533c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d130      	bne.n	80053a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <prvProcessTimerOrBlockTask+0x3c>
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	429a      	cmp	r2, r3
 8005350:	d806      	bhi.n	8005360 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005352:	f7ff fa53 	bl	80047fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff91 	bl	8005280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800535e:	e024      	b.n	80053aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <prvProcessTimerOrBlockTask+0x90>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf0c      	ite	eq
 8005370:	2301      	moveq	r3, #1
 8005372:	2300      	movne	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <prvProcessTimerOrBlockTask+0x94>)
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	4619      	mov	r1, r3
 8005386:	f7fe ffcb 	bl	8004320 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800538a:	f7ff fa37 	bl	80047fc <xTaskResumeAll>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <prvProcessTimerOrBlockTask+0x98>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
}
 80053a4:	e001      	b.n	80053aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053a6:	f7ff fa29 	bl	80047fc <xTaskResumeAll>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20003614 	.word	0x20003614
 80053b8:	20003618 	.word	0x20003618
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053c8:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <prvGetNextExpireTime+0x44>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bf0c      	ite	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	2300      	movne	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d105      	bne.n	80053f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <prvGetNextExpireTime+0x44>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e001      	b.n	80053f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	20003610 	.word	0x20003610

08005408 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005410:	f7ff fa90 	bl	8004934 <xTaskGetTickCount>
 8005414:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <prvSampleTimeNow+0x3c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d205      	bcs.n	800542c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005420:	f000 f904 	bl	800562c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e002      	b.n	8005432 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005432:	4a04      	ldr	r2, [pc, #16]	; (8005444 <prvSampleTimeNow+0x3c>)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20003620 	.word	0x20003620

08005448 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d812      	bhi.n	8005494 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	429a      	cmp	r2, r3
 800547a:	d302      	bcc.n	8005482 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e01b      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <prvInsertTimerInActiveList+0x7c>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7fe f9ba 	bl	8003806 <vListInsert>
 8005492:	e012      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d206      	bcs.n	80054aa <prvInsertTimerInActiveList+0x62>
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d302      	bcc.n	80054aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054a4:	2301      	movs	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e007      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <prvInsertTimerInActiveList+0x80>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f7fe f9a6 	bl	8003806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054ba:	697b      	ldr	r3, [r7, #20]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20003614 	.word	0x20003614
 80054c8:	20003610 	.word	0x20003610

080054cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	; 0x38
 80054d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054d2:	e099      	b.n	8005608 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da17      	bge.n	800550a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	3304      	adds	r3, #4
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <prvProcessReceivedCommands+0x2e>
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	e7fe      	b.n	80054f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005500:	6850      	ldr	r0, [r2, #4]
 8005502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005504:	6892      	ldr	r2, [r2, #8]
 8005506:	4611      	mov	r1, r2
 8005508:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	db7a      	blt.n	8005606 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	3304      	adds	r3, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe f9a9 	bl	8003878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005526:	463b      	mov	r3, r7
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff ff6d 	bl	8005408 <prvSampleTimeNow>
 800552e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b09      	cmp	r3, #9
 8005534:	d868      	bhi.n	8005608 <prvProcessReceivedCommands+0x13c>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <prvProcessReceivedCommands+0x70>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005565 	.word	0x08005565
 8005540:	08005565 	.word	0x08005565
 8005544:	08005565 	.word	0x08005565
 8005548:	08005609 	.word	0x08005609
 800554c:	080055bf 	.word	0x080055bf
 8005550:	080055f5 	.word	0x080055f5
 8005554:	08005565 	.word	0x08005565
 8005558:	08005565 	.word	0x08005565
 800555c:	08005609 	.word	0x08005609
 8005560:	080055bf 	.word	0x080055bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	18d1      	adds	r1, r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005572:	f7ff ff69 	bl	8005448 <prvInsertTimerInActiveList>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d045      	beq.n	8005608 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005582:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d13d      	bne.n	8005608 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	441a      	add	r2, r3
 8005594:	2300      	movs	r3, #0
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	2300      	movs	r3, #0
 800559a:	2100      	movs	r1, #0
 800559c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800559e:	f7ff fe23 	bl	80051e8 <xTimerGenericCommand>
 80055a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d12e      	bne.n	8005608 <prvProcessReceivedCommands+0x13c>
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e7fe      	b.n	80055bc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <prvProcessReceivedCommands+0x114>
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e7fe      	b.n	80055de <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	18d1      	adds	r1, r2, r3
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ee:	f7ff ff2b 	bl	8005448 <prvInsertTimerInActiveList>
					break;
 80055f2:	e009      	b.n	8005608 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80055fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005600:	f000 fbb8 	bl	8005d74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005604:	e000      	b.n	8005608 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005606:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <prvProcessReceivedCommands+0x15c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	1d39      	adds	r1, r7, #4
 800560e:	2200      	movs	r2, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f7fe fc71 	bl	8003ef8 <xQueueReceive>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	f47f af5b 	bne.w	80054d4 <prvProcessReceivedCommands+0x8>
	}
}
 800561e:	bf00      	nop
 8005620:	3730      	adds	r7, #48	; 0x30
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20003618 	.word	0x20003618

0800562c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005632:	e044      	b.n	80056be <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005634:	4b2b      	ldr	r3, [pc, #172]	; (80056e4 <prvSwitchTimerLists+0xb8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800563e:	4b29      	ldr	r3, [pc, #164]	; (80056e4 <prvSwitchTimerLists+0xb8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3304      	adds	r3, #4
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe f913 	bl	8003878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d12d      	bne.n	80056be <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4413      	add	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d90e      	bls.n	8005692 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005680:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <prvSwitchTimerLists+0xb8>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3304      	adds	r3, #4
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7fe f8bb 	bl	8003806 <vListInsert>
 8005690:	e015      	b.n	80056be <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005692:	2300      	movs	r3, #0
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	2300      	movs	r3, #0
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	2100      	movs	r1, #0
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fda3 	bl	80051e8 <xTimerGenericCommand>
 80056a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <prvSwitchTimerLists+0x92>
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	e7fe      	b.n	80056bc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <prvSwitchTimerLists+0xb8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1b5      	bne.n	8005634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <prvSwitchTimerLists+0xb8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056ce:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <prvSwitchTimerLists+0xbc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <prvSwitchTimerLists+0xb8>)
 80056d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056d6:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <prvSwitchTimerLists+0xbc>)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20003610 	.word	0x20003610
 80056e8:	20003614 	.word	0x20003614

080056ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056f2:	f000 f963 	bl	80059bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <prvCheckForValidListAndQueue+0x60>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d120      	bne.n	8005740 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056fe:	4814      	ldr	r0, [pc, #80]	; (8005750 <prvCheckForValidListAndQueue+0x64>)
 8005700:	f7fe f830 	bl	8003764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005704:	4813      	ldr	r0, [pc, #76]	; (8005754 <prvCheckForValidListAndQueue+0x68>)
 8005706:	f7fe f82d 	bl	8003764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <prvCheckForValidListAndQueue+0x6c>)
 800570c:	4a10      	ldr	r2, [pc, #64]	; (8005750 <prvCheckForValidListAndQueue+0x64>)
 800570e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005710:	4b12      	ldr	r3, [pc, #72]	; (800575c <prvCheckForValidListAndQueue+0x70>)
 8005712:	4a10      	ldr	r2, [pc, #64]	; (8005754 <prvCheckForValidListAndQueue+0x68>)
 8005714:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005716:	2300      	movs	r3, #0
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <prvCheckForValidListAndQueue+0x74>)
 800571c:	4a11      	ldr	r2, [pc, #68]	; (8005764 <prvCheckForValidListAndQueue+0x78>)
 800571e:	2110      	movs	r1, #16
 8005720:	200a      	movs	r0, #10
 8005722:	f7fe f93b 	bl	800399c <xQueueGenericCreateStatic>
 8005726:	4602      	mov	r2, r0
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <prvCheckForValidListAndQueue+0x60>)
 800572a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <prvCheckForValidListAndQueue+0x60>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <prvCheckForValidListAndQueue+0x60>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	490b      	ldr	r1, [pc, #44]	; (8005768 <prvCheckForValidListAndQueue+0x7c>)
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fdc8 	bl	80042d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005740:	f000 f96a 	bl	8005a18 <vPortExitCritical>
}
 8005744:	bf00      	nop
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20003618 	.word	0x20003618
 8005750:	200035e8 	.word	0x200035e8
 8005754:	200035fc 	.word	0x200035fc
 8005758:	20003610 	.word	0x20003610
 800575c:	20003614 	.word	0x20003614
 8005760:	200036c4 	.word	0x200036c4
 8005764:	20003624 	.word	0x20003624
 8005768:	08007754 	.word	0x08007754

0800576c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3b04      	subs	r3, #4
 800577c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3b04      	subs	r3, #4
 800578a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 0201 	bic.w	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3b04      	subs	r3, #4
 800579a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800579c:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <pxPortInitialiseStack+0x64>)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3b14      	subs	r3, #20
 80057a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f06f 0202 	mvn.w	r2, #2
 80057ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3b20      	subs	r3, #32
 80057c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057c2:	68fb      	ldr	r3, [r7, #12]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	080057d5 	.word	0x080057d5

080057d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057de:	4b11      	ldr	r3, [pc, #68]	; (8005824 <prvTaskExitError+0x50>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d009      	beq.n	80057fc <prvTaskExitError+0x28>
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	e7fe      	b.n	80057fa <prvTaskExitError+0x26>
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800580e:	bf00      	nop
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0fc      	beq.n	8005810 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000004 	.word	0x20000004
	...

08005830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <pxCurrentTCBConst2>)
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	6808      	ldr	r0, [r1, #0]
 8005836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583a:	f380 8809 	msr	PSP, r0
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8811 	msr	BASEPRI, r0
 800584a:	4770      	bx	lr
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst2>:
 8005850:	200030e8 	.word	0x200030e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005858:	4808      	ldr	r0, [pc, #32]	; (800587c <prvPortStartFirstTask+0x24>)
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	6800      	ldr	r0, [r0, #0]
 800585e:	f380 8808 	msr	MSP, r0
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8814 	msr	CONTROL, r0
 800586a:	b662      	cpsie	i
 800586c:	b661      	cpsie	f
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	df00      	svc	0
 8005878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800587a:	bf00      	nop
 800587c:	e000ed08 	.word	0xe000ed08

08005880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005886:	4b44      	ldr	r3, [pc, #272]	; (8005998 <xPortStartScheduler+0x118>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a44      	ldr	r2, [pc, #272]	; (800599c <xPortStartScheduler+0x11c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d109      	bne.n	80058a4 <xPortStartScheduler+0x24>
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	e7fe      	b.n	80058a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058a4:	4b3c      	ldr	r3, [pc, #240]	; (8005998 <xPortStartScheduler+0x118>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a3d      	ldr	r2, [pc, #244]	; (80059a0 <xPortStartScheduler+0x120>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d109      	bne.n	80058c2 <xPortStartScheduler+0x42>
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e7fe      	b.n	80058c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058c2:	4b38      	ldr	r3, [pc, #224]	; (80059a4 <xPortStartScheduler+0x124>)
 80058c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	22ff      	movs	r2, #255	; 0xff
 80058d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <xPortStartScheduler+0x128>)
 80058e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ea:	4b30      	ldr	r3, [pc, #192]	; (80059ac <xPortStartScheduler+0x12c>)
 80058ec:	2207      	movs	r2, #7
 80058ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058f0:	e009      	b.n	8005906 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <xPortStartScheduler+0x12c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	4a2c      	ldr	r2, [pc, #176]	; (80059ac <xPortStartScheduler+0x12c>)
 80058fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b80      	cmp	r3, #128	; 0x80
 8005910:	d0ef      	beq.n	80058f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005912:	4b26      	ldr	r3, [pc, #152]	; (80059ac <xPortStartScheduler+0x12c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1c3 0307 	rsb	r3, r3, #7
 800591a:	2b04      	cmp	r3, #4
 800591c:	d009      	beq.n	8005932 <xPortStartScheduler+0xb2>
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	e7fe      	b.n	8005930 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005932:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <xPortStartScheduler+0x12c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <xPortStartScheduler+0x12c>)
 800593a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <xPortStartScheduler+0x12c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <xPortStartScheduler+0x12c>)
 8005946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005950:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <xPortStartScheduler+0x130>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <xPortStartScheduler+0x130>)
 8005956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800595a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800595c:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <xPortStartScheduler+0x130>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <xPortStartScheduler+0x130>)
 8005962:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005968:	f000 f8d6 	bl	8005b18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800596c:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <xPortStartScheduler+0x134>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005972:	f000 f8f5 	bl	8005b60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <xPortStartScheduler+0x138>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <xPortStartScheduler+0x138>)
 800597c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005980:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005982:	f7ff ff69 	bl	8005858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005986:	f7ff f8a3 	bl	8004ad0 <vTaskSwitchContext>
	prvTaskExitError();
 800598a:	f7ff ff23 	bl	80057d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	e000ed00 	.word	0xe000ed00
 800599c:	410fc271 	.word	0x410fc271
 80059a0:	410fc270 	.word	0x410fc270
 80059a4:	e000e400 	.word	0xe000e400
 80059a8:	20003714 	.word	0x20003714
 80059ac:	20003718 	.word	0x20003718
 80059b0:	e000ed20 	.word	0xe000ed20
 80059b4:	20000004 	.word	0x20000004
 80059b8:	e000ef34 	.word	0xe000ef34

080059bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <vPortEnterCritical+0x54>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	4a0d      	ldr	r2, [pc, #52]	; (8005a10 <vPortEnterCritical+0x54>)
 80059dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <vPortEnterCritical+0x54>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d10e      	bne.n	8005a04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <vPortEnterCritical+0x58>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d009      	beq.n	8005a04 <vPortEnterCritical+0x48>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	e7fe      	b.n	8005a02 <vPortEnterCritical+0x46>
	}
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000004 	.word	0x20000004
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <vPortExitCritical+0x4c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <vPortExitCritical+0x22>
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	e7fe      	b.n	8005a38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <vPortExitCritical+0x4c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <vPortExitCritical+0x4c>)
 8005a42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <vPortExitCritical+0x4c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <vPortExitCritical+0x3e>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000004 	.word	0x20000004
	...

08005a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a70:	f3ef 8009 	mrs	r0, PSP
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <pxCurrentTCBConst>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f01e 0f10 	tst.w	lr, #16
 8005a80:	bf08      	it	eq
 8005a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	6010      	str	r0, [r2, #0]
 8005a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a94:	f380 8811 	msr	BASEPRI, r0
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f7ff f816 	bl	8004ad0 <vTaskSwitchContext>
 8005aa4:	f04f 0000 	mov.w	r0, #0
 8005aa8:	f380 8811 	msr	BASEPRI, r0
 8005aac:	bc09      	pop	{r0, r3}
 8005aae:	6819      	ldr	r1, [r3, #0]
 8005ab0:	6808      	ldr	r0, [r1, #0]
 8005ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab6:	f01e 0f10 	tst.w	lr, #16
 8005aba:	bf08      	it	eq
 8005abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ac0:	f380 8809 	msr	PSP, r0
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	f3af 8000 	nop.w

08005ad0 <pxCurrentTCBConst>:
 8005ad0:	200030e8 	.word	0x200030e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop

08005ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005af0:	f7fe ff30 	bl	8004954 <xTaskIncrementTick>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <SysTick_Handler+0x3c>)
 8005afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <vPortSetupTimerInterrupt+0x34>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <vPortSetupTimerInterrupt+0x38>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <vPortSetupTimerInterrupt+0x3c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <vPortSetupTimerInterrupt+0x40>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <vPortSetupTimerInterrupt+0x44>)
 8005b36:	3b01      	subs	r3, #1
 8005b38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b3a:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <vPortSetupTimerInterrupt+0x34>)
 8005b3c:	2207      	movs	r2, #7
 8005b3e:	601a      	str	r2, [r3, #0]
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	e000e010 	.word	0xe000e010
 8005b50:	e000e018 	.word	0xe000e018
 8005b54:	2000000c 	.word	0x2000000c
 8005b58:	10624dd3 	.word	0x10624dd3
 8005b5c:	e000e014 	.word	0xe000e014

08005b60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b70 <vPortEnableVFP+0x10>
 8005b64:	6801      	ldr	r1, [r0, #0]
 8005b66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b6a:	6001      	str	r1, [r0, #0]
 8005b6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b6e:	bf00      	nop
 8005b70:	e000ed88 	.word	0xe000ed88

08005b74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b7a:	f3ef 8305 	mrs	r3, IPSR
 8005b7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b0f      	cmp	r3, #15
 8005b84:	d913      	bls.n	8005bae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <vPortValidateInterruptPriority+0x6c>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b90:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <vPortValidateInterruptPriority+0x70>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	7afa      	ldrb	r2, [r7, #11]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d209      	bcs.n	8005bae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	607b      	str	r3, [r7, #4]
 8005bac:	e7fe      	b.n	8005bac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <vPortValidateInterruptPriority+0x74>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <vPortValidateInterruptPriority+0x78>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d909      	bls.n	8005bd2 <vPortValidateInterruptPriority+0x5e>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	e7fe      	b.n	8005bd0 <vPortValidateInterruptPriority+0x5c>
	}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000e3f0 	.word	0xe000e3f0
 8005be4:	20003714 	.word	0x20003714
 8005be8:	e000ed0c 	.word	0xe000ed0c
 8005bec:	20003718 	.word	0x20003718

08005bf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	; 0x28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bfc:	f7fe fdf0 	bl	80047e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c00:	4b57      	ldr	r3, [pc, #348]	; (8005d60 <pvPortMalloc+0x170>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c08:	f000 f90c 	bl	8005e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c0c:	4b55      	ldr	r3, [pc, #340]	; (8005d64 <pvPortMalloc+0x174>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 808c 	bne.w	8005d32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01c      	beq.n	8005c5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c20:	2208      	movs	r2, #8
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d013      	beq.n	8005c5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f023 0307 	bic.w	r3, r3, #7
 8005c38:	3308      	adds	r3, #8
 8005c3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <pvPortMalloc+0x6a>
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e7fe      	b.n	8005c58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d068      	beq.n	8005d32 <pvPortMalloc+0x142>
 8005c60:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <pvPortMalloc+0x178>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d863      	bhi.n	8005d32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c6a:	4b40      	ldr	r3, [pc, #256]	; (8005d6c <pvPortMalloc+0x17c>)
 8005c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <pvPortMalloc+0x17c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c74:	e004      	b.n	8005c80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d903      	bls.n	8005c92 <pvPortMalloc+0xa2>
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f1      	bne.n	8005c76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c92:	4b33      	ldr	r3, [pc, #204]	; (8005d60 <pvPortMalloc+0x170>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d04a      	beq.n	8005d32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	4413      	add	r3, r2
 8005ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	1ad2      	subs	r2, r2, r3
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d91e      	bls.n	8005cfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <pvPortMalloc+0xf4>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	e7fe      	b.n	8005ce2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	1ad2      	subs	r2, r2, r3
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cf6:	69b8      	ldr	r0, [r7, #24]
 8005cf8:	f000 f8f6 	bl	8005ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <pvPortMalloc+0x178>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <pvPortMalloc+0x178>)
 8005d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d0a:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <pvPortMalloc+0x178>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <pvPortMalloc+0x180>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d203      	bcs.n	8005d1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <pvPortMalloc+0x178>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <pvPortMalloc+0x180>)
 8005d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <pvPortMalloc+0x174>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d32:	f7fe fd63 	bl	80047fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d009      	beq.n	8005d54 <pvPortMalloc+0x164>
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e7fe      	b.n	8005d52 <pvPortMalloc+0x162>
	return pvReturn;
 8005d54:	69fb      	ldr	r3, [r7, #28]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3728      	adds	r7, #40	; 0x28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20013724 	.word	0x20013724
 8005d64:	20013730 	.word	0x20013730
 8005d68:	20013728 	.word	0x20013728
 8005d6c:	2001371c 	.word	0x2001371c
 8005d70:	2001372c 	.word	0x2001372c

08005d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d046      	beq.n	8005e14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d86:	2308      	movs	r3, #8
 8005d88:	425b      	negs	r3, r3
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <vPortFree+0xa8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <vPortFree+0x42>
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e7fe      	b.n	8005db4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <vPortFree+0x5e>
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	60bb      	str	r3, [r7, #8]
 8005dd0:	e7fe      	b.n	8005dd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <vPortFree+0xa8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d019      	beq.n	8005e14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d115      	bne.n	8005e14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <vPortFree+0xa8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	43db      	mvns	r3, r3
 8005df2:	401a      	ands	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005df8:	f7fe fcf2 	bl	80047e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <vPortFree+0xac>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4413      	add	r3, r2
 8005e06:	4a06      	ldr	r2, [pc, #24]	; (8005e20 <vPortFree+0xac>)
 8005e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e0a:	6938      	ldr	r0, [r7, #16]
 8005e0c:	f000 f86c 	bl	8005ee8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e10:	f7fe fcf4 	bl	80047fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e14:	bf00      	nop
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20013730 	.word	0x20013730
 8005e20:	20013728 	.word	0x20013728

08005e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e30:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <prvHeapInit+0xac>)
 8005e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3307      	adds	r3, #7
 8005e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0307 	bic.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <prvHeapInit+0xac>)
 8005e54:	4413      	add	r3, r2
 8005e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <prvHeapInit+0xb0>)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <prvHeapInit+0xb0>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e70:	2208      	movs	r2, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0307 	bic.w	r3, r3, #7
 8005e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <prvHeapInit+0xb4>)
 8005e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <prvHeapInit+0xb4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e8e:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <prvHeapInit+0xb4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvHeapInit+0xb4>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <prvHeapInit+0xb8>)
 8005eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4a09      	ldr	r2, [pc, #36]	; (8005ee0 <prvHeapInit+0xbc>)
 8005eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <prvHeapInit+0xc0>)
 8005ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ec2:	601a      	str	r2, [r3, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	2000371c 	.word	0x2000371c
 8005ed4:	2001371c 	.word	0x2001371c
 8005ed8:	20013724 	.word	0x20013724
 8005edc:	2001372c 	.word	0x2001372c
 8005ee0:	20013728 	.word	0x20013728
 8005ee4:	20013730 	.word	0x20013730

08005ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <prvInsertBlockIntoFreeList+0xac>)
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	e002      	b.n	8005efc <prvInsertBlockIntoFreeList+0x14>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d8f7      	bhi.n	8005ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4413      	add	r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d108      	bne.n	8005f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	441a      	add	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d118      	bne.n	8005f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <prvInsertBlockIntoFreeList+0xb0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d00d      	beq.n	8005f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e008      	b.n	8005f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <prvInsertBlockIntoFreeList+0xb0>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e003      	b.n	8005f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d002      	beq.n	8005f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	2001371c 	.word	0x2001371c
 8005f98:	20013724 	.word	0x20013724

08005f9c <gy_30_send_command>:

extern I2C_HandleTypeDef hi2c3;
#define GY30_I2C	&hi2c3

void gy_30_send_command(uint8_t command)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(GY30_I2C, GY_30_ADDR, &command, 1, 200);
 8005fa6:	1dfa      	adds	r2, r7, #7
 8005fa8:	23c8      	movs	r3, #200	; 0xc8
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2301      	movs	r3, #1
 8005fae:	2146      	movs	r1, #70	; 0x46
 8005fb0:	4803      	ldr	r0, [pc, #12]	; (8005fc0 <gy_30_send_command+0x24>)
 8005fb2:	f7fa fe9f 	bl	8000cf4 <HAL_I2C_Master_Transmit>
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20013784 	.word	0x20013784

08005fc4 <gy_30_read_data>:

uint16_t gy_30_read_data(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive(GY30_I2C, GY_30_ADDR, GY30_DATA, 2, 200);
 8005fca:	23c8      	movs	r3, #200	; 0xc8
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	2302      	movs	r3, #2
 8005fd0:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <gy_30_read_data+0x30>)
 8005fd2:	2146      	movs	r1, #70	; 0x46
 8005fd4:	4808      	ldr	r0, [pc, #32]	; (8005ff8 <gy_30_read_data+0x34>)
 8005fd6:	f7fa ff8b 	bl	8000ef0 <HAL_I2C_Master_Receive>
	return ((GY30_DATA[0] << 8) | GY30_DATA[1]);
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <gy_30_read_data+0x30>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	b21a      	sxth	r2, r3
 8005fe2:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <gy_30_read_data+0x30>)
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	b21b      	sxth	r3, r3
 8005fec:	b29b      	uxth	r3, r3
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	20013734 	.word	0x20013734
 8005ff8:	20013784 	.word	0x20013784

08005ffc <gy_30_display>:

unsigned char gy_30_display(GY30_Sensor_Param *ptr)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	uint16_t lx = ptr->Lx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	889b      	ldrh	r3, [r3, #4]
 8006008:	827b      	strh	r3, [r7, #18]
	uint8_t symbol[6] = {0x0};
 800600a:	f107 030c 	add.w	r3, r7, #12
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	809a      	strh	r2, [r3, #4]
	symbol[5] = ' ';
 8006014:	2320      	movs	r3, #32
 8006016:	747b      	strb	r3, [r7, #17]
	symbol[4] = lx / 1 % 10 + '0';
 8006018:	8a7a      	ldrh	r2, [r7, #18]
 800601a:	4b4e      	ldr	r3, [pc, #312]	; (8006154 <gy_30_display+0x158>)
 800601c:	fba3 1302 	umull	r1, r3, r3, r2
 8006020:	08d9      	lsrs	r1, r3, #3
 8006022:	460b      	mov	r3, r1
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	b29b      	uxth	r3, r3
 800602e:	b2db      	uxtb	r3, r3
 8006030:	3330      	adds	r3, #48	; 0x30
 8006032:	b2db      	uxtb	r3, r3
 8006034:	743b      	strb	r3, [r7, #16]
	symbol[3] = lx / 10 % 10 + '0';
 8006036:	8a7b      	ldrh	r3, [r7, #18]
 8006038:	4a46      	ldr	r2, [pc, #280]	; (8006154 <gy_30_display+0x158>)
 800603a:	fba2 2303 	umull	r2, r3, r2, r3
 800603e:	08db      	lsrs	r3, r3, #3
 8006040:	b29a      	uxth	r2, r3
 8006042:	4b44      	ldr	r3, [pc, #272]	; (8006154 <gy_30_display+0x158>)
 8006044:	fba3 1302 	umull	r1, r3, r3, r2
 8006048:	08d9      	lsrs	r1, r3, #3
 800604a:	460b      	mov	r3, r1
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	b29b      	uxth	r3, r3
 8006056:	b2db      	uxtb	r3, r3
 8006058:	3330      	adds	r3, #48	; 0x30
 800605a:	b2db      	uxtb	r3, r3
 800605c:	73fb      	strb	r3, [r7, #15]
	symbol[2] = lx / 100 % 10 + '0';
 800605e:	8a7b      	ldrh	r3, [r7, #18]
 8006060:	4a3d      	ldr	r2, [pc, #244]	; (8006158 <gy_30_display+0x15c>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	b29a      	uxth	r2, r3
 800606a:	4b3a      	ldr	r3, [pc, #232]	; (8006154 <gy_30_display+0x158>)
 800606c:	fba3 1302 	umull	r1, r3, r3, r2
 8006070:	08d9      	lsrs	r1, r3, #3
 8006072:	460b      	mov	r3, r1
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	b29b      	uxth	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	3330      	adds	r3, #48	; 0x30
 8006082:	b2db      	uxtb	r3, r3
 8006084:	73bb      	strb	r3, [r7, #14]
	symbol[1] = lx / 1000 % 10 + '0';
 8006086:	8a7b      	ldrh	r3, [r7, #18]
 8006088:	4a34      	ldr	r2, [pc, #208]	; (800615c <gy_30_display+0x160>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	099b      	lsrs	r3, r3, #6
 8006090:	b29a      	uxth	r2, r3
 8006092:	4b30      	ldr	r3, [pc, #192]	; (8006154 <gy_30_display+0x158>)
 8006094:	fba3 1302 	umull	r1, r3, r3, r2
 8006098:	08d9      	lsrs	r1, r3, #3
 800609a:	460b      	mov	r3, r1
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	3330      	adds	r3, #48	; 0x30
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	737b      	strb	r3, [r7, #13]
	symbol[0] = lx / 10000 % 10 + '0';
 80060ae:	8a7b      	ldrh	r3, [r7, #18]
 80060b0:	4a2b      	ldr	r2, [pc, #172]	; (8006160 <gy_30_display+0x164>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0b5b      	lsrs	r3, r3, #13
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	4b26      	ldr	r3, [pc, #152]	; (8006154 <gy_30_display+0x158>)
 80060bc:	fba3 1302 	umull	r1, r3, r3, r2
 80060c0:	08d9      	lsrs	r1, r3, #3
 80060c2:	460b      	mov	r3, r1
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	3330      	adds	r3, #48	; 0x30
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	733b      	strb	r3, [r7, #12]

	uart_multibyte_send((unsigned char *)gy_30_title, sizeof(gy_30_title));
 80060d6:	2114      	movs	r1, #20
 80060d8:	4822      	ldr	r0, [pc, #136]	; (8006164 <gy_30_display+0x168>)
 80060da:	f001 faaf 	bl	800763c <uart_multibyte_send>

	for(int i = 0; i < 5; i++) {
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e024      	b.n	800612e <gy_30_display+0x132>
		if(symbol[i] != '0') {
 80060e4:	f107 020c 	add.w	r2, r7, #12
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	4413      	add	r3, r2
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b30      	cmp	r3, #48	; 0x30
 80060f0:	d00d      	beq.n	800610e <gy_30_display+0x112>
			uart_multibyte_send(&symbol[i], 5-i);
 80060f2:	f107 020c 	add.w	r2, r7, #12
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	441a      	add	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f1c3 0305 	rsb	r3, r3, #5
 8006102:	b2db      	uxtb	r3, r3
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f001 fa98 	bl	800763c <uart_multibyte_send>
			break;
 800610c:	e012      	b.n	8006134 <gy_30_display+0x138>
		}
		else {
			uart_multibyte_send(&symbol[5], 1);
 800610e:	f107 030c 	add.w	r3, r7, #12
 8006112:	3305      	adds	r3, #5
 8006114:	2101      	movs	r1, #1
 8006116:	4618      	mov	r0, r3
 8006118:	f001 fa90 	bl	800763c <uart_multibyte_send>
			symbol[i] = ' ';
 800611c:	f107 020c 	add.w	r2, r7, #12
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	4413      	add	r3, r2
 8006124:	2220      	movs	r2, #32
 8006126:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 5; i++) {
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3301      	adds	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b04      	cmp	r3, #4
 8006132:	ddd7      	ble.n	80060e4 <gy_30_display+0xe8>
		}
	}

	uart_multibyte_send((unsigned char *)lx_suffix, sizeof(lx_suffix));
 8006134:	2104      	movs	r1, #4
 8006136:	480c      	ldr	r0, [pc, #48]	; (8006168 <gy_30_display+0x16c>)
 8006138:	f001 fa80 	bl	800763c <uart_multibyte_send>

    OLED_ShowString_N(50,6, symbol, sizeof(symbol));
 800613c:	f107 020c 	add.w	r2, r7, #12
 8006140:	2306      	movs	r3, #6
 8006142:	2106      	movs	r1, #6
 8006144:	2032      	movs	r0, #50	; 0x32
 8006146:	f000 fc75 	bl	8006a34 <OLED_ShowString_N>

	return 0;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	cccccccd 	.word	0xcccccccd
 8006158:	51eb851f 	.word	0x51eb851f
 800615c:	10624dd3 	.word	0x10624dd3
 8006160:	d1b71759 	.word	0xd1b71759
 8006164:	080077a0 	.word	0x080077a0
 8006168:	080077b4 	.word	0x080077b4

0800616c <gy_30_read>:

	return lx;
}

int gy_30_read(GY30_Sensor_Param *ptr)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	int statu = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]

	gy_30_send_command(ONE_RIME_H_MODE);
 8006178:	2020      	movs	r0, #32
 800617a:	f7ff ff0f 	bl	8005f9c <gy_30_send_command>
	HAL_Delay(160);
 800617e:	20a0      	movs	r0, #160	; 0xa0
 8006180:	f7fa f9f0 	bl	8000564 <HAL_Delay>
	ptr->Lx = gy_30_read_data();
 8006184:	f7ff ff1e 	bl	8005fc4 <gy_30_read_data>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	809a      	strh	r2, [r3, #4]

	return statu;
 8006190:	68fb      	ldr	r3, [r7, #12]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b0ae      	sub	sp, #184	; 0xb8
 80061a0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80061a2:	f7fa f99d 	bl	80004e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061a6:	f000 f8c5 	bl	8006334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061aa:	f000 fa2f 	bl	800660c <MX_GPIO_Init>
  MX_I2C1_Init();
 80061ae:	f000 f92b 	bl	8006408 <MX_I2C1_Init>
  MX_I2C2_Init();
 80061b2:	f000 f957 	bl	8006464 <MX_I2C2_Init>
  MX_I2C3_Init();
 80061b6:	f000 f983 	bl	80064c0 <MX_I2C3_Init>
  MX_TIM11_Init();
 80061ba:	f000 f9af 	bl	800651c <MX_TIM11_Init>
  MX_USART6_UART_Init();
 80061be:	f000 f9fb 	bl	80065b8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  printf("This is a STM32F411CEU6\n\r");
  oled_display_memu();
 80061c2:	f000 fd11 	bl	8006be8 <oled_display_memu>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80061c6:	2100      	movs	r1, #0
 80061c8:	4849      	ldr	r0, [pc, #292]	; (80062f0 <main+0x154>)
 80061ca:	f7fc f88d 	bl	80022e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  osKernelInitialize();
 80061ce:	f7fd f833 	bl	8003238 <osKernelInitialize>

  /* Create the mutex(es) */
  /* definition and creation of myMutex */
  const osMutexAttr_t myMutex_attributes = {
 80061d2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	605a      	str	r2, [r3, #4]
 80061dc:	609a      	str	r2, [r3, #8]
 80061de:	60da      	str	r2, [r3, #12]
 80061e0:	4b44      	ldr	r3, [pc, #272]	; (80062f4 <main+0x158>)
 80061e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    .name = "myMutex"
  };
  myMutexHandle = osMutexNew(&myMutex_attributes);
 80061e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fd f966 	bl	80034bc <osMutexNew>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b41      	ldr	r3, [pc, #260]	; (80062f8 <main+0x15c>)
 80061f4:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of oledQueue */
  const osMessageQueueAttr_t oledQueue_attributes = {
 80061f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	605a      	str	r2, [r3, #4]
 8006200:	609a      	str	r2, [r3, #8]
 8006202:	60da      	str	r2, [r3, #12]
 8006204:	611a      	str	r2, [r3, #16]
 8006206:	615a      	str	r2, [r3, #20]
 8006208:	4b3c      	ldr	r3, [pc, #240]	; (80062fc <main+0x160>)
 800620a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    .name = "oledQueue"
  };
  oledQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &oledQueue_attributes);
 800620e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006212:	461a      	mov	r2, r3
 8006214:	2102      	movs	r1, #2
 8006216:	2010      	movs	r0, #16
 8006218:	f7fd f9ea 	bl	80035f0 <osMessageQueueNew>
 800621c:	4602      	mov	r2, r0
 800621e:	4b38      	ldr	r3, [pc, #224]	; (8006300 <main+0x164>)
 8006220:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sht31Task */
  const osThreadAttr_t sht31Task_attributes = {
 8006222:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006226:	2224      	movs	r2, #36	; 0x24
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f001 fa75 	bl	800771a <memset>
 8006230:	4b34      	ldr	r3, [pc, #208]	; (8006304 <main+0x168>)
 8006232:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800623c:	2310      	movs	r3, #16
 800623e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    .name = "sht31Task",
    .priority = (osPriority_t) osPriorityBelowNormal,
    .stack_size = 1024
  };
  sht31TaskHandle = osThreadNew(Sht31Task, NULL, &sht31Task_attributes);
 8006242:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006246:	461a      	mov	r2, r3
 8006248:	2100      	movs	r1, #0
 800624a:	482f      	ldr	r0, [pc, #188]	; (8006308 <main+0x16c>)
 800624c:	f7fd f85c 	bl	8003308 <osThreadNew>
 8006250:	4602      	mov	r2, r0
 8006252:	4b2e      	ldr	r3, [pc, #184]	; (800630c <main+0x170>)
 8006254:	601a      	str	r2, [r3, #0]

  /* definition and creation of gy30Task */
  const osThreadAttr_t gy30Task_attributes = {
 8006256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800625a:	2224      	movs	r2, #36	; 0x24
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fa5b 	bl	800771a <memset>
 8006264:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <main+0x174>)
 8006266:	64bb      	str	r3, [r7, #72]	; 0x48
 8006268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800626e:	2310      	movs	r3, #16
 8006270:	663b      	str	r3, [r7, #96]	; 0x60
    .name = "gy30Task",
    .priority = (osPriority_t) osPriorityBelowNormal,
    .stack_size = 1024
  };
  gy30TaskHandle = osThreadNew(Gy30Task, NULL, &gy30Task_attributes);
 8006272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006276:	461a      	mov	r2, r3
 8006278:	2100      	movs	r1, #0
 800627a:	4826      	ldr	r0, [pc, #152]	; (8006314 <main+0x178>)
 800627c:	f7fd f844 	bl	8003308 <osThreadNew>
 8006280:	4602      	mov	r2, r0
 8006282:	4b25      	ldr	r3, [pc, #148]	; (8006318 <main+0x17c>)
 8006284:	601a      	str	r2, [r3, #0]

  /* definition and creation of oledTask */
  const osThreadAttr_t oledTask_attributes = {
 8006286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f001 fa43 	bl	800771a <memset>
 8006294:	4b21      	ldr	r3, [pc, #132]	; (800631c <main+0x180>)
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
 8006298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629c:	63bb      	str	r3, [r7, #56]	; 0x38
 800629e:	2318      	movs	r3, #24
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "oledTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 1024
  };
  oledTaskHandle = osThreadNew(OledTask, NULL, &oledTask_attributes);
 80062a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062a6:	461a      	mov	r2, r3
 80062a8:	2100      	movs	r1, #0
 80062aa:	481d      	ldr	r0, [pc, #116]	; (8006320 <main+0x184>)
 80062ac:	f7fd f82c 	bl	8003308 <osThreadNew>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <main+0x188>)
 80062b4:	601a      	str	r2, [r3, #0]

  /* definition and creation of greenTask */
  const osThreadAttr_t greenTask_attributes = {
 80062b6:	463b      	mov	r3, r7
 80062b8:	2224      	movs	r2, #36	; 0x24
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 fa2c 	bl	800771a <memset>
 80062c2:	4b19      	ldr	r3, [pc, #100]	; (8006328 <main+0x18c>)
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	2308      	movs	r3, #8
 80062ce:	61bb      	str	r3, [r7, #24]
    .name = "greenTask",
    .priority = (osPriority_t) osPriorityLow,
    .stack_size = 1024
  };
  greenTaskHandle = osThreadNew(GreenTask, NULL, &greenTask_attributes);
 80062d0:	463b      	mov	r3, r7
 80062d2:	461a      	mov	r2, r3
 80062d4:	2100      	movs	r1, #0
 80062d6:	4815      	ldr	r0, [pc, #84]	; (800632c <main+0x190>)
 80062d8:	f7fd f816 	bl	8003308 <osThreadNew>
 80062dc:	4602      	mov	r2, r0
 80062de:	4b14      	ldr	r3, [pc, #80]	; (8006330 <main+0x194>)
 80062e0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80062e2:	f7fc ffdd 	bl	80032a0 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  osDelay(1);
 80062e6:	2001      	movs	r0, #1
 80062e8:	f7fd f8ba 	bl	8003460 <osDelay>
 80062ec:	e7fb      	b.n	80062e6 <main+0x14a>
 80062ee:	bf00      	nop
 80062f0:	200138a4 	.word	0x200138a4
 80062f4:	0800775c 	.word	0x0800775c
 80062f8:	200138e8 	.word	0x200138e8
 80062fc:	08007764 	.word	0x08007764
 8006300:	20013890 	.word	0x20013890
 8006304:	08007770 	.word	0x08007770
 8006308:	080066b1 	.word	0x080066b1
 800630c:	20013780 	.word	0x20013780
 8006310:	0800777c 	.word	0x0800777c
 8006314:	080066cd 	.word	0x080066cd
 8006318:	200138e4 	.word	0x200138e4
 800631c:	08007788 	.word	0x08007788
 8006320:	080066e9 	.word	0x080066e9
 8006324:	200137dc 	.word	0x200137dc
 8006328:	08007794 	.word	0x08007794
 800632c:	08006731 	.word	0x08006731
 8006330:	200137d8 	.word	0x200137d8

08006334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b094      	sub	sp, #80	; 0x50
 8006338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800633a:	f107 0320 	add.w	r3, r7, #32
 800633e:	2230      	movs	r2, #48	; 0x30
 8006340:	2100      	movs	r1, #0
 8006342:	4618      	mov	r0, r3
 8006344:	f001 f9e9 	bl	800771a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006348:	f107 030c 	add.w	r3, r7, #12
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	60da      	str	r2, [r3, #12]
 8006356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006358:	2300      	movs	r3, #0
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	4b28      	ldr	r3, [pc, #160]	; (8006400 <SystemClock_Config+0xcc>)
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	4a27      	ldr	r2, [pc, #156]	; (8006400 <SystemClock_Config+0xcc>)
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006366:	6413      	str	r3, [r2, #64]	; 0x40
 8006368:	4b25      	ldr	r3, [pc, #148]	; (8006400 <SystemClock_Config+0xcc>)
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006374:	2300      	movs	r3, #0
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	4b22      	ldr	r3, [pc, #136]	; (8006404 <SystemClock_Config+0xd0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a21      	ldr	r2, [pc, #132]	; (8006404 <SystemClock_Config+0xd0>)
 800637e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	4b1f      	ldr	r3, [pc, #124]	; (8006404 <SystemClock_Config+0xd0>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800638c:	607b      	str	r3, [r7, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006390:	2301      	movs	r3, #1
 8006392:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800639a:	2302      	movs	r3, #2
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800639e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80063a4:	2310      	movs	r3, #16
 80063a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80063a8:	23c0      	movs	r3, #192	; 0xc0
 80063aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80063ac:	2304      	movs	r3, #4
 80063ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80063b0:	2304      	movs	r3, #4
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063b4:	f107 0320 	add.w	r3, r7, #32
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fb fac9 	bl	8001950 <HAL_RCC_OscConfig>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80063c4:	f000 f9d8 	bl	8006778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063c8:	230f      	movs	r3, #15
 80063ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063cc:	2302      	movs	r3, #2
 80063ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80063d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80063de:	f107 030c 	add.w	r3, r7, #12
 80063e2:	2102      	movs	r1, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fb fcf5 	bl	8001dd4 <HAL_RCC_ClockConfig>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80063f0:	f000 f9c2 	bl	8006778 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80063f4:	f7fb fdd0 	bl	8001f98 <HAL_RCC_EnableCSS>
}
 80063f8:	bf00      	nop
 80063fa:	3750      	adds	r7, #80	; 0x50
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40023800 	.word	0x40023800
 8006404:	40007000 	.word	0x40007000

08006408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800640c:	4b12      	ldr	r3, [pc, #72]	; (8006458 <MX_I2C1_Init+0x50>)
 800640e:	4a13      	ldr	r2, [pc, #76]	; (800645c <MX_I2C1_Init+0x54>)
 8006410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <MX_I2C1_Init+0x50>)
 8006414:	4a12      	ldr	r2, [pc, #72]	; (8006460 <MX_I2C1_Init+0x58>)
 8006416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <MX_I2C1_Init+0x50>)
 800641a:	2200      	movs	r2, #0
 800641c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800641e:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <MX_I2C1_Init+0x50>)
 8006420:	2200      	movs	r2, #0
 8006422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <MX_I2C1_Init+0x50>)
 8006426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800642a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <MX_I2C1_Init+0x50>)
 800642e:	2200      	movs	r2, #0
 8006430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <MX_I2C1_Init+0x50>)
 8006434:	2200      	movs	r2, #0
 8006436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <MX_I2C1_Init+0x50>)
 800643a:	2200      	movs	r2, #0
 800643c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <MX_I2C1_Init+0x50>)
 8006440:	2200      	movs	r2, #0
 8006442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006444:	4804      	ldr	r0, [pc, #16]	; (8006458 <MX_I2C1_Init+0x50>)
 8006446:	f7fa fb2d 	bl	8000aa4 <HAL_I2C_Init>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006450:	f000 f992 	bl	8006778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006454:	bf00      	nop
 8006456:	bd80      	pop	{r7, pc}
 8006458:	200137e0 	.word	0x200137e0
 800645c:	40005400 	.word	0x40005400
 8006460:	000186a0 	.word	0x000186a0

08006464 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006468:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <MX_I2C2_Init+0x50>)
 800646a:	4a13      	ldr	r2, [pc, #76]	; (80064b8 <MX_I2C2_Init+0x54>)
 800646c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800646e:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <MX_I2C2_Init+0x50>)
 8006470:	4a12      	ldr	r2, [pc, #72]	; (80064bc <MX_I2C2_Init+0x58>)
 8006472:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006474:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <MX_I2C2_Init+0x50>)
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800647a:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <MX_I2C2_Init+0x50>)
 800647c:	2200      	movs	r2, #0
 800647e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006480:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <MX_I2C2_Init+0x50>)
 8006482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006486:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <MX_I2C2_Init+0x50>)
 800648a:	2200      	movs	r2, #0
 800648c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <MX_I2C2_Init+0x50>)
 8006490:	2200      	movs	r2, #0
 8006492:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <MX_I2C2_Init+0x50>)
 8006496:	2200      	movs	r2, #0
 8006498:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800649a:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <MX_I2C2_Init+0x50>)
 800649c:	2200      	movs	r2, #0
 800649e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80064a0:	4804      	ldr	r0, [pc, #16]	; (80064b4 <MX_I2C2_Init+0x50>)
 80064a2:	f7fa faff 	bl	8000aa4 <HAL_I2C_Init>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80064ac:	f000 f964 	bl	8006778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80064b0:	bf00      	nop
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	20013834 	.word	0x20013834
 80064b8:	40005800 	.word	0x40005800
 80064bc:	000186a0 	.word	0x000186a0

080064c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <MX_I2C3_Init+0x50>)
 80064c6:	4a13      	ldr	r2, [pc, #76]	; (8006514 <MX_I2C3_Init+0x54>)
 80064c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <MX_I2C3_Init+0x50>)
 80064cc:	4a12      	ldr	r2, [pc, #72]	; (8006518 <MX_I2C3_Init+0x58>)
 80064ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80064d0:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <MX_I2C3_Init+0x50>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80064d6:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <MX_I2C3_Init+0x50>)
 80064d8:	2200      	movs	r2, #0
 80064da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064dc:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <MX_I2C3_Init+0x50>)
 80064de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064e4:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <MX_I2C3_Init+0x50>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80064ea:	4b09      	ldr	r3, [pc, #36]	; (8006510 <MX_I2C3_Init+0x50>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <MX_I2C3_Init+0x50>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <MX_I2C3_Init+0x50>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80064fc:	4804      	ldr	r0, [pc, #16]	; (8006510 <MX_I2C3_Init+0x50>)
 80064fe:	f7fa fad1 	bl	8000aa4 <HAL_I2C_Init>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006508:	f000 f936 	bl	8006778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800650c:	bf00      	nop
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20013784 	.word	0x20013784
 8006514:	40005c00 	.word	0x40005c00
 8006518:	000186a0 	.word	0x000186a0

0800651c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	60da      	str	r2, [r3, #12]
 800652e:	611a      	str	r2, [r3, #16]
 8006530:	615a      	str	r2, [r3, #20]
 8006532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006534:	4b1e      	ldr	r3, [pc, #120]	; (80065b0 <MX_TIM11_Init+0x94>)
 8006536:	4a1f      	ldr	r2, [pc, #124]	; (80065b4 <MX_TIM11_Init+0x98>)
 8006538:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 72;
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <MX_TIM11_Init+0x94>)
 800653c:	2248      	movs	r2, #72	; 0x48
 800653e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006540:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <MX_TIM11_Init+0x94>)
 8006542:	2200      	movs	r2, #0
 8006544:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 500;
 8006546:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <MX_TIM11_Init+0x94>)
 8006548:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800654c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800654e:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <MX_TIM11_Init+0x94>)
 8006550:	2200      	movs	r2, #0
 8006552:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006554:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <MX_TIM11_Init+0x94>)
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800655a:	4815      	ldr	r0, [pc, #84]	; (80065b0 <MX_TIM11_Init+0x94>)
 800655c:	f7fb fe40 	bl	80021e0 <HAL_TIM_Base_Init>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006566:	f000 f907 	bl	8006778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800656a:	4811      	ldr	r0, [pc, #68]	; (80065b0 <MX_TIM11_Init+0x94>)
 800656c:	f7fb fe87 	bl	800227e <HAL_TIM_PWM_Init>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006576:	f000 f8ff 	bl	8006778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800657a:	2360      	movs	r3, #96	; 0x60
 800657c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800657e:	23fa      	movs	r3, #250	; 0xfa
 8006580:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800658a:	1d3b      	adds	r3, r7, #4
 800658c:	2200      	movs	r2, #0
 800658e:	4619      	mov	r1, r3
 8006590:	4807      	ldr	r0, [pc, #28]	; (80065b0 <MX_TIM11_Init+0x94>)
 8006592:	f7fb ffe3 	bl	800255c <HAL_TIM_PWM_ConfigChannel>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800659c:	f000 f8ec 	bl	8006778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80065a0:	4803      	ldr	r0, [pc, #12]	; (80065b0 <MX_TIM11_Init+0x94>)
 80065a2:	f000 ff17 	bl	80073d4 <HAL_TIM_MspPostInit>

}
 80065a6:	bf00      	nop
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	200138a4 	.word	0x200138a4
 80065b4:	40014800 	.word	0x40014800

080065b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065be:	4a12      	ldr	r2, [pc, #72]	; (8006608 <MX_USART6_UART_Init+0x50>)
 80065c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80065c2:	4b10      	ldr	r3, [pc, #64]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80065c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80065ca:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065d8:	2200      	movs	r2, #0
 80065da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065de:	220c      	movs	r2, #12
 80065e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065e2:	4b08      	ldr	r3, [pc, #32]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80065ee:	4805      	ldr	r0, [pc, #20]	; (8006604 <MX_USART6_UART_Init+0x4c>)
 80065f0:	f7fc fae7 	bl	8002bc2 <HAL_UART_Init>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80065fa:	f000 f8bd 	bl	8006778 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80065fe:	bf00      	nop
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	200138ec 	.word	0x200138ec
 8006608:	40011400 	.word	0x40011400

0800660c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006612:	f107 030c 	add.w	r3, r7, #12
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	605a      	str	r2, [r3, #4]
 800661c:	609a      	str	r2, [r3, #8]
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <MX_GPIO_Init+0x9c>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	4a1f      	ldr	r2, [pc, #124]	; (80066a8 <MX_GPIO_Init+0x9c>)
 800662c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006630:	6313      	str	r3, [r2, #48]	; 0x30
 8006632:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <MX_GPIO_Init+0x9c>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	60bb      	str	r3, [r7, #8]
 800663c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <MX_GPIO_Init+0x9c>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <MX_GPIO_Init+0x9c>)
 8006648:	f043 0302 	orr.w	r3, r3, #2
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <MX_GPIO_Init+0x9c>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	603b      	str	r3, [r7, #0]
 800665e:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <MX_GPIO_Init+0x9c>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a11      	ldr	r2, [pc, #68]	; (80066a8 <MX_GPIO_Init+0x9c>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6313      	str	r3, [r2, #48]	; 0x30
 800666a:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <MX_GPIO_Init+0x9c>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Blue_Pin|Red_Pin, GPIO_PIN_RESET);
 8006676:	2200      	movs	r2, #0
 8006678:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800667c:	480b      	ldr	r0, [pc, #44]	; (80066ac <MX_GPIO_Init+0xa0>)
 800667e:	f7fa f9f7 	bl	8000a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Blue_Pin Red_Pin */
  GPIO_InitStruct.Pin = Blue_Pin|Red_Pin;
 8006682:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8006686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006688:	2301      	movs	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	4619      	mov	r1, r3
 800669a:	4804      	ldr	r0, [pc, #16]	; (80066ac <MX_GPIO_Init+0xa0>)
 800669c:	f7fa f866 	bl	800076c <HAL_GPIO_Init>

}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40023800 	.word	0x40023800
 80066ac:	40020400 	.word	0x40020400

080066b0 <Sht31Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Sht31Task */
void Sht31Task(void *argument)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  sht31_read(&Sht3x_Param);
 80066b8:	4803      	ldr	r0, [pc, #12]	; (80066c8 <Sht31Task+0x18>)
 80066ba:	f000 fd4d 	bl	8007158 <sht31_read>
	  osDelay(1000);
 80066be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066c2:	f7fc fecd 	bl	8003460 <osDelay>
	  sht31_read(&Sht3x_Param);
 80066c6:	e7f7      	b.n	80066b8 <Sht31Task+0x8>
 80066c8:	20013894 	.word	0x20013894

080066cc <Gy30Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Gy30Task */
void Gy30Task(void *argument)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Gy30Task */
  /* Infinite loop */
  for(;;)
  {
	  gy_30_read(&GY30_Param);
 80066d4:	4803      	ldr	r0, [pc, #12]	; (80066e4 <Gy30Task+0x18>)
 80066d6:	f7ff fd49 	bl	800616c <gy_30_read>
	  osDelay(1000);
 80066da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066de:	f7fc febf 	bl	8003460 <osDelay>
	  gy_30_read(&GY30_Param);
 80066e2:	e7f7      	b.n	80066d4 <Gy30Task+0x8>
 80066e4:	20013888 	.word	0x20013888

080066e8 <OledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OledTask */
void OledTask(void *argument)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  int i;

	  OLED_Display_On();
 80066f0:	f000 f8d4 	bl	800689c <OLED_Display_On>

	  for(i = 0; i < 3; i++) {
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	e00c      	b.n	8006714 <OledTask+0x2c>
		  sht31_display(&Sht3x_Param);
 80066fa:	480b      	ldr	r0, [pc, #44]	; (8006728 <OledTask+0x40>)
 80066fc:	f000 fbb0 	bl	8006e60 <sht31_display>
		  gy_30_display(&GY30_Param);
 8006700:	480a      	ldr	r0, [pc, #40]	; (800672c <OledTask+0x44>)
 8006702:	f7ff fc7b 	bl	8005ffc <gy_30_display>
		  osDelay(1000);
 8006706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800670a:	f7fc fea9 	bl	8003460 <osDelay>
	  for(i = 0; i < 3; i++) {
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b02      	cmp	r3, #2
 8006718:	ddef      	ble.n	80066fa <OledTask+0x12>
	  }

	  OLED_Display_Off();
 800671a:	f000 f8cf 	bl	80068bc <OLED_Display_Off>

	  osDelay(5000);
 800671e:	f241 3088 	movw	r0, #5000	; 0x1388
 8006722:	f7fc fe9d 	bl	8003460 <osDelay>
  {
 8006726:	e7e3      	b.n	80066f0 <OledTask+0x8>
 8006728:	20013894 	.word	0x20013894
 800672c:	20013888 	.word	0x20013888

08006730 <GreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenTask */
void GreenTask(void *argument)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenTask */
  /* Infinite loop */
  for(;;)
  {
	  (&htim11)->Instance->CCR1 = GY30_Param.Lx;
 8006738:	4b04      	ldr	r3, [pc, #16]	; (800674c <GreenTask+0x1c>)
 800673a:	889a      	ldrh	r2, [r3, #4]
 800673c:	4b04      	ldr	r3, [pc, #16]	; (8006750 <GreenTask+0x20>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	635a      	str	r2, [r3, #52]	; 0x34
	  osDelay(1000);
 8006742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006746:	f7fc fe8b 	bl	8003460 <osDelay>
	  (&htim11)->Instance->CCR1 = GY30_Param.Lx;
 800674a:	e7f5      	b.n	8006738 <GreenTask+0x8>
 800674c:	20013888 	.word	0x20013888
 8006750:	200138a4 	.word	0x200138a4

08006754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d101      	bne.n	800676a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006766:	f7f9 fedd 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40014400 	.word	0x40014400

08006778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800677c:	bf00      	nop
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <Write_IIC_Command>:

/**********************************************
// IIC Write Command
**********************************************/
void Write_IIC_Command(unsigned char IIC_Command)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af02      	add	r7, sp, #8
 800678e:	4603      	mov	r3, r0
 8006790:	71fb      	strb	r3, [r7, #7]
    oled_cmd[1] = IIC_Command;
 8006792:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <Write_IIC_Command+0x3c>)
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	7053      	strb	r3, [r2, #1]

    if(HAL_I2C_Master_Transmit(&hi2c2, oled_addr, oled_cmd, 2, 1000) != HAL_OK) {
 8006798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	2302      	movs	r3, #2
 80067a0:	4a08      	ldr	r2, [pc, #32]	; (80067c4 <Write_IIC_Command+0x3c>)
 80067a2:	2178      	movs	r1, #120	; 0x78
 80067a4:	4808      	ldr	r0, [pc, #32]	; (80067c8 <Write_IIC_Command+0x40>)
 80067a6:	f7fa faa5 	bl	8000cf4 <HAL_I2C_Master_Transmit>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <Write_IIC_Command+0x34>
    	HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 80067b0:	2201      	movs	r2, #1
 80067b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067b6:	4805      	ldr	r0, [pc, #20]	; (80067cc <Write_IIC_Command+0x44>)
 80067b8:	f7fa f95a 	bl	8000a70 <HAL_GPIO_WritePin>
    }
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20013738 	.word	0x20013738
 80067c8:	20013834 	.word	0x20013834
 80067cc:	40020400 	.word	0x40020400

080067d0 <Write_IIC_Data>:
/**********************************************
// IIC Write Data
**********************************************/
void Write_IIC_Data(unsigned char IIC_Data)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
    oled_data[1] = IIC_Data;
 80067da:	4a0c      	ldr	r2, [pc, #48]	; (800680c <Write_IIC_Data+0x3c>)
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	7053      	strb	r3, [r2, #1]

    if(HAL_I2C_Master_Transmit(&hi2c2, oled_addr, oled_data, 2, 1000) != HAL_OK) {
 80067e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	2302      	movs	r3, #2
 80067e8:	4a08      	ldr	r2, [pc, #32]	; (800680c <Write_IIC_Data+0x3c>)
 80067ea:	2178      	movs	r1, #120	; 0x78
 80067ec:	4808      	ldr	r0, [pc, #32]	; (8006810 <Write_IIC_Data+0x40>)
 80067ee:	f7fa fa81 	bl	8000cf4 <HAL_I2C_Master_Transmit>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <Write_IIC_Data+0x34>
    	HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 80067f8:	2201      	movs	r2, #1
 80067fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067fe:	4805      	ldr	r0, [pc, #20]	; (8006814 <Write_IIC_Data+0x44>)
 8006800:	f7fa f936 	bl	8000a70 <HAL_GPIO_WritePin>
    }
}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000008 	.word	0x20000008
 8006810:	20013834 	.word	0x20013834
 8006814:	40020400 	.word	0x40020400

08006818 <OLED_WR_Byte>:

//向SSD1306写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(unsigned char data,unsigned char cmd)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	460a      	mov	r2, r1
 8006822:	71fb      	strb	r3, [r7, #7]
 8006824:	4613      	mov	r3, r2
 8006826:	71bb      	strb	r3, [r7, #6]
    if (cmd) {
 8006828:	79bb      	ldrb	r3, [r7, #6]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <OLED_WR_Byte+0x20>
        Write_IIC_Data(data);
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff ffcd 	bl	80067d0 <Write_IIC_Data>
    } else {
        Write_IIC_Command(data);
    }
}
 8006836:	e003      	b.n	8006840 <OLED_WR_Byte+0x28>
        Write_IIC_Command(data);
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff ffa4 	bl	8006788 <Write_IIC_Command>
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	460a      	mov	r2, r1
 8006852:	71fb      	strb	r3, [r7, #7]
 8006854:	4613      	mov	r3, r2
 8006856:	71bb      	strb	r3, [r7, #6]
    OLED_WR_Byte(0xb0+y,OLED_CMD);
 8006858:	79bb      	ldrb	r3, [r7, #6]
 800685a:	3b50      	subs	r3, #80	; 0x50
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff ffd9 	bl	8006818 <OLED_WR_Byte>
    OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	091b      	lsrs	r3, r3, #4
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f043 0310 	orr.w	r3, r3, #16
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff ffcf 	bl	8006818 <OLED_WR_Byte>
    OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD);
 800687a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800687e:	f003 030e 	and.w	r3, r3, #14
 8006882:	b25b      	sxtb	r3, r3
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	b25b      	sxtb	r3, r3
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff ffc2 	bl	8006818 <OLED_WR_Byte>
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <OLED_Display_On>:

//开启OLED显示
void OLED_Display_On(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
    OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC����
 80068a0:	2100      	movs	r1, #0
 80068a2:	208d      	movs	r0, #141	; 0x8d
 80068a4:	f7ff ffb8 	bl	8006818 <OLED_WR_Byte>
    OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 80068a8:	2100      	movs	r1, #0
 80068aa:	2014      	movs	r0, #20
 80068ac:	f7ff ffb4 	bl	8006818 <OLED_WR_Byte>
    OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 80068b0:	2100      	movs	r1, #0
 80068b2:	20af      	movs	r0, #175	; 0xaf
 80068b4:	f7ff ffb0 	bl	8006818 <OLED_WR_Byte>
}
 80068b8:	bf00      	nop
 80068ba:	bd80      	pop	{r7, pc}

080068bc <OLED_Display_Off>:

//关闭OLED显示
void OLED_Display_Off(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
    OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC����
 80068c0:	2100      	movs	r1, #0
 80068c2:	208d      	movs	r0, #141	; 0x8d
 80068c4:	f7ff ffa8 	bl	8006818 <OLED_WR_Byte>
    OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 80068c8:	2100      	movs	r1, #0
 80068ca:	2010      	movs	r0, #16
 80068cc:	f7ff ffa4 	bl	8006818 <OLED_WR_Byte>
    OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 80068d0:	2100      	movs	r1, #0
 80068d2:	20ae      	movs	r0, #174	; 0xae
 80068d4:	f7ff ffa0 	bl	8006818 <OLED_WR_Byte>
}
 80068d8:	bf00      	nop
 80068da:	bd80      	pop	{r7, pc}

080068dc <OLED_Clear>:

//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
void OLED_Clear(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
    unsigned char i,n;
    for(i=0;i<8;i++)
 80068e2:	2300      	movs	r3, #0
 80068e4:	71fb      	strb	r3, [r7, #7]
 80068e6:	e01e      	b.n	8006926 <OLED_Clear+0x4a>
    {
        OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	3b50      	subs	r3, #80	; 0x50
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff ff91 	bl	8006818 <OLED_WR_Byte>
        OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 80068f6:	2100      	movs	r1, #0
 80068f8:	2000      	movs	r0, #0
 80068fa:	f7ff ff8d 	bl	8006818 <OLED_WR_Byte>
        OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 80068fe:	2100      	movs	r1, #0
 8006900:	2010      	movs	r0, #16
 8006902:	f7ff ff89 	bl	8006818 <OLED_WR_Byte>
        for(n=0;n<130;n++)
 8006906:	2300      	movs	r3, #0
 8006908:	71bb      	strb	r3, [r7, #6]
 800690a:	e006      	b.n	800691a <OLED_Clear+0x3e>
            OLED_WR_Byte(0,OLED_DATA);
 800690c:	2101      	movs	r1, #1
 800690e:	2000      	movs	r0, #0
 8006910:	f7ff ff82 	bl	8006818 <OLED_WR_Byte>
        for(n=0;n<130;n++)
 8006914:	79bb      	ldrb	r3, [r7, #6]
 8006916:	3301      	adds	r3, #1
 8006918:	71bb      	strb	r3, [r7, #6]
 800691a:	79bb      	ldrb	r3, [r7, #6]
 800691c:	2b81      	cmp	r3, #129	; 0x81
 800691e:	d9f5      	bls.n	800690c <OLED_Clear+0x30>
    for(i=0;i<8;i++)
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	3301      	adds	r3, #1
 8006924:	71fb      	strb	r3, [r7, #7]
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	2b07      	cmp	r3, #7
 800692a:	d9dd      	bls.n	80068e8 <OLED_Clear+0xc>
    } //更新显示
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	71fb      	strb	r3, [r7, #7]
 800693e:	460b      	mov	r3, r1
 8006940:	71bb      	strb	r3, [r7, #6]
 8006942:	4613      	mov	r3, r2
 8006944:	717b      	strb	r3, [r7, #5]
    unsigned char c=0,i=0;
 8006946:	2300      	movs	r3, #0
 8006948:	73bb      	strb	r3, [r7, #14]
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
        c=chr-' ';//得到偏移后的值
 800694e:	797b      	ldrb	r3, [r7, #5]
 8006950:	3b20      	subs	r3, #32
 8006952:	73bb      	strb	r3, [r7, #14]
        if(x>Max_Column-1){x=0;y=y+2;}
 8006954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006958:	2b00      	cmp	r3, #0
 800695a:	da04      	bge.n	8006966 <OLED_ShowChar+0x32>
 800695c:	2300      	movs	r3, #0
 800695e:	71fb      	strb	r3, [r7, #7]
 8006960:	79bb      	ldrb	r3, [r7, #6]
 8006962:	3302      	adds	r3, #2
 8006964:	71bb      	strb	r3, [r7, #6]
        if(SIZE ==16)
        {
            OLED_Set_Pos(x,y);
 8006966:	79ba      	ldrb	r2, [r7, #6]
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ff6b 	bl	8006848 <OLED_Set_Pos>
            for(i=0;i<8;i++)
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
 8006976:	e00c      	b.n	8006992 <OLED_ShowChar+0x5e>
            OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	011a      	lsls	r2, r3, #4
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	4413      	add	r3, r2
 8006980:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <OLED_ShowChar+0xa4>)
 8006982:	5cd3      	ldrb	r3, [r2, r3]
 8006984:	2101      	movs	r1, #1
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff ff46 	bl	8006818 <OLED_WR_Byte>
            for(i=0;i<8;i++)
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	3301      	adds	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b07      	cmp	r3, #7
 8006996:	d9ef      	bls.n	8006978 <OLED_ShowChar+0x44>
            OLED_Set_Pos(x,y+1);
 8006998:	79bb      	ldrb	r3, [r7, #6]
 800699a:	3301      	adds	r3, #1
 800699c:	b2da      	uxtb	r2, r3
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	4611      	mov	r1, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff ff50 	bl	8006848 <OLED_Set_Pos>
            for(i=0;i<8;i++)
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	e00d      	b.n	80069ca <OLED_ShowChar+0x96>
            OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	011a      	lsls	r2, r3, #4
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	4413      	add	r3, r2
 80069b6:	3308      	adds	r3, #8
 80069b8:	4a07      	ldr	r2, [pc, #28]	; (80069d8 <OLED_ShowChar+0xa4>)
 80069ba:	5cd3      	ldrb	r3, [r2, r3]
 80069bc:	2101      	movs	r1, #1
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff ff2a 	bl	8006818 <OLED_WR_Byte>
            for(i=0;i<8;i++)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	3301      	adds	r3, #1
 80069c8:	73fb      	strb	r3, [r7, #15]
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b07      	cmp	r3, #7
 80069ce:	d9ee      	bls.n	80069ae <OLED_ShowChar+0x7a>
        } else {
            OLED_Set_Pos(x,y+1);
            for(i=0;i<6;i++)
            OLED_WR_Byte(F6x8[c][i],OLED_DATA);
        }
}
 80069d0:	bf00      	nop
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	080077b8 	.word	0x080077b8

080069dc <OLED_ShowString>:
    }
}

//显示一个字符号串
void OLED_ShowString(unsigned char x,unsigned char y,unsigned char *chr)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	603a      	str	r2, [r7, #0]
 80069e6:	71fb      	strb	r3, [r7, #7]
 80069e8:	460b      	mov	r3, r1
 80069ea:	71bb      	strb	r3, [r7, #6]
    unsigned char j=0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]
    while (chr[j]!='\0')
 80069f0:	e016      	b.n	8006a20 <OLED_ShowString+0x44>
    {
        OLED_ShowChar(x,y,chr[j]);
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	4413      	add	r3, r2
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	79b9      	ldrb	r1, [r7, #6]
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff ff98 	bl	8006934 <OLED_ShowChar>
        x+=8;
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	3308      	adds	r3, #8
 8006a08:	71fb      	strb	r3, [r7, #7]

        if(x>120)
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	2b78      	cmp	r3, #120	; 0x78
 8006a0e:	d904      	bls.n	8006a1a <OLED_ShowString+0x3e>
        {
            x=0;y+=2;
 8006a10:	2300      	movs	r3, #0
 8006a12:	71fb      	strb	r3, [r7, #7]
 8006a14:	79bb      	ldrb	r3, [r7, #6]
 8006a16:	3302      	adds	r3, #2
 8006a18:	71bb      	strb	r3, [r7, #6]
        }
            j++;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	73fb      	strb	r3, [r7, #15]
    while (chr[j]!='\0')
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e2      	bne.n	80069f2 <OLED_ShowString+0x16>
    }
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <OLED_ShowString_N>:

//显示字符串，指定长度避免数组越界
void OLED_ShowString_N(unsigned char x,unsigned char y,unsigned char *chr, int size)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60ba      	str	r2, [r7, #8]
 8006a3c:	607b      	str	r3, [r7, #4]
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
 8006a42:	460b      	mov	r3, r1
 8006a44:	73bb      	strb	r3, [r7, #14]
    int j=0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
    while (j < size)
 8006a4a:	e016      	b.n	8006a7a <OLED_ShowString_N+0x46>
    {
        OLED_ShowChar(x,y,chr[j]);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	7bb9      	ldrb	r1, [r7, #14]
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff ff6b 	bl	8006934 <OLED_ShowChar>
        x+=8;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	3308      	adds	r3, #8
 8006a62:	73fb      	strb	r3, [r7, #15]

        if(x>120)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b78      	cmp	r3, #120	; 0x78
 8006a68:	d904      	bls.n	8006a74 <OLED_ShowString_N+0x40>
        {
            x=0;y+=2;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	3302      	adds	r3, #2
 8006a72:	73bb      	strb	r3, [r7, #14]
        }
            j++;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	3301      	adds	r3, #1
 8006a78:	617b      	str	r3, [r7, #20]
    while (j < size)
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	dbe4      	blt.n	8006a4c <OLED_ShowString_N+0x18>
    }
}
 8006a82:	bf00      	nop
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <OLED_ShowCHinese>:

//显示汉字
void OLED_ShowCHinese(unsigned char x,unsigned char y,unsigned char no)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]
 8006a96:	460b      	mov	r3, r1
 8006a98:	71bb      	strb	r3, [r7, #6]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	717b      	strb	r3, [r7, #5]
    unsigned char t,adder=0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73bb      	strb	r3, [r7, #14]
    OLED_Set_Pos(x,y);
 8006aa2:	79ba      	ldrb	r2, [r7, #6]
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fecd 	bl	8006848 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
 8006ab2:	e011      	b.n	8006ad8 <OLED_ShowCHinese+0x4c>
    {
        OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 8006ab4:	797b      	ldrb	r3, [r7, #5]
 8006ab6:	005a      	lsls	r2, r3, #1
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	491b      	ldr	r1, [pc, #108]	; (8006b28 <OLED_ShowCHinese+0x9c>)
 8006abc:	0152      	lsls	r2, r2, #5
 8006abe:	440a      	add	r2, r1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fea6 	bl	8006818 <OLED_WR_Byte>
        adder+=1;
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b0f      	cmp	r3, #15
 8006adc:	d9ea      	bls.n	8006ab4 <OLED_ShowCHinese+0x28>
    }
        OLED_Set_Pos(x,y+1);
 8006ade:	79bb      	ldrb	r3, [r7, #6]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fead 	bl	8006848 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]
 8006af2:	e012      	b.n	8006b1a <OLED_ShowCHinese+0x8e>
    {
        OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 8006af4:	797b      	ldrb	r3, [r7, #5]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	490a      	ldr	r1, [pc, #40]	; (8006b28 <OLED_ShowCHinese+0x9c>)
 8006afe:	0152      	lsls	r2, r2, #5
 8006b00:	440a      	add	r2, r1
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2101      	movs	r1, #1
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fe85 	bl	8006818 <OLED_WR_Byte>
        adder+=1;
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	3301      	adds	r3, #1
 8006b12:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	3301      	adds	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b0f      	cmp	r3, #15
 8006b1e:	d9e9      	bls.n	8006af4 <OLED_ShowCHinese+0x68>
    }
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	08007da8 	.word	0x08007da8

08006b2c <OLED_Init>:
    }
}

//void Initial_M096128x64_ssd1306(void)
void OLED_Init(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
	Write_IIC_Command(0xAE);   //display off
 8006b30:	20ae      	movs	r0, #174	; 0xae
 8006b32:	f7ff fe29 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x20);	//Set Memory Addressing Mode	
 8006b36:	2020      	movs	r0, #32
 8006b38:	f7ff fe26 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006b3c:	2010      	movs	r0, #16
 8006b3e:	f7ff fe23 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 8006b42:	20b0      	movs	r0, #176	; 0xb0
 8006b44:	f7ff fe20 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xc8);	//Set COM Output Scan Direction
 8006b48:	20c8      	movs	r0, #200	; 0xc8
 8006b4a:	f7ff fe1d 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x00);//---set low column address
 8006b4e:	2000      	movs	r0, #0
 8006b50:	f7ff fe1a 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x10);//---set high column address
 8006b54:	2010      	movs	r0, #16
 8006b56:	f7ff fe17 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x40);//--set start line address
 8006b5a:	2040      	movs	r0, #64	; 0x40
 8006b5c:	f7ff fe14 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x81);//--set contrast control register
 8006b60:	2081      	movs	r0, #129	; 0x81
 8006b62:	f7ff fe11 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xdf);
 8006b66:	20df      	movs	r0, #223	; 0xdf
 8006b68:	f7ff fe0e 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xa1);//--set segment re-map 0 to 127
 8006b6c:	20a1      	movs	r0, #161	; 0xa1
 8006b6e:	f7ff fe0b 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xa6);//--set normal display
 8006b72:	20a6      	movs	r0, #166	; 0xa6
 8006b74:	f7ff fe08 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xa8);//--set multiplex ratio(1 to 64)
 8006b78:	20a8      	movs	r0, #168	; 0xa8
 8006b7a:	f7ff fe05 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x3F);//
 8006b7e:	203f      	movs	r0, #63	; 0x3f
 8006b80:	f7ff fe02 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xa4);//0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006b84:	20a4      	movs	r0, #164	; 0xa4
 8006b86:	f7ff fdff 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xd3);//-set display offset
 8006b8a:	20d3      	movs	r0, #211	; 0xd3
 8006b8c:	f7ff fdfc 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x00);//-not offset
 8006b90:	2000      	movs	r0, #0
 8006b92:	f7ff fdf9 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xd5);//--set display clock divide ratio/oscillator frequency
 8006b96:	20d5      	movs	r0, #213	; 0xd5
 8006b98:	f7ff fdf6 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xf0);//--set divide ratio
 8006b9c:	20f0      	movs	r0, #240	; 0xf0
 8006b9e:	f7ff fdf3 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xd9);//--set pre-charge period
 8006ba2:	20d9      	movs	r0, #217	; 0xd9
 8006ba4:	f7ff fdf0 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x22); //
 8006ba8:	2022      	movs	r0, #34	; 0x22
 8006baa:	f7ff fded 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xda);//--set com pins hardware configuration
 8006bae:	20da      	movs	r0, #218	; 0xda
 8006bb0:	f7ff fdea 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x12);
 8006bb4:	2012      	movs	r0, #18
 8006bb6:	f7ff fde7 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xdb);//--set vcomh
 8006bba:	20db      	movs	r0, #219	; 0xdb
 8006bbc:	f7ff fde4 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x20);//0x20,0.77xVcc
 8006bc0:	2020      	movs	r0, #32
 8006bc2:	f7ff fde1 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x8d);//--set DC-DC enable
 8006bc6:	208d      	movs	r0, #141	; 0x8d
 8006bc8:	f7ff fdde 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0x14);//
 8006bcc:	2014      	movs	r0, #20
 8006bce:	f7ff fddb 	bl	8006788 <Write_IIC_Command>
	Write_IIC_Command(0xaf);//--turn on oled panel 
 8006bd2:	20af      	movs	r0, #175	; 0xaf
 8006bd4:	f7ff fdd8 	bl	8006788 <Write_IIC_Command>

    OLED_Clear();
 8006bd8:	f7ff fe80 	bl	80068dc <OLED_Clear>
    OLED_Set_Pos(0x02,0);
 8006bdc:	2100      	movs	r1, #0
 8006bde:	2002      	movs	r0, #2
 8006be0:	f7ff fe32 	bl	8006848 <OLED_Set_Pos>
}
 8006be4:	bf00      	nop
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <oled_display_memu>:

#include "stm32f4xx_hal.h"

/*******************************Main*******************************/
void oled_display_memu(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
	unsigned char Humidity_Unit[5] = "%RH";
 8006bee:	4b2b      	ldr	r3, [pc, #172]	; (8006c9c <oled_display_memu+0xb4>)
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	733b      	strb	r3, [r7, #12]
	unsigned char Light_Unit[5] = "Lx";
 8006bf6:	f647 034c 	movw	r3, #30796	; 0x784c
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	713b      	strb	r3, [r7, #4]
    OLED_Init();
 8006c00:	f7ff ff94 	bl	8006b2c <OLED_Init>
    HAL_Delay(10);
 8006c04:	200a      	movs	r0, #10
 8006c06:	f7f9 fcad 	bl	8000564 <HAL_Delay>

    OLED_ShowCHinese(14,0,0);//温
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	200e      	movs	r0, #14
 8006c10:	f7ff ff3c 	bl	8006a8c <OLED_ShowCHinese>
    OLED_ShowCHinese(42,0,1);//湿
 8006c14:	2201      	movs	r2, #1
 8006c16:	2100      	movs	r1, #0
 8006c18:	202a      	movs	r0, #42	; 0x2a
 8006c1a:	f7ff ff37 	bl	8006a8c <OLED_ShowCHinese>
    OLED_ShowCHinese(72,0,2);//度
 8006c1e:	2202      	movs	r2, #2
 8006c20:	2100      	movs	r1, #0
 8006c22:	2048      	movs	r0, #72	; 0x48
 8006c24:	f7ff ff32 	bl	8006a8c <OLED_ShowCHinese>
    OLED_ShowCHinese(100,0,3);//计
 8006c28:	2203      	movs	r2, #3
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	2064      	movs	r0, #100	; 0x64
 8006c2e:	f7ff ff2d 	bl	8006a8c <OLED_ShowCHinese>

    OLED_ShowCHinese(2,2,0);//温
 8006c32:	2200      	movs	r2, #0
 8006c34:	2102      	movs	r1, #2
 8006c36:	2002      	movs	r0, #2
 8006c38:	f7ff ff28 	bl	8006a8c <OLED_ShowCHinese>
    OLED_ShowCHinese(22,2,2);//度
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	2102      	movs	r1, #2
 8006c40:	2016      	movs	r0, #22
 8006c42:	f7ff ff23 	bl	8006a8c <OLED_ShowCHinese>
//	OLED_ShowString(56,2,":");
//	OLED_ShowString(48,2,"26.50");
    OLED_ShowCHinese(100,2,4);//℃
 8006c46:	2204      	movs	r2, #4
 8006c48:	2102      	movs	r1, #2
 8006c4a:	2064      	movs	r0, #100	; 0x64
 8006c4c:	f7ff ff1e 	bl	8006a8c <OLED_ShowCHinese>

    OLED_ShowCHinese(2,4,1);//湿
 8006c50:	2201      	movs	r2, #1
 8006c52:	2104      	movs	r1, #4
 8006c54:	2002      	movs	r0, #2
 8006c56:	f7ff ff19 	bl	8006a8c <OLED_ShowCHinese>
    OLED_ShowCHinese(22,4,2);//度
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	2104      	movs	r1, #4
 8006c5e:	2016      	movs	r0, #22
 8006c60:	f7ff ff14 	bl	8006a8c <OLED_ShowCHinese>
//	OLED_ShowString(56,4,":");
//	OLED_ShowString(48,4,"78.23");
    OLED_ShowString(98,4,Humidity_Unit);
 8006c64:	f107 0308 	add.w	r3, r7, #8
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2104      	movs	r1, #4
 8006c6c:	2062      	movs	r0, #98	; 0x62
 8006c6e:	f7ff feb5 	bl	80069dc <OLED_ShowString>

    OLED_ShowCHinese(2,6,5);//湿
 8006c72:	2205      	movs	r2, #5
 8006c74:	2106      	movs	r1, #6
 8006c76:	2002      	movs	r0, #2
 8006c78:	f7ff ff08 	bl	8006a8c <OLED_ShowCHinese>
    OLED_ShowCHinese(22,6,6);//度
 8006c7c:	2206      	movs	r2, #6
 8006c7e:	2106      	movs	r1, #6
 8006c80:	2016      	movs	r0, #22
 8006c82:	f7ff ff03 	bl	8006a8c <OLED_ShowCHinese>
//	OLED_ShowString(56,5,":");
//	OLED_ShowString(48,5,"78.23");
    OLED_ShowString(98,6,Light_Unit);
 8006c86:	463b      	mov	r3, r7
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2106      	movs	r1, #6
 8006c8c:	2062      	movs	r0, #98	; 0x62
 8006c8e:	f7ff fea5 	bl	80069dc <OLED_ShowString>
//    delay_ms(50);
////        OLED_DrawBMP(0,0,128,8,BMP1);  //ͼƬ��ʾ(ͼƬ��ʾ���ã����ɵ��ֱ�ϴ󣬻�ռ�ý϶�ռ䣬FLASH�ռ�8K��������)
//    delay_ms(50);
//    OLED_DrawBMP(0,0,128,8,gImage_128x64);
//    delay_ms(50);
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	00485225 	.word	0x00485225

08006ca0 <SHT3X_CalcCrc>:
//  return error;
//}

//-----------------------------------------------------------------------------
static u8t SHT3X_CalcCrc(u8t data[], u8t nbrOfBytes)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  u8t bit;        // bit mask
  u8t crc = 0xFF; // calculated checksum
 8006cac:	23ff      	movs	r3, #255	; 0xff
 8006cae:	73bb      	strb	r3, [r7, #14]
  u8t byteCtr;    // byte counter
  
  // calculates 8-Bit checksum with given polynomial
  for(byteCtr = 0; byteCtr < nbrOfBytes; byteCtr++)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	737b      	strb	r3, [r7, #13]
 8006cb4:	e021      	b.n	8006cfa <SHT3X_CalcCrc+0x5a>
  {
    crc ^= (data[byteCtr]);
 8006cb6:	7b7b      	ldrb	r3, [r7, #13]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	4053      	eors	r3, r2
 8006cc2:	73bb      	strb	r3, [r7, #14]
    for(bit = 8; bit > 0; --bit)
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	73fb      	strb	r3, [r7, #15]
 8006cc8:	e011      	b.n	8006cee <SHT3X_CalcCrc+0x4e>
    {
      if(crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 8006cca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	da07      	bge.n	8006ce2 <SHT3X_CalcCrc+0x42>
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	b25b      	sxtb	r3, r3
 8006cd8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8006cdc:	b25b      	sxtb	r3, r3
 8006cde:	73bb      	strb	r3, [r7, #14]
 8006ce0:	e002      	b.n	8006ce8 <SHT3X_CalcCrc+0x48>
      else           crc = (crc << 1);
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	73bb      	strb	r3, [r7, #14]
    for(bit = 8; bit > 0; --bit)
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ea      	bne.n	8006cca <SHT3X_CalcCrc+0x2a>
  for(byteCtr = 0; byteCtr < nbrOfBytes; byteCtr++)
 8006cf4:	7b7b      	ldrb	r3, [r7, #13]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	737b      	strb	r3, [r7, #13]
 8006cfa:	7b7a      	ldrb	r2, [r7, #13]
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d3d9      	bcc.n	8006cb6 <SHT3X_CalcCrc+0x16>
    }
  }
  
  return crc;
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <SHT3X_CheckCrc>:

//-----------------------------------------------------------------------------
static etError SHT3X_CheckCrc(u8t data[], u8t nbrOfBytes, u8t checksum)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	70bb      	strb	r3, [r7, #2]
  u8t crc;     // calculated checksum
  
  // calculates 8-Bit checksum
  crc = SHT3X_CalcCrc(data, nbrOfBytes);
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ffbb 	bl	8006ca0 <SHT3X_CalcCrc>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73fb      	strb	r3, [r7, #15]
  
  // verify checksum
  if(crc != checksum)
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	78bb      	ldrb	r3, [r7, #2]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d001      	beq.n	8006d3a <SHT3X_CheckCrc+0x2a>
	  return CHECKSUM_ERROR;
 8006d36:	2302      	movs	r3, #2
 8006d38:	e000      	b.n	8006d3c <SHT3X_CheckCrc+0x2c>
  else
	  return NO_ERROR;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <SHT3X_CalcTemperature>:

//-----------------------------------------------------------------------------
static ft SHT3X_CalcTemperature(u16t rawValue)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	80fb      	strh	r3, [r7, #6]
  // calculate temperature [�C]
  // T = -45 + 175 * rawValue / (2^16-1)
  return 175.0f * (ft)rawValue / 65535.0f - 45.0f;
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d58:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8006d80 <SHT3X_CalcTemperature+0x3c>
 8006d5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d60:	eddf 6a08 	vldr	s13, [pc, #32]	; 8006d84 <SHT3X_CalcTemperature+0x40>
 8006d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d68:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006d88 <SHT3X_CalcTemperature+0x44>
 8006d6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8006d70:	eeb0 0a67 	vmov.f32	s0, s15
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	432f0000 	.word	0x432f0000
 8006d84:	477fff00 	.word	0x477fff00
 8006d88:	42340000 	.word	0x42340000

08006d8c <SHT3X_CalcHumidity>:

//-----------------------------------------------------------------------------
static ft SHT3X_CalcHumidity(u16t rawValue)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	80fb      	strh	r3, [r7, #6]
  // calculate relative humidity [%RH]
  // RH = rawValue / (2^16-1) * 100
  return 100.0f * (ft)rawValue / 65535.0f;
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006dc4 <SHT3X_CalcHumidity+0x38>
 8006da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006da8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006dc8 <SHT3X_CalcHumidity+0x3c>
 8006dac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006db0:	eef0 7a66 	vmov.f32	s15, s13
}
 8006db4:	eeb0 0a67 	vmov.f32	s0, s15
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	42c80000 	.word	0x42c80000
 8006dc8:	477fff00 	.word	0x477fff00

08006dcc <SHT3X_Send_Command>:
//  // rawRH = humidity / 100 * (2^16-1)
//  return humidity / 100.0f * 65535.0f;
//}

static u8t SHT3X_Send_Command(u16t command)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	80fb      	strh	r3, [r7, #6]
	cmd[0] = (u8t)(command >> 8);
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	0a1b      	lsrs	r3, r3, #8
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <SHT3X_Send_Command+0x38>)
 8006de0:	701a      	strb	r2, [r3, #0]
    cmd[1] = (u8t)(command & 0xFF);
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <SHT3X_Send_Command+0x38>)
 8006de8:	705a      	strb	r2, [r3, #1]

    HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, cmd, 2, 200);
 8006dea:	23c8      	movs	r3, #200	; 0xc8
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	2302      	movs	r3, #2
 8006df0:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <SHT3X_Send_Command+0x38>)
 8006df2:	2189      	movs	r1, #137	; 0x89
 8006df4:	4804      	ldr	r0, [pc, #16]	; (8006e08 <SHT3X_Send_Command+0x3c>)
 8006df6:	f7f9 ff7d 	bl	8000cf4 <HAL_I2C_Master_Transmit>

    return 0;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20013954 	.word	0x20013954
 8006e08:	200137e0 	.word	0x200137e0

08006e0c <data_synthesis>:
u16t RawHumidity;
ft Temperature;
ft Humidity;

void data_synthesis(u8t data[])
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
    RawTemperature = ((data[0] << 8) | data[1]);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	b21a      	sxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	b21b      	sxth	r3, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	b21b      	sxth	r3, r3
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <data_synthesis+0x4c>)
 8006e2c:	801a      	strh	r2, [r3, #0]
    RawHumidity = ((data[3] << 8) | data[4]);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3303      	adds	r3, #3
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	b21a      	sxth	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b21b      	sxth	r3, r3
 8006e40:	4313      	orrs	r3, r2
 8006e42:	b21b      	sxth	r3, r3
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <data_synthesis+0x50>)
 8006e48:	801a      	strh	r2, [r3, #0]
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	2001394c 	.word	0x2001394c
 8006e5c:	20013930 	.word	0x20013930

08006e60 <sht31_display>:

const unsigned char tem_suffix[] = " C";
const unsigned char hum_suffix[] = " %RH";

unsigned char sht31_display(SHT3x_Sensor_Param *ptr)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	; 0x28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
    float Tem = ptr->Temperature;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
    float hum = ptr->Humidity;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	623b      	str	r3, [r7, #32]

    int tmp;
    unsigned char tem_unit[5], hum_unit[5];

    tmp = (int)(Tem * 100);
 8006e74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006e78:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8007050 <sht31_display+0x1f0>
 8006e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e84:	ee17 3a90 	vmov	r3, s15
 8006e88:	61fb      	str	r3, [r7, #28]

    tem_unit[4] = tmp / 1 % 10 + '0';
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	4b71      	ldr	r3, [pc, #452]	; (8007054 <sht31_display+0x1f4>)
 8006e8e:	fb83 1302 	smull	r1, r3, r3, r2
 8006e92:	1099      	asrs	r1, r3, #2
 8006e94:	17d3      	asrs	r3, r2, #31
 8006e96:	1ac9      	subs	r1, r1, r3
 8006e98:	460b      	mov	r3, r1
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	1ad1      	subs	r1, r2, r3
 8006ea2:	b2cb      	uxtb	r3, r1
 8006ea4:	3330      	adds	r3, #48	; 0x30
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	763b      	strb	r3, [r7, #24]
    tem_unit[3] = tmp / 10 % 10 + '0';
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4a69      	ldr	r2, [pc, #420]	; (8007054 <sht31_display+0x1f4>)
 8006eae:	fb82 1203 	smull	r1, r2, r2, r3
 8006eb2:	1092      	asrs	r2, r2, #2
 8006eb4:	17db      	asrs	r3, r3, #31
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	4b66      	ldr	r3, [pc, #408]	; (8007054 <sht31_display+0x1f4>)
 8006eba:	fb83 1302 	smull	r1, r3, r3, r2
 8006ebe:	1099      	asrs	r1, r3, #2
 8006ec0:	17d3      	asrs	r3, r2, #31
 8006ec2:	1ac9      	subs	r1, r1, r3
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	1ad1      	subs	r1, r2, r3
 8006ece:	b2cb      	uxtb	r3, r1
 8006ed0:	3330      	adds	r3, #48	; 0x30
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	75fb      	strb	r3, [r7, #23]
    tem_unit[2] = '.';
 8006ed6:	232e      	movs	r3, #46	; 0x2e
 8006ed8:	75bb      	strb	r3, [r7, #22]
    tem_unit[1] = tmp / 100 % 10 + '0';
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	4a5e      	ldr	r2, [pc, #376]	; (8007058 <sht31_display+0x1f8>)
 8006ede:	fb82 1203 	smull	r1, r2, r2, r3
 8006ee2:	1152      	asrs	r2, r2, #5
 8006ee4:	17db      	asrs	r3, r3, #31
 8006ee6:	1ad2      	subs	r2, r2, r3
 8006ee8:	4b5a      	ldr	r3, [pc, #360]	; (8007054 <sht31_display+0x1f4>)
 8006eea:	fb83 1302 	smull	r1, r3, r3, r2
 8006eee:	1099      	asrs	r1, r3, #2
 8006ef0:	17d3      	asrs	r3, r2, #31
 8006ef2:	1ac9      	subs	r1, r1, r3
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	1ad1      	subs	r1, r2, r3
 8006efe:	b2cb      	uxtb	r3, r1
 8006f00:	3330      	adds	r3, #48	; 0x30
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	757b      	strb	r3, [r7, #21]
    tem_unit[0] = tmp / 1000 % 10 + '0';
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4a54      	ldr	r2, [pc, #336]	; (800705c <sht31_display+0x1fc>)
 8006f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8006f0e:	1192      	asrs	r2, r2, #6
 8006f10:	17db      	asrs	r3, r3, #31
 8006f12:	1ad2      	subs	r2, r2, r3
 8006f14:	4b4f      	ldr	r3, [pc, #316]	; (8007054 <sht31_display+0x1f4>)
 8006f16:	fb83 1302 	smull	r1, r3, r3, r2
 8006f1a:	1099      	asrs	r1, r3, #2
 8006f1c:	17d3      	asrs	r3, r2, #31
 8006f1e:	1ac9      	subs	r1, r1, r3
 8006f20:	460b      	mov	r3, r1
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	1ad1      	subs	r1, r2, r3
 8006f2a:	b2cb      	uxtb	r3, r1
 8006f2c:	3330      	adds	r3, #48	; 0x30
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	753b      	strb	r3, [r7, #20]

    tmp = (int)(hum * 100);
 8006f32:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f36:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007050 <sht31_display+0x1f0>
 8006f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f42:	ee17 3a90 	vmov	r3, s15
 8006f46:	61fb      	str	r3, [r7, #28]

    hum_unit[4] = tmp / 1 % 10 + '0';
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	4b42      	ldr	r3, [pc, #264]	; (8007054 <sht31_display+0x1f4>)
 8006f4c:	fb83 1302 	smull	r1, r3, r3, r2
 8006f50:	1099      	asrs	r1, r3, #2
 8006f52:	17d3      	asrs	r3, r2, #31
 8006f54:	1ac9      	subs	r1, r1, r3
 8006f56:	460b      	mov	r3, r1
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	1ad1      	subs	r1, r2, r3
 8006f60:	b2cb      	uxtb	r3, r1
 8006f62:	3330      	adds	r3, #48	; 0x30
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	743b      	strb	r3, [r7, #16]
    hum_unit[3] = tmp / 10 % 10 + '0';
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4a3a      	ldr	r2, [pc, #232]	; (8007054 <sht31_display+0x1f4>)
 8006f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8006f70:	1092      	asrs	r2, r2, #2
 8006f72:	17db      	asrs	r3, r3, #31
 8006f74:	1ad2      	subs	r2, r2, r3
 8006f76:	4b37      	ldr	r3, [pc, #220]	; (8007054 <sht31_display+0x1f4>)
 8006f78:	fb83 1302 	smull	r1, r3, r3, r2
 8006f7c:	1099      	asrs	r1, r3, #2
 8006f7e:	17d3      	asrs	r3, r2, #31
 8006f80:	1ac9      	subs	r1, r1, r3
 8006f82:	460b      	mov	r3, r1
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	1ad1      	subs	r1, r2, r3
 8006f8c:	b2cb      	uxtb	r3, r1
 8006f8e:	3330      	adds	r3, #48	; 0x30
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	73fb      	strb	r3, [r7, #15]
    hum_unit[2] = '.';
 8006f94:	232e      	movs	r3, #46	; 0x2e
 8006f96:	73bb      	strb	r3, [r7, #14]
    hum_unit[1] = tmp / 100 % 10 + '0';
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	4a2f      	ldr	r2, [pc, #188]	; (8007058 <sht31_display+0x1f8>)
 8006f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8006fa0:	1152      	asrs	r2, r2, #5
 8006fa2:	17db      	asrs	r3, r3, #31
 8006fa4:	1ad2      	subs	r2, r2, r3
 8006fa6:	4b2b      	ldr	r3, [pc, #172]	; (8007054 <sht31_display+0x1f4>)
 8006fa8:	fb83 1302 	smull	r1, r3, r3, r2
 8006fac:	1099      	asrs	r1, r3, #2
 8006fae:	17d3      	asrs	r3, r2, #31
 8006fb0:	1ac9      	subs	r1, r1, r3
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	1ad1      	subs	r1, r2, r3
 8006fbc:	b2cb      	uxtb	r3, r1
 8006fbe:	3330      	adds	r3, #48	; 0x30
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	737b      	strb	r3, [r7, #13]
    hum_unit[0] = tmp / 1000 % 10 + '0';
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4a25      	ldr	r2, [pc, #148]	; (800705c <sht31_display+0x1fc>)
 8006fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8006fcc:	1192      	asrs	r2, r2, #6
 8006fce:	17db      	asrs	r3, r3, #31
 8006fd0:	1ad2      	subs	r2, r2, r3
 8006fd2:	4b20      	ldr	r3, [pc, #128]	; (8007054 <sht31_display+0x1f4>)
 8006fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8006fd8:	1099      	asrs	r1, r3, #2
 8006fda:	17d3      	asrs	r3, r2, #31
 8006fdc:	1ac9      	subs	r1, r1, r3
 8006fde:	460b      	mov	r3, r1
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	1ad1      	subs	r1, r2, r3
 8006fe8:	b2cb      	uxtb	r3, r1
 8006fea:	3330      	adds	r3, #48	; 0x30
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	733b      	strb	r3, [r7, #12]


    uart_multibyte_send((unsigned char *)tem_title, sizeof(tem_title));
 8006ff0:	2115      	movs	r1, #21
 8006ff2:	481b      	ldr	r0, [pc, #108]	; (8007060 <sht31_display+0x200>)
 8006ff4:	f000 fb22 	bl	800763c <uart_multibyte_send>
    uart_multibyte_send((unsigned char *)tem_unit, sizeof(tem_unit));
 8006ff8:	f107 0314 	add.w	r3, r7, #20
 8006ffc:	2105      	movs	r1, #5
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fb1c 	bl	800763c <uart_multibyte_send>
    uart_multibyte_send((unsigned char *)tem_suffix, sizeof(tem_suffix));
 8007004:	2103      	movs	r1, #3
 8007006:	4817      	ldr	r0, [pc, #92]	; (8007064 <sht31_display+0x204>)
 8007008:	f000 fb18 	bl	800763c <uart_multibyte_send>

    OLED_ShowString_N(50,2, tem_unit, sizeof(tem_unit));
 800700c:	f107 0214 	add.w	r2, r7, #20
 8007010:	2305      	movs	r3, #5
 8007012:	2102      	movs	r1, #2
 8007014:	2032      	movs	r0, #50	; 0x32
 8007016:	f7ff fd0d 	bl	8006a34 <OLED_ShowString_N>

    uart_multibyte_send((unsigned char *)hum_title, sizeof(hum_title));
 800701a:	2112      	movs	r1, #18
 800701c:	4812      	ldr	r0, [pc, #72]	; (8007068 <sht31_display+0x208>)
 800701e:	f000 fb0d 	bl	800763c <uart_multibyte_send>
    uart_multibyte_send((unsigned char *)hum_unit, sizeof(hum_unit));
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	2105      	movs	r1, #5
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fb07 	bl	800763c <uart_multibyte_send>
    uart_multibyte_send((unsigned char *)hum_suffix, sizeof(hum_suffix));
 800702e:	2105      	movs	r1, #5
 8007030:	480e      	ldr	r0, [pc, #56]	; (800706c <sht31_display+0x20c>)
 8007032:	f000 fb03 	bl	800763c <uart_multibyte_send>

    OLED_ShowString_N(50,4, hum_unit, sizeof(hum_unit));
 8007036:	f107 020c 	add.w	r2, r7, #12
 800703a:	2305      	movs	r3, #5
 800703c:	2104      	movs	r1, #4
 800703e:	2032      	movs	r0, #50	; 0x32
 8007040:	f7ff fcf8 	bl	8006a34 <OLED_ShowString_N>

    return 0;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3728      	adds	r7, #40	; 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	42c80000 	.word	0x42c80000
 8007054:	66666667 	.word	0x66666667
 8007058:	51eb851f 	.word	0x51eb851f
 800705c:	10624dd3 	.word	0x10624dd3
 8007060:	08007f68 	.word	0x08007f68
 8007064:	08007f94 	.word	0x08007f94
 8007068:	08007f80 	.word	0x08007f80
 800706c:	08007f98 	.word	0x08007f98

08007070 <sht31_measurement>:

SHT3x_Sensor_Param sht3x_param;
#define sht3x   1

void sht31_measurement(SHT3x_Sensor_Param *param)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af02      	add	r7, sp, #8
 8007076:	6078      	str	r0, [r7, #4]
	SHT3x_Sensor_Param *sht3x_param = param;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60fb      	str	r3, [r7, #12]

    // wait 50ms after power on
    HAL_Delay(50);
 800707c:	2032      	movs	r0, #50	; 0x32
 800707e:	f7f9 fa71 	bl	8000564 <HAL_Delay>

    SHT3X_Send_Command(CMD_MEAS_CLOCKSTR_H);
 8007082:	f642 4006 	movw	r0, #11270	; 0x2c06
 8007086:	f7ff fea1 	bl	8006dcc <SHT3X_Send_Command>

    HAL_Delay(50);
 800708a:	2032      	movs	r0, #50	; 0x32
 800708c:	f7f9 fa6a 	bl	8000564 <HAL_Delay>


    HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDR, raw_value, 6, 200);
 8007090:	23c8      	movs	r3, #200	; 0xc8
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	2306      	movs	r3, #6
 8007096:	4a28      	ldr	r2, [pc, #160]	; (8007138 <sht31_measurement+0xc8>)
 8007098:	2189      	movs	r1, #137	; 0x89
 800709a:	4828      	ldr	r0, [pc, #160]	; (800713c <sht31_measurement+0xcc>)
 800709c:	f7f9 ff28 	bl	8000ef0 <HAL_I2C_Master_Receive>

    if (CHECKSUM_ERROR == SHT3X_CheckCrc(raw_value, 2, raw_value[2])) {
 80070a0:	4b25      	ldr	r3, [pc, #148]	; (8007138 <sht31_measurement+0xc8>)
 80070a2:	789b      	ldrb	r3, [r3, #2]
 80070a4:	461a      	mov	r2, r3
 80070a6:	2102      	movs	r1, #2
 80070a8:	4823      	ldr	r0, [pc, #140]	; (8007138 <sht31_measurement+0xc8>)
 80070aa:	f7ff fe31 	bl	8006d10 <SHT3X_CheckCrc>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d105      	bne.n	80070c0 <sht31_measurement+0x50>
        //Red led on
    	HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 80070b4:	2201      	movs	r2, #1
 80070b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070ba:	4821      	ldr	r0, [pc, #132]	; (8007140 <sht31_measurement+0xd0>)
 80070bc:	f7f9 fcd8 	bl	8000a70 <HAL_GPIO_WritePin>
    }

    if (CHECKSUM_ERROR == SHT3X_CheckCrc(&raw_value[3], 2, raw_value[5])) {
 80070c0:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <sht31_measurement+0xc8>)
 80070c2:	795b      	ldrb	r3, [r3, #5]
 80070c4:	461a      	mov	r2, r3
 80070c6:	2102      	movs	r1, #2
 80070c8:	481e      	ldr	r0, [pc, #120]	; (8007144 <sht31_measurement+0xd4>)
 80070ca:	f7ff fe21 	bl	8006d10 <SHT3X_CheckCrc>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d105      	bne.n	80070e0 <sht31_measurement+0x70>
        //Red led on
    	HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 80070d4:	2201      	movs	r2, #1
 80070d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070da:	4819      	ldr	r0, [pc, #100]	; (8007140 <sht31_measurement+0xd0>)
 80070dc:	f7f9 fcc8 	bl	8000a70 <HAL_GPIO_WritePin>
    }

    data_synthesis(raw_value);
 80070e0:	4815      	ldr	r0, [pc, #84]	; (8007138 <sht31_measurement+0xc8>)
 80070e2:	f7ff fe93 	bl	8006e0c <data_synthesis>

    Temperature = SHT3X_CalcTemperature(RawTemperature);
 80070e6:	4b18      	ldr	r3, [pc, #96]	; (8007148 <sht31_measurement+0xd8>)
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fe2a 	bl	8006d44 <SHT3X_CalcTemperature>
 80070f0:	eef0 7a40 	vmov.f32	s15, s0
 80070f4:	4b15      	ldr	r3, [pc, #84]	; (800714c <sht31_measurement+0xdc>)
 80070f6:	edc3 7a00 	vstr	s15, [r3]
    Humidity = SHT3X_CalcHumidity(RawHumidity);
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <sht31_measurement+0xe0>)
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fe44 	bl	8006d8c <SHT3X_CalcHumidity>
 8007104:	eef0 7a40 	vmov.f32	s15, s0
 8007108:	4b12      	ldr	r3, [pc, #72]	; (8007154 <sht31_measurement+0xe4>)
 800710a:	edc3 7a00 	vstr	s15, [r3]

    sht3x_param->RawTemperature = RawTemperature;
 800710e:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <sht31_measurement+0xd8>)
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	805a      	strh	r2, [r3, #2]
    sht3x_param->RawHumidity = RawHumidity;
 8007116:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <sht31_measurement+0xe0>)
 8007118:	881a      	ldrh	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	809a      	strh	r2, [r3, #4]
    sht3x_param->Temperature = Temperature;
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <sht31_measurement+0xdc>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	609a      	str	r2, [r3, #8]
    sht3x_param->Humidity = Humidity;
 8007126:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <sht31_measurement+0xe4>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	60da      	str	r2, [r3, #12]

}
 800712e:	bf00      	nop
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20013934 	.word	0x20013934
 800713c:	200137e0 	.word	0x200137e0
 8007140:	40020400 	.word	0x40020400
 8007144:	20013937 	.word	0x20013937
 8007148:	2001394c 	.word	0x2001394c
 800714c:	2001392c 	.word	0x2001392c
 8007150:	20013930 	.word	0x20013930
 8007154:	20013950 	.word	0x20013950

08007158 <sht31_read>:

    OLED_Display_On();

}
int sht31_read(SHT3x_Sensor_Param *ptr)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	int statu = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]

	sht31_measurement(ptr);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff ff83 	bl	8007070 <sht31_measurement>

	return statu;
 800716a:	68fb      	ldr	r3, [r7, #12]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800717a:	2300      	movs	r3, #0
 800717c:	607b      	str	r3, [r7, #4]
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <HAL_MspInit+0x54>)
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	4a11      	ldr	r2, [pc, #68]	; (80071c8 <HAL_MspInit+0x54>)
 8007184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007188:	6453      	str	r3, [r2, #68]	; 0x44
 800718a:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <HAL_MspInit+0x54>)
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007192:	607b      	str	r3, [r7, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007196:	2300      	movs	r3, #0
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <HAL_MspInit+0x54>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <HAL_MspInit+0x54>)
 80071a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a4:	6413      	str	r3, [r2, #64]	; 0x40
 80071a6:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <HAL_MspInit+0x54>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80071b2:	2200      	movs	r2, #0
 80071b4:	210f      	movs	r1, #15
 80071b6:	f06f 0001 	mvn.w	r0, #1
 80071ba:	f7f9 faad 	bl	8000718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40023800 	.word	0x40023800

080071cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08e      	sub	sp, #56	; 0x38
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a63      	ldr	r2, [pc, #396]	; (8007378 <HAL_I2C_MspInit+0x1ac>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d12c      	bne.n	8007248 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071ee:	2300      	movs	r3, #0
 80071f0:	623b      	str	r3, [r7, #32]
 80071f2:	4b62      	ldr	r3, [pc, #392]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	4a61      	ldr	r2, [pc, #388]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80071f8:	f043 0302 	orr.w	r3, r3, #2
 80071fc:	6313      	str	r3, [r2, #48]	; 0x30
 80071fe:	4b5f      	ldr	r3, [pc, #380]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	623b      	str	r3, [r7, #32]
 8007208:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800720a:	23c0      	movs	r3, #192	; 0xc0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800720e:	2312      	movs	r3, #18
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007212:	2301      	movs	r3, #1
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007216:	2303      	movs	r3, #3
 8007218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800721a:	2304      	movs	r3, #4
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800721e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007222:	4619      	mov	r1, r3
 8007224:	4856      	ldr	r0, [pc, #344]	; (8007380 <HAL_I2C_MspInit+0x1b4>)
 8007226:	f7f9 faa1 	bl	800076c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	4b53      	ldr	r3, [pc, #332]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	4a52      	ldr	r2, [pc, #328]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 8007234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007238:	6413      	str	r3, [r2, #64]	; 0x40
 800723a:	4b50      	ldr	r3, [pc, #320]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007246:	e092      	b.n	800736e <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a4d      	ldr	r2, [pc, #308]	; (8007384 <HAL_I2C_MspInit+0x1b8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d13d      	bne.n	80072ce <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007252:	2300      	movs	r3, #0
 8007254:	61bb      	str	r3, [r7, #24]
 8007256:	4b49      	ldr	r3, [pc, #292]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	4a48      	ldr	r2, [pc, #288]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	6313      	str	r3, [r2, #48]	; 0x30
 8007262:	4b46      	ldr	r3, [pc, #280]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800726e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007274:	2312      	movs	r3, #18
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007278:	2301      	movs	r3, #1
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800727c:	2303      	movs	r3, #3
 800727e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007280:	2304      	movs	r3, #4
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007288:	4619      	mov	r1, r3
 800728a:	483d      	ldr	r0, [pc, #244]	; (8007380 <HAL_I2C_MspInit+0x1b4>)
 800728c:	f7f9 fa6e 	bl	800076c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007290:	2308      	movs	r3, #8
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007294:	2312      	movs	r3, #18
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007298:	2301      	movs	r3, #1
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800729c:	2303      	movs	r3, #3
 800729e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80072a0:	2309      	movs	r3, #9
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072a8:	4619      	mov	r1, r3
 80072aa:	4835      	ldr	r0, [pc, #212]	; (8007380 <HAL_I2C_MspInit+0x1b4>)
 80072ac:	f7f9 fa5e 	bl	800076c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80072b0:	2300      	movs	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	4b31      	ldr	r3, [pc, #196]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	4a30      	ldr	r2, [pc, #192]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80072ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072be:	6413      	str	r3, [r2, #64]	; 0x40
 80072c0:	4b2e      	ldr	r3, [pc, #184]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	697b      	ldr	r3, [r7, #20]
}
 80072cc:	e04f      	b.n	800736e <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <HAL_I2C_MspInit+0x1bc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d14a      	bne.n	800736e <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072d8:	2300      	movs	r3, #0
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	4b27      	ldr	r3, [pc, #156]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80072de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e0:	4a26      	ldr	r2, [pc, #152]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	6313      	str	r3, [r2, #48]	; 0x30
 80072e8:	4b24      	ldr	r3, [pc, #144]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	4b20      	ldr	r3, [pc, #128]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	4a1f      	ldr	r2, [pc, #124]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 80072fe:	f043 0302 	orr.w	r3, r3, #2
 8007302:	6313      	str	r3, [r2, #48]	; 0x30
 8007304:	4b1d      	ldr	r3, [pc, #116]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007316:	2312      	movs	r3, #18
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800731a:	2301      	movs	r3, #1
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800731e:	2303      	movs	r3, #3
 8007320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007322:	2304      	movs	r3, #4
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800732a:	4619      	mov	r1, r3
 800732c:	4817      	ldr	r0, [pc, #92]	; (800738c <HAL_I2C_MspInit+0x1c0>)
 800732e:	f7f9 fa1d 	bl	800076c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007332:	2310      	movs	r3, #16
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007336:	2312      	movs	r3, #18
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800733a:	2301      	movs	r3, #1
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800733e:	2303      	movs	r3, #3
 8007340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8007342:	2309      	movs	r3, #9
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800734a:	4619      	mov	r1, r3
 800734c:	480c      	ldr	r0, [pc, #48]	; (8007380 <HAL_I2C_MspInit+0x1b4>)
 800734e:	f7f9 fa0d 	bl	800076c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007352:	2300      	movs	r3, #0
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	4b09      	ldr	r3, [pc, #36]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	4a08      	ldr	r2, [pc, #32]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 800735c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007360:	6413      	str	r3, [r2, #64]	; 0x40
 8007362:	4b06      	ldr	r3, [pc, #24]	; (800737c <HAL_I2C_MspInit+0x1b0>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800736a:	60bb      	str	r3, [r7, #8]
 800736c:	68bb      	ldr	r3, [r7, #8]
}
 800736e:	bf00      	nop
 8007370:	3738      	adds	r7, #56	; 0x38
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40005400 	.word	0x40005400
 800737c:	40023800 	.word	0x40023800
 8007380:	40020400 	.word	0x40020400
 8007384:	40005800 	.word	0x40005800
 8007388:	40005c00 	.word	0x40005c00
 800738c:	40020000 	.word	0x40020000

08007390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a0b      	ldr	r2, [pc, #44]	; (80073cc <HAL_TIM_Base_MspInit+0x3c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d10d      	bne.n	80073be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <HAL_TIM_Base_MspInit+0x40>)
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <HAL_TIM_Base_MspInit+0x40>)
 80073ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073b0:	6453      	str	r3, [r2, #68]	; 0x44
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <HAL_TIM_Base_MspInit+0x40>)
 80073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40014800 	.word	0x40014800
 80073d0:	40023800 	.word	0x40023800

080073d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073dc:	f107 030c 	add.w	r3, r7, #12
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	609a      	str	r2, [r3, #8]
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a12      	ldr	r2, [pc, #72]	; (800743c <HAL_TIM_MspPostInit+0x68>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d11e      	bne.n	8007434 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	4b11      	ldr	r3, [pc, #68]	; (8007440 <HAL_TIM_MspPostInit+0x6c>)
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	4a10      	ldr	r2, [pc, #64]	; (8007440 <HAL_TIM_MspPostInit+0x6c>)
 8007400:	f043 0302 	orr.w	r3, r3, #2
 8007404:	6313      	str	r3, [r2, #48]	; 0x30
 8007406:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <HAL_TIM_MspPostInit+0x6c>)
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	60bb      	str	r3, [r7, #8]
 8007410:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration    
    PB9     ------> TIM11_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007416:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007418:	2302      	movs	r3, #2
 800741a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007420:	2300      	movs	r3, #0
 8007422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007424:	2303      	movs	r3, #3
 8007426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007428:	f107 030c 	add.w	r3, r7, #12
 800742c:	4619      	mov	r1, r3
 800742e:	4805      	ldr	r0, [pc, #20]	; (8007444 <HAL_TIM_MspPostInit+0x70>)
 8007430:	f7f9 f99c 	bl	800076c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007434:	bf00      	nop
 8007436:	3720      	adds	r7, #32
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	40014800 	.word	0x40014800
 8007440:	40023800 	.word	0x40023800
 8007444:	40020400 	.word	0x40020400

08007448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007450:	f107 0314 	add.w	r3, r7, #20
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	609a      	str	r2, [r3, #8]
 800745c:	60da      	str	r2, [r3, #12]
 800745e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a19      	ldr	r2, [pc, #100]	; (80074cc <HAL_UART_MspInit+0x84>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d12c      	bne.n	80074c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <HAL_UART_MspInit+0x88>)
 8007470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007472:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <HAL_UART_MspInit+0x88>)
 8007474:	f043 0320 	orr.w	r3, r3, #32
 8007478:	6453      	str	r3, [r2, #68]	; 0x44
 800747a:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <HAL_UART_MspInit+0x88>)
 800747c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <HAL_UART_MspInit+0x88>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	4a10      	ldr	r2, [pc, #64]	; (80074d0 <HAL_UART_MspInit+0x88>)
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	6313      	str	r3, [r2, #48]	; 0x30
 8007496:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <HAL_UART_MspInit+0x88>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80074a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80074a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a8:	2302      	movs	r3, #2
 80074aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80074ac:	2301      	movs	r3, #1
 80074ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b0:	2303      	movs	r3, #3
 80074b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80074b4:	2308      	movs	r3, #8
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b8:	f107 0314 	add.w	r3, r7, #20
 80074bc:	4619      	mov	r1, r3
 80074be:	4805      	ldr	r0, [pc, #20]	; (80074d4 <HAL_UART_MspInit+0x8c>)
 80074c0:	f7f9 f954 	bl	800076c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80074c4:	bf00      	nop
 80074c6:	3728      	adds	r7, #40	; 0x28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40011400 	.word	0x40011400
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40020000 	.word	0x40020000

080074d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08c      	sub	sp, #48	; 0x30
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80074e8:	2200      	movs	r2, #0
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	2019      	movs	r0, #25
 80074ee:	f7f9 f913 	bl	8000718 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80074f2:	2019      	movs	r0, #25
 80074f4:	f7f9 f92c 	bl	8000750 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	4b1e      	ldr	r3, [pc, #120]	; (8007578 <HAL_InitTick+0xa0>)
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	4a1d      	ldr	r2, [pc, #116]	; (8007578 <HAL_InitTick+0xa0>)
 8007502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007506:	6453      	str	r3, [r2, #68]	; 0x44
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <HAL_InitTick+0xa0>)
 800750a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007514:	f107 0210 	add.w	r2, r7, #16
 8007518:	f107 0314 	add.w	r3, r7, #20
 800751c:	4611      	mov	r1, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f7fa fe2c 	bl	800217c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007524:	f7fa fe16 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8007528:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	4a13      	ldr	r2, [pc, #76]	; (800757c <HAL_InitTick+0xa4>)
 800752e:	fba2 2303 	umull	r2, r3, r2, r3
 8007532:	0c9b      	lsrs	r3, r3, #18
 8007534:	3b01      	subs	r3, #1
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8007538:	4b11      	ldr	r3, [pc, #68]	; (8007580 <HAL_InitTick+0xa8>)
 800753a:	4a12      	ldr	r2, [pc, #72]	; (8007584 <HAL_InitTick+0xac>)
 800753c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 800753e:	4b10      	ldr	r3, [pc, #64]	; (8007580 <HAL_InitTick+0xa8>)
 8007540:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007544:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8007546:	4a0e      	ldr	r2, [pc, #56]	; (8007580 <HAL_InitTick+0xa8>)
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800754c:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <HAL_InitTick+0xa8>)
 800754e:	2200      	movs	r2, #0
 8007550:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007552:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <HAL_InitTick+0xa8>)
 8007554:	2200      	movs	r2, #0
 8007556:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8007558:	4809      	ldr	r0, [pc, #36]	; (8007580 <HAL_InitTick+0xa8>)
 800755a:	f7fa fe41 	bl	80021e0 <HAL_TIM_Base_Init>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8007564:	4806      	ldr	r0, [pc, #24]	; (8007580 <HAL_InitTick+0xa8>)
 8007566:	f7fa fe66 	bl	8002236 <HAL_TIM_Base_Start_IT>
 800756a:	4603      	mov	r3, r0
 800756c:	e000      	b.n	8007570 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
}
 8007570:	4618      	mov	r0, r3
 8007572:	3730      	adds	r7, #48	; 0x30
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40023800 	.word	0x40023800
 800757c:	431bde83 	.word	0x431bde83
 8007580:	20013958 	.word	0x20013958
 8007584:	40014400 	.word	0x40014400

08007588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007596:	b480      	push	{r7}
 8007598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800759a:	e7fe      	b.n	800759a <HardFault_Handler+0x4>

0800759c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075a0:	e7fe      	b.n	80075a0 <MemManage_Handler+0x4>

080075a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075a2:	b480      	push	{r7}
 80075a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075a6:	e7fe      	b.n	80075a6 <BusFault_Handler+0x4>

080075a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075ac:	e7fe      	b.n	80075ac <UsageFault_Handler+0x4>

080075ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075ae:	b480      	push	{r7}
 80075b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075b2:	bf00      	nop
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80075c0:	4802      	ldr	r0, [pc, #8]	; (80075cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80075c2:	f7fa fec3 	bl	800234c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80075c6:	bf00      	nop
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	20013958 	.word	0x20013958

080075d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80075d4:	4b16      	ldr	r3, [pc, #88]	; (8007630 <SystemInit+0x60>)
 80075d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075da:	4a15      	ldr	r2, [pc, #84]	; (8007630 <SystemInit+0x60>)
 80075dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80075e4:	4b13      	ldr	r3, [pc, #76]	; (8007634 <SystemInit+0x64>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a12      	ldr	r2, [pc, #72]	; (8007634 <SystemInit+0x64>)
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80075f0:	4b10      	ldr	r3, [pc, #64]	; (8007634 <SystemInit+0x64>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80075f6:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <SystemInit+0x64>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a0e      	ldr	r2, [pc, #56]	; (8007634 <SystemInit+0x64>)
 80075fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007604:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007606:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <SystemInit+0x64>)
 8007608:	4a0b      	ldr	r2, [pc, #44]	; (8007638 <SystemInit+0x68>)
 800760a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800760c:	4b09      	ldr	r3, [pc, #36]	; (8007634 <SystemInit+0x64>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a08      	ldr	r2, [pc, #32]	; (8007634 <SystemInit+0x64>)
 8007612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007616:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <SystemInit+0x64>)
 800761a:	2200      	movs	r2, #0
 800761c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800761e:	4b04      	ldr	r3, [pc, #16]	; (8007630 <SystemInit+0x60>)
 8007620:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007624:	609a      	str	r2, [r3, #8]
#endif
}
 8007626:	bf00      	nop
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	e000ed00 	.word	0xe000ed00
 8007634:	40023800 	.word	0x40023800
 8007638:	24003010 	.word	0x24003010

0800763c <uart_multibyte_send>:
#include "uart_display.h"

extern UART_HandleTypeDef huart6;

uint8_t uart_multibyte_send(uint8_t data[], uint8_t num)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
//
//    for (i = 0; i < num; i++ ) {
//        EUSCI_A_UART_transmitData(EUSCI_A0_BASE, data[i]);
//    }

	HAL_UART_Transmit(&huart6, (uint8_t *)data, num, 0xFFFF);
 8007648:	78fb      	ldrb	r3, [r7, #3]
 800764a:	b29a      	uxth	r2, r3
 800764c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	4804      	ldr	r0, [pc, #16]	; (8007664 <uart_multibyte_send+0x28>)
 8007654:	f7fb fb02 	bl	8002c5c <HAL_UART_Transmit>

    return 0;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200138ec 	.word	0x200138ec

08007668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800766c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800766e:	e003      	b.n	8007678 <LoopCopyDataInit>

08007670 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007672:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007674:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007676:	3104      	adds	r1, #4

08007678 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007678:	480b      	ldr	r0, [pc, #44]	; (80076a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800767c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800767e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007680:	d3f6      	bcc.n	8007670 <CopyDataInit>
  ldr  r2, =_sbss
 8007682:	4a0b      	ldr	r2, [pc, #44]	; (80076b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007684:	e002      	b.n	800768c <LoopFillZerobss>

08007686 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007686:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007688:	f842 3b04 	str.w	r3, [r2], #4

0800768c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800768c:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800768e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007690:	d3f9      	bcc.n	8007686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007692:	f7ff ff9d 	bl	80075d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007696:	f000 f811 	bl	80076bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800769a:	f7fe fd7f 	bl	800619c <main>
  bx  lr    
 800769e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80076a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80076a4:	08007fc8 	.word	0x08007fc8
  ldr  r0, =_sdata
 80076a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80076ac:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80076b0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80076b4:	20013998 	.word	0x20013998

080076b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076b8:	e7fe      	b.n	80076b8 <ADC_IRQHandler>
	...

080076bc <__libc_init_array>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	4e0d      	ldr	r6, [pc, #52]	; (80076f4 <__libc_init_array+0x38>)
 80076c0:	4c0d      	ldr	r4, [pc, #52]	; (80076f8 <__libc_init_array+0x3c>)
 80076c2:	1ba4      	subs	r4, r4, r6
 80076c4:	10a4      	asrs	r4, r4, #2
 80076c6:	2500      	movs	r5, #0
 80076c8:	42a5      	cmp	r5, r4
 80076ca:	d109      	bne.n	80076e0 <__libc_init_array+0x24>
 80076cc:	4e0b      	ldr	r6, [pc, #44]	; (80076fc <__libc_init_array+0x40>)
 80076ce:	4c0c      	ldr	r4, [pc, #48]	; (8007700 <__libc_init_array+0x44>)
 80076d0:	f000 f82c 	bl	800772c <_init>
 80076d4:	1ba4      	subs	r4, r4, r6
 80076d6:	10a4      	asrs	r4, r4, #2
 80076d8:	2500      	movs	r5, #0
 80076da:	42a5      	cmp	r5, r4
 80076dc:	d105      	bne.n	80076ea <__libc_init_array+0x2e>
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076e4:	4798      	blx	r3
 80076e6:	3501      	adds	r5, #1
 80076e8:	e7ee      	b.n	80076c8 <__libc_init_array+0xc>
 80076ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076ee:	4798      	blx	r3
 80076f0:	3501      	adds	r5, #1
 80076f2:	e7f2      	b.n	80076da <__libc_init_array+0x1e>
 80076f4:	08007fc0 	.word	0x08007fc0
 80076f8:	08007fc0 	.word	0x08007fc0
 80076fc:	08007fc0 	.word	0x08007fc0
 8007700:	08007fc4 	.word	0x08007fc4

08007704 <memcpy>:
 8007704:	b510      	push	{r4, lr}
 8007706:	1e43      	subs	r3, r0, #1
 8007708:	440a      	add	r2, r1
 800770a:	4291      	cmp	r1, r2
 800770c:	d100      	bne.n	8007710 <memcpy+0xc>
 800770e:	bd10      	pop	{r4, pc}
 8007710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007718:	e7f7      	b.n	800770a <memcpy+0x6>

0800771a <memset>:
 800771a:	4402      	add	r2, r0
 800771c:	4603      	mov	r3, r0
 800771e:	4293      	cmp	r3, r2
 8007720:	d100      	bne.n	8007724 <memset+0xa>
 8007722:	4770      	bx	lr
 8007724:	f803 1b01 	strb.w	r1, [r3], #1
 8007728:	e7f9      	b.n	800771e <memset+0x4>
	...

0800772c <_init>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr

08007738 <_fini>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr
