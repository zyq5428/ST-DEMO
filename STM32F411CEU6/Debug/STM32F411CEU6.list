
STM32F411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08005358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200000c4  0800541c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800541c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d475  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002239  00000000  00000000  0002d569  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  0002f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  000302a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001770c  00000000  00000000  00030c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab14  00000000  00000000  0004839c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000883cf  00000000  00000000  00052eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db27f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003264  00000000  00000000  000db2fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b34 	.word	0x08004b34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	08004b34 	.word	0x08004b34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f92f 	bl	800080c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f003 f918 	bl	80037e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f939 	bl	800085a <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f90f 	bl	8000822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000005c 	.word	0x2000005c
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000f4 	.word	0x200000f4

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000f4 	.word	0x200000f4

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	2b04      	cmp	r3, #4
 800077c:	bf28      	it	cs
 800077e:	2304      	movcs	r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d902      	bls.n	8000790 <NVIC_EncodePriority+0x30>
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <NVIC_EncodePriority+0x32>
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43da      	mvns	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	401a      	ands	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	4313      	orrs	r3, r2
         );
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d8:	d301      	bcc.n	80007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2301      	movs	r3, #1
 80007dc:	e00f      	b.n	80007fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <SysTick_Config+0x40>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e6:	210f      	movs	r1, #15
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f7ff ff8e 	bl	800070c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <SysTick_Config+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <SysTick_Config+0x40>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff47 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000834:	f7ff ff5c 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	6978      	ldr	r0, [r7, #20]
 8000840:	f7ff ff8e 	bl	8000760 <NVIC_EncodePriority>
 8000844:	4602      	mov	r2, r0
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff5d 	bl	800070c <__NVIC_SetPriority>
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffb0 	bl	80007c8 <SysTick_Config>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	; 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	e159      	b.n	8000b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	f040 8148 	bne.w	8000b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d003      	beq.n	80008be <HAL_GPIO_Init+0x4a>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b12      	cmp	r3, #18
 80008bc:	d123      	bne.n	8000906 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3208      	adds	r2, #8
 80008c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	220f      	movs	r2, #15
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4013      	ands	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	691a      	ldr	r2, [r3, #16]
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	08da      	lsrs	r2, r3, #3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3208      	adds	r2, #8
 8000900:	69b9      	ldr	r1, [r7, #24]
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4013      	ands	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0203 	and.w	r2, r3, #3
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d00b      	beq.n	800095a <HAL_GPIO_Init+0xe6>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d007      	beq.n	800095a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094e:	2b11      	cmp	r3, #17
 8000950:	d003      	beq.n	800095a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b12      	cmp	r3, #18
 8000958:	d130      	bne.n	80009bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	2203      	movs	r2, #3
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4013      	ands	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000990:	2201      	movs	r2, #1
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	091b      	lsrs	r3, r3, #4
 80009a6:	f003 0201 	and.w	r2, r3, #1
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4013      	ands	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 80a2 	beq.w	8000b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <HAL_GPIO_Init+0x2e4>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a55      	ldr	r2, [pc, #340]	; (8000b58 <HAL_GPIO_Init+0x2e4>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b53      	ldr	r3, [pc, #332]	; (8000b58 <HAL_GPIO_Init+0x2e4>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a16:	4a51      	ldr	r2, [pc, #324]	; (8000b5c <HAL_GPIO_Init+0x2e8>)
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	220f      	movs	r2, #15
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <HAL_GPIO_Init+0x2ec>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d019      	beq.n	8000a76 <HAL_GPIO_Init+0x202>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <HAL_GPIO_Init+0x2f0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d013      	beq.n	8000a72 <HAL_GPIO_Init+0x1fe>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <HAL_GPIO_Init+0x2f4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d00d      	beq.n	8000a6e <HAL_GPIO_Init+0x1fa>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a45      	ldr	r2, [pc, #276]	; (8000b6c <HAL_GPIO_Init+0x2f8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d007      	beq.n	8000a6a <HAL_GPIO_Init+0x1f6>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <HAL_GPIO_Init+0x2fc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_GPIO_Init+0x1f2>
 8000a62:	2304      	movs	r3, #4
 8000a64:	e008      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a66:	2307      	movs	r3, #7
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e004      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a6e:	2302      	movs	r3, #2
 8000a70:	e002      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x204>
 8000a76:	2300      	movs	r3, #0
 8000a78:	69fa      	ldr	r2, [r7, #28]
 8000a7a:	f002 0203 	and.w	r2, r2, #3
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	4093      	lsls	r3, r2
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a88:	4934      	ldr	r1, [pc, #208]	; (8000b5c <HAL_GPIO_Init+0x2e8>)
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aba:	4a2e      	ldr	r2, [pc, #184]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ae4:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_GPIO_Init+0x300>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3301      	adds	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	f67f aea2 	bls.w	8000890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3724      	adds	r7, #36	; 0x24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40013c00 	.word	0x40013c00

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b94:	e003      	b.n	8000b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	619a      	str	r2, [r3, #24]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e10f      	b.n	8000dde <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d106      	bne.n	8000bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f002 fe30 	bl	8003838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2224      	movs	r2, #36	; 0x24
 8000bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0201 	bic.w	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bf0:	f001 fb20 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8000bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4a7b      	ldr	r2, [pc, #492]	; (8000de8 <HAL_I2C_Init+0x23c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d807      	bhi.n	8000c10 <HAL_I2C_Init+0x64>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4a7a      	ldr	r2, [pc, #488]	; (8000dec <HAL_I2C_Init+0x240>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	bf94      	ite	ls
 8000c08:	2301      	movls	r3, #1
 8000c0a:	2300      	movhi	r3, #0
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	e006      	b.n	8000c1e <HAL_I2C_Init+0x72>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4a77      	ldr	r2, [pc, #476]	; (8000df0 <HAL_I2C_Init+0x244>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	bf94      	ite	ls
 8000c18:	2301      	movls	r3, #1
 8000c1a:	2300      	movhi	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e0db      	b.n	8000dde <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4a72      	ldr	r2, [pc, #456]	; (8000df4 <HAL_I2C_Init+0x248>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0c9b      	lsrs	r3, r3, #18
 8000c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a64      	ldr	r2, [pc, #400]	; (8000de8 <HAL_I2C_Init+0x23c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d802      	bhi.n	8000c60 <HAL_I2C_Init+0xb4>
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	e009      	b.n	8000c74 <HAL_I2C_Init+0xc8>
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	4a63      	ldr	r2, [pc, #396]	; (8000df8 <HAL_I2C_Init+0x24c>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	099b      	lsrs	r3, r3, #6
 8000c72:	3301      	adds	r3, #1
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4956      	ldr	r1, [pc, #344]	; (8000de8 <HAL_I2C_Init+0x23c>)
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d80d      	bhi.n	8000cb0 <HAL_I2C_Init+0x104>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1e59      	subs	r1, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	bf38      	it	cc
 8000cac:	2304      	movcc	r3, #4
 8000cae:	e04f      	b.n	8000d50 <HAL_I2C_Init+0x1a4>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <HAL_I2C_Init+0x130>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1e58      	subs	r0, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6859      	ldr	r1, [r3, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	440b      	add	r3, r1
 8000cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cca:	3301      	adds	r3, #1
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	e012      	b.n	8000d02 <HAL_I2C_Init+0x156>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	1e58      	subs	r0, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6859      	ldr	r1, [r3, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	0099      	lsls	r1, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf0c      	ite	eq
 8000cfc:	2301      	moveq	r3, #1
 8000cfe:	2300      	movne	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_I2C_Init+0x15e>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e022      	b.n	8000d50 <HAL_I2C_Init+0x1a4>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10e      	bne.n	8000d30 <HAL_I2C_Init+0x184>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1e58      	subs	r0, r3, #1
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6859      	ldr	r1, [r3, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	440b      	add	r3, r1
 8000d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d24:	3301      	adds	r3, #1
 8000d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2e:	e00f      	b.n	8000d50 <HAL_I2C_Init+0x1a4>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	1e58      	subs	r0, r3, #1
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6859      	ldr	r1, [r3, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	0099      	lsls	r1, r3, #2
 8000d40:	440b      	add	r3, r1
 8000d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d46:	3301      	adds	r3, #1
 8000d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	6809      	ldr	r1, [r1, #0]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69da      	ldr	r2, [r3, #28]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a1b      	ldr	r3, [r3, #32]
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6911      	ldr	r1, [r2, #16]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68d2      	ldr	r2, [r2, #12]
 8000d8a:	4311      	orrs	r1, r2
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2220      	movs	r2, #32
 8000dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	000186a0 	.word	0x000186a0
 8000dec:	001e847f 	.word	0x001e847f
 8000df0:	003d08ff 	.word	0x003d08ff
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	10624dd3 	.word	0x10624dd3

08000dfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	461a      	mov	r2, r3
 8000e08:	460b      	mov	r3, r1
 8000e0a:	817b      	strh	r3, [r7, #10]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff fc1c 	bl	800064c <HAL_GetTick>
 8000e14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b20      	cmp	r3, #32
 8000e20:	f040 80e0 	bne.w	8000fe4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2319      	movs	r3, #25
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4970      	ldr	r1, [pc, #448]	; (8000ff0 <HAL_I2C_Master_Transmit+0x1f4>)
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f000 fc34 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e0d3      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <HAL_I2C_Master_Transmit+0x50>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e0cc      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d007      	beq.n	8000e72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0201 	orr.w	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2221      	movs	r2, #33	; 0x21
 8000e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	893a      	ldrh	r2, [r7, #8]
 8000ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4a50      	ldr	r2, [pc, #320]	; (8000ff4 <HAL_I2C_Master_Transmit+0x1f8>)
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000eb4:	8979      	ldrh	r1, [r7, #10]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	6a3a      	ldr	r2, [r7, #32]
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 fac2 	bl	8001444 <I2C_MasterRequestWrite>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e08d      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000ee0:	e066      	b.n	8000fb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	6a39      	ldr	r1, [r7, #32]
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f000 fcae 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00d      	beq.n	8000f0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d107      	bne.n	8000f0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e06b      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d11b      	bne.n	8000f84 <HAL_I2C_Master_Transmit+0x188>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d017      	beq.n	8000f84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	3b01      	subs	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	6a39      	ldr	r1, [r7, #32]
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f000 fc9e 	bl	80018ca <I2C_WaitOnBTFFlagUntilTimeout>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00d      	beq.n	8000fb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d107      	bne.n	8000fac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000faa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e01a      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d194      	bne.n	8000ee2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000fe4:	2302      	movs	r3, #2
  }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	00100002 	.word	0x00100002
 8000ff4:	ffff0000 	.word	0xffff0000

08000ff8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	461a      	mov	r2, r3
 8001004:	460b      	mov	r3, r1
 8001006:	817b      	strh	r3, [r7, #10]
 8001008:	4613      	mov	r3, r2
 800100a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fb1e 	bl	800064c <HAL_GetTick>
 8001010:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b20      	cmp	r3, #32
 800101c:	f040 820b 	bne.w	8001436 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2319      	movs	r3, #25
 8001026:	2201      	movs	r2, #1
 8001028:	497c      	ldr	r1, [pc, #496]	; (800121c <HAL_I2C_Master_Receive+0x224>)
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fb36 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001036:	2302      	movs	r3, #2
 8001038:	e1fe      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_I2C_Master_Receive+0x50>
 8001044:	2302      	movs	r3, #2
 8001046:	e1f7      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d007      	beq.n	800106e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0201 	orr.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800107c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2222      	movs	r2, #34	; 0x22
 8001082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2210      	movs	r2, #16
 800108a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	893a      	ldrh	r2, [r7, #8]
 800109e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4a5c      	ldr	r2, [pc, #368]	; (8001220 <HAL_I2C_Master_Receive+0x228>)
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80010b0:	8979      	ldrh	r1, [r7, #10]
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 fa3a 	bl	8001530 <I2C_MasterRequestRead>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e1b8      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d113      	bne.n	80010f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	623b      	str	r3, [r7, #32]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e18c      	b.n	8001410 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d11b      	bne.n	8001136 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800110c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e16c      	b.n	8001410 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113a:	2b02      	cmp	r3, #2
 800113c:	d11b      	bne.n	8001176 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800114c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800115c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	e14c      	b.n	8001410 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800119c:	e138      	b.n	8001410 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	f200 80f1 	bhi.w	800138a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d123      	bne.n	80011f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 fbc9 	bl	800194c <I2C_WaitOnRXNEFlagUntilTimeout>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e139      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80011f6:	e10b      	b.n	8001410 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d14e      	bne.n	800129e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001206:	2200      	movs	r2, #0
 8001208:	4906      	ldr	r1, [pc, #24]	; (8001224 <HAL_I2C_Master_Receive+0x22c>)
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 fa46 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d008      	beq.n	8001228 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e10e      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
 800121a:	bf00      	nop
 800121c:	00100002 	.word	0x00100002
 8001220:	ffff0000 	.word	0xffff0000
 8001224:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001254:	3b01      	subs	r3, #1
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001260:	b29b      	uxth	r3, r3
 8001262:	3b01      	subs	r3, #1
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001286:	3b01      	subs	r3, #1
 8001288:	b29a      	uxth	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800129c:	e0b8      	b.n	8001410 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	2200      	movs	r2, #0
 80012a6:	4966      	ldr	r1, [pc, #408]	; (8001440 <HAL_I2C_Master_Receive+0x448>)
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f9f7 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0bf      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	2200      	movs	r2, #0
 8001302:	494f      	ldr	r1, [pc, #316]	; (8001440 <HAL_I2C_Master_Receive+0x448>)
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f9c9 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e091      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001340:	3b01      	subs	r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	b29a      	uxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001372:	3b01      	subs	r3, #1
 8001374:	b29a      	uxth	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001388:	e042      	b.n	8001410 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800138a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 fadc 	bl	800194c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e04c      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d118      	bne.n	8001410 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001414:	2b00      	cmp	r3, #0
 8001416:	f47f aec2 	bne.w	800119e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001436:	2302      	movs	r3, #2
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	00010004 	.word	0x00010004

08001444 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af02      	add	r7, sp, #8
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	460b      	mov	r3, r1
 8001452:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d006      	beq.n	800146e <I2C_MasterRequestWrite+0x2a>
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d003      	beq.n	800146e <I2C_MasterRequestWrite+0x2a>
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800146c:	d108      	bne.n	8001480 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e00b      	b.n	8001498 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	2b12      	cmp	r3, #18
 8001486:	d107      	bne.n	8001498 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f8f9 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e035      	b.n	8001520 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014bc:	d108      	bne.n	80014d0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	e01b      	b.n	8001508 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014d0:	897b      	ldrh	r3, [r7, #10]
 80014d2:	11db      	asrs	r3, r3, #7
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f003 0306 	and.w	r3, r3, #6
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f063 030f 	orn	r3, r3, #15
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	490e      	ldr	r1, [pc, #56]	; (8001528 <I2C_MasterRequestWrite+0xe4>)
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f92b 	bl	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e010      	b.n	8001520 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014fe:	897b      	ldrh	r3, [r7, #10]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4907      	ldr	r1, [pc, #28]	; (800152c <I2C_MasterRequestWrite+0xe8>)
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f91b 	bl	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	00010008 	.word	0x00010008
 800152c:	00010002 	.word	0x00010002

08001530 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	460b      	mov	r3, r1
 800153e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001554:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2b08      	cmp	r3, #8
 800155a:	d006      	beq.n	800156a <I2C_MasterRequestRead+0x3a>
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d003      	beq.n	800156a <I2C_MasterRequestRead+0x3a>
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001568:	d108      	bne.n	800157c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e00b      	b.n	8001594 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	2b11      	cmp	r3, #17
 8001582:	d107      	bne.n	8001594 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001592:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f87b 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e06d      	b.n	800168c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015b8:	d108      	bne.n	80015cc <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80015ba:	897b      	ldrh	r3, [r7, #10]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	e053      	b.n	8001674 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015cc:	897b      	ldrh	r3, [r7, #10]
 80015ce:	11db      	asrs	r3, r3, #7
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f003 0306 	and.w	r3, r3, #6
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f063 030f 	orn	r3, r3, #15
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	492a      	ldr	r1, [pc, #168]	; (8001694 <I2C_MasterRequestRead+0x164>)
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f8ad 	bl	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e048      	b.n	800168c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015fa:	897b      	ldrh	r3, [r7, #10]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4923      	ldr	r1, [pc, #140]	; (8001698 <I2C_MasterRequestRead+0x168>)
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f89d 	bl	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e038      	b.n	800168c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800163e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f825 	bl	800169c <I2C_WaitOnFlagUntilTimeout>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e017      	b.n	800168c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800165c:	897b      	ldrh	r3, [r7, #10]
 800165e:	11db      	asrs	r3, r3, #7
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 0306 	and.w	r3, r3, #6
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f063 030e 	orn	r3, r3, #14
 800166c:	b2da      	uxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <I2C_MasterRequestRead+0x168>)
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f865 	bl	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	00010008 	.word	0x00010008
 8001698:	00010002 	.word	0x00010002

0800169c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	4613      	mov	r3, r2
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ac:	e025      	b.n	80016fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d021      	beq.n	80016fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016b6:	f7fe ffc9 	bl	800064c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d302      	bcc.n	80016cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d116      	bne.n	80016fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e023      	b.n	8001742 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10d      	bne.n	8001720 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4013      	ands	r3, r2
 8001710:	b29b      	uxth	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf0c      	ite	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	2300      	movne	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	e00c      	b.n	800173a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4013      	ands	r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf0c      	ite	eq
 8001732:	2301      	moveq	r3, #1
 8001734:	2300      	movne	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	429a      	cmp	r2, r3
 800173e:	d0b6      	beq.n	80016ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001758:	e051      	b.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001768:	d123      	bne.n	80017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001778:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001782:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f043 0204 	orr.w	r2, r3, #4
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e046      	b.n	8001840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d021      	beq.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ba:	f7fe ff47 	bl	800064c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d302      	bcc.n	80017d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d116      	bne.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2220      	movs	r2, #32
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e020      	b.n	8001840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10c      	bne.n	8001822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4013      	ands	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	e00b      	b.n	800183a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	43da      	mvns	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4013      	ands	r3, r2
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf14      	ite	ne
 8001834:	2301      	movne	r3, #1
 8001836:	2300      	moveq	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d18d      	bne.n	800175a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001854:	e02d      	b.n	80018b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f8ce 	bl	80019f8 <I2C_IsAcknowledgeFailed>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e02d      	b.n	80018c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d021      	beq.n	80018b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7fe feed 	bl	800064c <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d116      	bne.n	80018b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f043 0220 	orr.w	r2, r3, #32
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e007      	b.n	80018c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	2b80      	cmp	r3, #128	; 0x80
 80018be:	d1ca      	bne.n	8001856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018d6:	e02d      	b.n	8001934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f88d 	bl	80019f8 <I2C_IsAcknowledgeFailed>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e02d      	b.n	8001944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ee:	d021      	beq.n	8001934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f0:	f7fe feac 	bl	800064c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d302      	bcc.n	8001906 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d116      	bne.n	8001934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f043 0220 	orr.w	r2, r3, #32
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e007      	b.n	8001944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b04      	cmp	r3, #4
 8001940:	d1ca      	bne.n	80018d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001958:	e042      	b.n	80019e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b10      	cmp	r3, #16
 8001966:	d119      	bne.n	800199c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 0210 	mvn.w	r2, #16
 8001970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2220      	movs	r2, #32
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e029      	b.n	80019f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199c:	f7fe fe56 	bl	800064c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d302      	bcc.n	80019b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f043 0220 	orr.w	r2, r3, #32
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e007      	b.n	80019f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	2b40      	cmp	r3, #64	; 0x40
 80019ec:	d1b5      	bne.n	800195a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d11b      	bne.n	8001a48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e22d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d075      	beq.n	8001b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a76:	4ba3      	ldr	r3, [pc, #652]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d00c      	beq.n	8001a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a82:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d112      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8e:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	4b99      	ldr	r3, [pc, #612]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d05b      	beq.n	8001b60 <HAL_RCC_OscConfig+0x108>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d157      	bne.n	8001b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e208      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d106      	bne.n	8001acc <HAL_RCC_OscConfig+0x74>
 8001abe:	4b91      	ldr	r3, [pc, #580]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a90      	ldr	r2, [pc, #576]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e01d      	b.n	8001b08 <HAL_RCC_OscConfig+0xb0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a8a      	ldr	r2, [pc, #552]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a87      	ldr	r2, [pc, #540]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0xb0>
 8001af0:	4b84      	ldr	r3, [pc, #528]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a83      	ldr	r2, [pc, #524]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a80      	ldr	r2, [pc, #512]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d013      	beq.n	8001b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7fe fd9c 	bl	800064c <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b18:	f7fe fd98 	bl	800064c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1cd      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0xc0>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7fe fd88 	bl	800064c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b40:	f7fe fd84 	bl	800064c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1b9      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	4b6c      	ldr	r3, [pc, #432]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0xe8>
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d063      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6e:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7a:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d11c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b86:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d116      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_RCC_OscConfig+0x152>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e18d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001baa:	4b56      	ldr	r3, [pc, #344]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4952      	ldr	r1, [pc, #328]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	e03a      	b.n	8001c36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc8:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <HAL_RCC_OscConfig+0x2b0>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7fe fd3d 	bl	800064c <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7fe fd39 	bl	800064c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e16e      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4940      	ldr	r1, [pc, #256]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_OscConfig+0x2b0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7fe fd1c 	bl	800064c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c18:	f7fe fd18 	bl	800064c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e14d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d030      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d016      	beq.n	8001c78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_RCC_OscConfig+0x2b4>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7fe fcfc 	bl	800064c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c58:	f7fe fcf8 	bl	800064c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e12d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x200>
 8001c76:	e015      	b.n	8001ca4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_OscConfig+0x2b4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7fe fce5 	bl	800064c <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c86:	f7fe fce1 	bl	800064c <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e116      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a0 	beq.w	8001df2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_OscConfig+0x2b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d121      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_RCC_OscConfig+0x2b8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <HAL_RCC_OscConfig+0x2b8>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe fca7 	bl	800064c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	e011      	b.n	8001d26 <HAL_RCC_OscConfig+0x2ce>
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	42470000 	.word	0x42470000
 8001d0c:	42470e80 	.word	0x42470e80
 8001d10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d14:	f7fe fc9a 	bl	800064c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0cf      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_OscConfig+0x478>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d106      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
 8001d3a:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	e01c      	b.n	8001d82 <HAL_RCC_OscConfig+0x32a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d10c      	bne.n	8001d6a <HAL_RCC_OscConfig+0x312>
 8001d50:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a5f      	ldr	r2, [pc, #380]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5c:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a5c      	ldr	r2, [pc, #368]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	e00b      	b.n	8001d82 <HAL_RCC_OscConfig+0x32a>
 8001d6a:	4b5a      	ldr	r3, [pc, #360]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a59      	ldr	r2, [pc, #356]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	4a56      	ldr	r2, [pc, #344]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d015      	beq.n	8001db6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7fe fc5f 	bl	800064c <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7fe fc5b 	bl	800064c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e08e      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ee      	beq.n	8001d92 <HAL_RCC_OscConfig+0x33a>
 8001db4:	e014      	b.n	8001de0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7fe fc49 	bl	800064c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7fe fc45 	bl	800064c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e078      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ee      	bne.n	8001dbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d105      	bne.n	8001df2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d064      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d05c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d141      	bne.n	8001e92 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_RCC_OscConfig+0x480>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fc1a 	bl	800064c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe fc16 	bl	800064c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e04b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	491d      	ldr	r1, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_RCC_OscConfig+0x480>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fbef 	bl	800064c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe fbeb 	bl	800064c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e020      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x41a>
 8001e90:	e018      	b.n	8001ec4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_RCC_OscConfig+0x480>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe fbd8 	bl	800064c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe fbd4 	bl	800064c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e009      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_RCC_OscConfig+0x47c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x448>
 8001ebe:	e001      	b.n	8001ec4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	42470060 	.word	0x42470060

08001edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0ca      	b.n	8002086 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d90c      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b64      	ldr	r3, [pc, #400]	; (8002090 <HAL_RCC_ClockConfig+0x1b4>)
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b62      	ldr	r3, [pc, #392]	; (8002090 <HAL_RCC_ClockConfig+0x1b4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b6      	b.n	8002086 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f30:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a57      	ldr	r2, [pc, #348]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f48:	4b52      	ldr	r3, [pc, #328]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b4f      	ldr	r3, [pc, #316]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	494c      	ldr	r1, [pc, #304]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d044      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d119      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07d      	b.n	8002086 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06d      	b.n	8002086 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e065      	b.n	8002086 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b36      	ldr	r3, [pc, #216]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4933      	ldr	r1, [pc, #204]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fcc:	f7fe fb3e 	bl	800064c <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7fe fb3a 	bl	800064c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e04d      	b.n	8002086 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_ClockConfig+0x1b4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d20c      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_ClockConfig+0x1b4>)
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_RCC_ClockConfig+0x1b4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e030      	b.n	8002086 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4915      	ldr	r1, [pc, #84]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	490d      	ldr	r1, [pc, #52]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002062:	f000 f829 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002066:	4601      	mov	r1, r0
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	5cd3      	ldrb	r3, [r2, r3]
 8002076:	fa21 f303 	lsr.w	r3, r1, r3
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800207e:	2000      	movs	r0, #0
 8002080:	f7fe faa0 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00
 8002094:	40023800 	.word	0x40023800
 8002098:	08005298 	.word	0x08005298
 800209c:	2000005c 	.word	0x2000005c

080020a0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_EnableCSS+0x14>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	4247004c 	.word	0x4247004c

080020b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_GetSysClockFreq+0x158>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d007      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x32>
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d008      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x38>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 808d 	bne.w	80021fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020e6:	60bb      	str	r3, [r7, #8]
       break;
 80020e8:	e08c      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ea:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 80020ec:	60bb      	str	r3, [r7, #8]
      break;
 80020ee:	e089      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f0:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_GetSysClockFreq+0x158>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020fa:	4b45      	ldr	r3, [pc, #276]	; (8002210 <HAL_RCC_GetSysClockFreq+0x158>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d023      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002106:	4b42      	ldr	r3, [pc, #264]	; (8002210 <HAL_RCC_GetSysClockFreq+0x158>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	ea03 0501 	and.w	r5, r3, r1
 800211c:	ea04 0602 	and.w	r6, r4, r2
 8002120:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 8002122:	fb02 f106 	mul.w	r1, r2, r6
 8002126:	2200      	movs	r2, #0
 8002128:	fb02 f205 	mul.w	r2, r2, r5
 800212c:	440a      	add	r2, r1
 800212e:	493a      	ldr	r1, [pc, #232]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 8002130:	fba5 0101 	umull	r0, r1, r5, r1
 8002134:	1853      	adds	r3, r2, r1
 8002136:	4619      	mov	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f04f 0400 	mov.w	r4, #0
 800213e:	461a      	mov	r2, r3
 8002140:	4623      	mov	r3, r4
 8002142:	f7fe f89d 	bl	8000280 <__aeabi_uldivmod>
 8002146:	4603      	mov	r3, r0
 8002148:	460c      	mov	r4, r1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e049      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214e:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_RCC_GetSysClockFreq+0x158>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	f04f 0400 	mov.w	r4, #0
 8002158:	f240 11ff 	movw	r1, #511	; 0x1ff
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	ea03 0501 	and.w	r5, r3, r1
 8002164:	ea04 0602 	and.w	r6, r4, r2
 8002168:	4629      	mov	r1, r5
 800216a:	4632      	mov	r2, r6
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	f04f 0400 	mov.w	r4, #0
 8002174:	0154      	lsls	r4, r2, #5
 8002176:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800217a:	014b      	lsls	r3, r1, #5
 800217c:	4619      	mov	r1, r3
 800217e:	4622      	mov	r2, r4
 8002180:	1b49      	subs	r1, r1, r5
 8002182:	eb62 0206 	sbc.w	r2, r2, r6
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	f04f 0400 	mov.w	r4, #0
 800218e:	0194      	lsls	r4, r2, #6
 8002190:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002194:	018b      	lsls	r3, r1, #6
 8002196:	1a5b      	subs	r3, r3, r1
 8002198:	eb64 0402 	sbc.w	r4, r4, r2
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	00e2      	lsls	r2, r4, #3
 80021a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021aa:	00d9      	lsls	r1, r3, #3
 80021ac:	460b      	mov	r3, r1
 80021ae:	4614      	mov	r4, r2
 80021b0:	195b      	adds	r3, r3, r5
 80021b2:	eb44 0406 	adc.w	r4, r4, r6
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	02a2      	lsls	r2, r4, #10
 80021c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021c4:	0299      	lsls	r1, r3, #10
 80021c6:	460b      	mov	r3, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	4621      	mov	r1, r4
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	461a      	mov	r2, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	f7fe f852 	bl	8000280 <__aeabi_uldivmod>
 80021dc:	4603      	mov	r3, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_GetSysClockFreq+0x158>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	3301      	adds	r3, #1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	60bb      	str	r3, [r7, #8]
      break;
 80021fc:	e002      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002200:	60bb      	str	r3, [r7, #8]
      break;
 8002202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002204:	68bb      	ldr	r3, [r7, #8]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	00f42400 	.word	0x00f42400
 8002218:	016e3600 	.word	0x016e3600

0800221c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_RCC_GetHCLKFreq+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000005c 	.word	0x2000005c

08002234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002238:	f7ff fff0 	bl	800221c <HAL_RCC_GetHCLKFreq>
 800223c:	4601      	mov	r1, r0
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	0a9b      	lsrs	r3, r3, #10
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4a03      	ldr	r2, [pc, #12]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40023800 	.word	0x40023800
 8002258:	080052a8 	.word	0x080052a8

0800225c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002260:	f7ff ffdc 	bl	800221c <HAL_RCC_GetHCLKFreq>
 8002264:	4601      	mov	r1, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0b5b      	lsrs	r3, r3, #13
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	080052a8 	.word	0x080052a8

08002284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e03f      	b.n	8002316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f001 fba6 	bl	80039fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	; 0x24
 80022b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f90b 	bl	80024e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b088      	sub	sp, #32
 8002322:	af02      	add	r7, sp, #8
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	f040 8083 	bne.w	8002446 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_UART_Transmit+0x2e>
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e07b      	b.n	8002448 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_UART_Transmit+0x40>
 800235a:	2302      	movs	r3, #2
 800235c:	e074      	b.n	8002448 <HAL_UART_Transmit+0x12a>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2221      	movs	r2, #33	; 0x21
 8002370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002374:	f7fe f96a 	bl	800064c <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002386:	e042      	b.n	800240e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239e:	d122      	bne.n	80023e6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f850 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e046      	b.n	8002448 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3302      	adds	r3, #2
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	e017      	b.n	800240e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3301      	adds	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	e013      	b.n	800240e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f82d 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e023      	b.n	8002448 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	60ba      	str	r2, [r7, #8]
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1b7      	bne.n	8002388 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2200      	movs	r2, #0
 8002420:	2140      	movs	r1, #64	; 0x40
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f814 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e00a      	b.n	8002448 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002460:	e02c      	b.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d028      	beq.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <UART_WaitOnFlagUntilTimeout+0x30>
 8002470:	f7fe f8ec 	bl	800064c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	429a      	cmp	r2, r3
 800247e:	d21d      	bcs.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800248e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e00f      	b.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d0c3      	beq.n	8002462 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002524:	f023 030c 	bic.w	r3, r3, #12
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	430b      	orrs	r3, r1
 8002530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002550:	f040 80e4 	bne.w	800271c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4aab      	ldr	r2, [pc, #684]	; (8002808 <UART_SetConfig+0x324>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <UART_SetConfig+0x84>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4aaa      	ldr	r2, [pc, #680]	; (800280c <UART_SetConfig+0x328>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d16c      	bne.n	8002642 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002568:	f7ff fe78 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 800256c:	4602      	mov	r2, r0
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009a      	lsls	r2, r3, #2
 8002576:	441a      	add	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	4aa3      	ldr	r2, [pc, #652]	; (8002810 <UART_SetConfig+0x32c>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	011c      	lsls	r4, r3, #4
 800258c:	f7ff fe66 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002590:	4602      	mov	r2, r0
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	009a      	lsls	r2, r3, #2
 800259a:	441a      	add	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80025a6:	f7ff fe59 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009a      	lsls	r2, r3, #2
 80025b4:	441a      	add	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	4a93      	ldr	r2, [pc, #588]	; (8002810 <UART_SetConfig+0x32c>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2264      	movs	r2, #100	; 0x64
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	1aeb      	subs	r3, r5, r3
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	3332      	adds	r3, #50	; 0x32
 80025d4:	4a8e      	ldr	r2, [pc, #568]	; (8002810 <UART_SetConfig+0x32c>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025e2:	441c      	add	r4, r3
 80025e4:	f7ff fe3a 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	441a      	add	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80025fe:	f7ff fe2d 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002602:	4602      	mov	r2, r0
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	4a7d      	ldr	r2, [pc, #500]	; (8002810 <UART_SetConfig+0x32c>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2264      	movs	r2, #100	; 0x64
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	1aeb      	subs	r3, r5, r3
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	3332      	adds	r3, #50	; 0x32
 800262c:	4a78      	ldr	r2, [pc, #480]	; (8002810 <UART_SetConfig+0x32c>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	f003 0207 	and.w	r2, r3, #7
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4422      	add	r2, r4
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	e154      	b.n	80028ec <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002642:	f7ff fdf7 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002646:	4602      	mov	r2, r0
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	4a6c      	ldr	r2, [pc, #432]	; (8002810 <UART_SetConfig+0x32c>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	011c      	lsls	r4, r3, #4
 8002666:	f7ff fde5 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 800266a:	4602      	mov	r2, r0
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	009a      	lsls	r2, r3, #2
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002680:	f7ff fdd8 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002684:	4602      	mov	r2, r0
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	009a      	lsls	r2, r3, #2
 800268e:	441a      	add	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4a5d      	ldr	r2, [pc, #372]	; (8002810 <UART_SetConfig+0x32c>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	2264      	movs	r2, #100	; 0x64
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	1aeb      	subs	r3, r5, r3
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3332      	adds	r3, #50	; 0x32
 80026ae:	4a58      	ldr	r2, [pc, #352]	; (8002810 <UART_SetConfig+0x32c>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026bc:	441c      	add	r4, r3
 80026be:	f7ff fdb9 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009a      	lsls	r2, r3, #2
 80026cc:	441a      	add	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fbb2 f5f3 	udiv	r5, r2, r3
 80026d8:	f7ff fdac 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009a      	lsls	r2, r3, #2
 80026e6:	441a      	add	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	4a47      	ldr	r2, [pc, #284]	; (8002810 <UART_SetConfig+0x32c>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	2264      	movs	r2, #100	; 0x64
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	1aeb      	subs	r3, r5, r3
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	3332      	adds	r3, #50	; 0x32
 8002706:	4a42      	ldr	r2, [pc, #264]	; (8002810 <UART_SetConfig+0x32c>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	f003 0207 	and.w	r2, r3, #7
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4422      	add	r2, r4
 8002718:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800271a:	e0e7      	b.n	80028ec <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a39      	ldr	r2, [pc, #228]	; (8002808 <UART_SetConfig+0x324>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <UART_SetConfig+0x24c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a38      	ldr	r2, [pc, #224]	; (800280c <UART_SetConfig+0x328>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d171      	bne.n	8002814 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002730:	f7ff fd94 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002734:	4602      	mov	r2, r0
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	009a      	lsls	r2, r3, #2
 800273e:	441a      	add	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4a31      	ldr	r2, [pc, #196]	; (8002810 <UART_SetConfig+0x32c>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	011c      	lsls	r4, r3, #4
 8002754:	f7ff fd82 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002758:	4602      	mov	r2, r0
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	009a      	lsls	r2, r3, #2
 8002762:	441a      	add	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	fbb2 f5f3 	udiv	r5, r2, r3
 800276e:	f7ff fd75 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002772:	4602      	mov	r2, r0
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009a      	lsls	r2, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <UART_SetConfig+0x32c>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2264      	movs	r2, #100	; 0x64
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	1aeb      	subs	r3, r5, r3
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	3332      	adds	r3, #50	; 0x32
 800279c:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <UART_SetConfig+0x32c>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	441c      	add	r4, r3
 80027aa:	f7ff fd57 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80027c4:	f7ff fd4a 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009a      	lsls	r2, r3, #2
 80027d2:	441a      	add	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <UART_SetConfig+0x32c>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	2264      	movs	r2, #100	; 0x64
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	1aeb      	subs	r3, r5, r3
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	3332      	adds	r3, #50	; 0x32
 80027f2:	4a07      	ldr	r2, [pc, #28]	; (8002810 <UART_SetConfig+0x32c>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	f003 020f 	and.w	r2, r3, #15
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4422      	add	r2, r4
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	e071      	b.n	80028ec <UART_SetConfig+0x408>
 8002808:	40011000 	.word	0x40011000
 800280c:	40011400 	.word	0x40011400
 8002810:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002814:	f7ff fd0e 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002818:	4602      	mov	r2, r0
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009a      	lsls	r2, r3, #2
 8002822:	441a      	add	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <UART_SetConfig+0x410>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	011c      	lsls	r4, r3, #4
 8002838:	f7ff fcfc 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 800283c:	4602      	mov	r2, r0
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	009a      	lsls	r2, r3, #2
 8002846:	441a      	add	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002852:	f7ff fcef 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002856:	4602      	mov	r2, r0
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009a      	lsls	r2, r3, #2
 8002860:	441a      	add	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <UART_SetConfig+0x410>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2264      	movs	r2, #100	; 0x64
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	1aeb      	subs	r3, r5, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	3332      	adds	r3, #50	; 0x32
 8002880:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <UART_SetConfig+0x410>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288c:	441c      	add	r4, r3
 800288e:	f7ff fcd1 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002892:	4602      	mov	r2, r0
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	009a      	lsls	r2, r3, #2
 800289c:	441a      	add	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80028a8:	f7ff fcc4 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	441a      	add	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <UART_SetConfig+0x410>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	2264      	movs	r2, #100	; 0x64
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	1aeb      	subs	r3, r5, r3
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	3332      	adds	r3, #50	; 0x32
 80028d6:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <UART_SetConfig+0x410>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4422      	add	r2, r4
 80028e8:	609a      	str	r2, [r3, #8]
}
 80028ea:	e7ff      	b.n	80028ec <UART_SetConfig+0x408>
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bdb0      	pop	{r4, r5, r7, pc}
 80028f4:	51eb851f 	.word	0x51eb851f

080028f8 <display>:

unsigned char tem_suffix[] = " °C";
unsigned char hum_suffix[] = " %RH";

unsigned char display(void *handle, void *ptr, unsigned char type)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	71fb      	strb	r3, [r7, #7]
    float Tem = ((SHT3x_Sensor_Param *)ptr)->Temperature;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
    float hum = ((SHT3x_Sensor_Param *)ptr)->Humidity;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28

    int tmp;
    unsigned char tem_unit[5], hum_unit[5];

    tmp = (int)(Tem * 100);
 8002912:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002916:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002af0 <display+0x1f8>
 800291a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002922:	ee17 3a90 	vmov	r3, s15
 8002926:	627b      	str	r3, [r7, #36]	; 0x24

    tem_unit[4] = tmp / 1 % 10 + '0';
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <display+0x1fc>)
 800292c:	fb83 1302 	smull	r1, r3, r3, r2
 8002930:	1099      	asrs	r1, r3, #2
 8002932:	17d3      	asrs	r3, r2, #31
 8002934:	1ac9      	subs	r1, r1, r3
 8002936:	460b      	mov	r3, r1
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	1ad1      	subs	r1, r2, r3
 8002940:	b2cb      	uxtb	r3, r1
 8002942:	3330      	adds	r3, #48	; 0x30
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f887 3020 	strb.w	r3, [r7, #32]
    tem_unit[3] = tmp / 10 % 10 + '0';
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	4a69      	ldr	r2, [pc, #420]	; (8002af4 <display+0x1fc>)
 800294e:	fb82 1203 	smull	r1, r2, r2, r3
 8002952:	1092      	asrs	r2, r2, #2
 8002954:	17db      	asrs	r3, r3, #31
 8002956:	1ad2      	subs	r2, r2, r3
 8002958:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <display+0x1fc>)
 800295a:	fb83 1302 	smull	r1, r3, r3, r2
 800295e:	1099      	asrs	r1, r3, #2
 8002960:	17d3      	asrs	r3, r2, #31
 8002962:	1ac9      	subs	r1, r1, r3
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	1ad1      	subs	r1, r2, r3
 800296e:	b2cb      	uxtb	r3, r1
 8002970:	3330      	adds	r3, #48	; 0x30
 8002972:	b2db      	uxtb	r3, r3
 8002974:	77fb      	strb	r3, [r7, #31]
    tem_unit[2] = '.';
 8002976:	232e      	movs	r3, #46	; 0x2e
 8002978:	77bb      	strb	r3, [r7, #30]
    tem_unit[1] = tmp / 100 % 10 + '0';
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	4a5e      	ldr	r2, [pc, #376]	; (8002af8 <display+0x200>)
 800297e:	fb82 1203 	smull	r1, r2, r2, r3
 8002982:	1152      	asrs	r2, r2, #5
 8002984:	17db      	asrs	r3, r3, #31
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	4b5a      	ldr	r3, [pc, #360]	; (8002af4 <display+0x1fc>)
 800298a:	fb83 1302 	smull	r1, r3, r3, r2
 800298e:	1099      	asrs	r1, r3, #2
 8002990:	17d3      	asrs	r3, r2, #31
 8002992:	1ac9      	subs	r1, r1, r3
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	1ad1      	subs	r1, r2, r3
 800299e:	b2cb      	uxtb	r3, r1
 80029a0:	3330      	adds	r3, #48	; 0x30
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	777b      	strb	r3, [r7, #29]
    tem_unit[0] = tmp / 1000 % 10 + '0';
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <display+0x204>)
 80029aa:	fb82 1203 	smull	r1, r2, r2, r3
 80029ae:	1192      	asrs	r2, r2, #6
 80029b0:	17db      	asrs	r3, r3, #31
 80029b2:	1ad2      	subs	r2, r2, r3
 80029b4:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <display+0x1fc>)
 80029b6:	fb83 1302 	smull	r1, r3, r3, r2
 80029ba:	1099      	asrs	r1, r3, #2
 80029bc:	17d3      	asrs	r3, r2, #31
 80029be:	1ac9      	subs	r1, r1, r3
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	1ad1      	subs	r1, r2, r3
 80029ca:	b2cb      	uxtb	r3, r1
 80029cc:	3330      	adds	r3, #48	; 0x30
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	773b      	strb	r3, [r7, #28]

    tmp = (int)(hum * 100);
 80029d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029d6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002af0 <display+0x1f8>
 80029da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e2:	ee17 3a90 	vmov	r3, s15
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24

    hum_unit[4] = tmp / 1 % 10 + '0';
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <display+0x1fc>)
 80029ec:	fb83 1302 	smull	r1, r3, r3, r2
 80029f0:	1099      	asrs	r1, r3, #2
 80029f2:	17d3      	asrs	r3, r2, #31
 80029f4:	1ac9      	subs	r1, r1, r3
 80029f6:	460b      	mov	r3, r1
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	1ad1      	subs	r1, r2, r3
 8002a00:	b2cb      	uxtb	r3, r1
 8002a02:	3330      	adds	r3, #48	; 0x30
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	763b      	strb	r3, [r7, #24]
    hum_unit[3] = tmp / 10 % 10 + '0';
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	4a3a      	ldr	r2, [pc, #232]	; (8002af4 <display+0x1fc>)
 8002a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a10:	1092      	asrs	r2, r2, #2
 8002a12:	17db      	asrs	r3, r3, #31
 8002a14:	1ad2      	subs	r2, r2, r3
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <display+0x1fc>)
 8002a18:	fb83 1302 	smull	r1, r3, r3, r2
 8002a1c:	1099      	asrs	r1, r3, #2
 8002a1e:	17d3      	asrs	r3, r2, #31
 8002a20:	1ac9      	subs	r1, r1, r3
 8002a22:	460b      	mov	r3, r1
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	1ad1      	subs	r1, r2, r3
 8002a2c:	b2cb      	uxtb	r3, r1
 8002a2e:	3330      	adds	r3, #48	; 0x30
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	75fb      	strb	r3, [r7, #23]
    hum_unit[2] = '.';
 8002a34:	232e      	movs	r3, #46	; 0x2e
 8002a36:	75bb      	strb	r3, [r7, #22]
    hum_unit[1] = tmp / 100 % 10 + '0';
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <display+0x200>)
 8002a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a40:	1152      	asrs	r2, r2, #5
 8002a42:	17db      	asrs	r3, r3, #31
 8002a44:	1ad2      	subs	r2, r2, r3
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <display+0x1fc>)
 8002a48:	fb83 1302 	smull	r1, r3, r3, r2
 8002a4c:	1099      	asrs	r1, r3, #2
 8002a4e:	17d3      	asrs	r3, r2, #31
 8002a50:	1ac9      	subs	r1, r1, r3
 8002a52:	460b      	mov	r3, r1
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	1ad1      	subs	r1, r2, r3
 8002a5c:	b2cb      	uxtb	r3, r1
 8002a5e:	3330      	adds	r3, #48	; 0x30
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	757b      	strb	r3, [r7, #21]
    hum_unit[0] = tmp / 1000 % 10 + '0';
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	4a25      	ldr	r2, [pc, #148]	; (8002afc <display+0x204>)
 8002a68:	fb82 1203 	smull	r1, r2, r2, r3
 8002a6c:	1192      	asrs	r2, r2, #6
 8002a6e:	17db      	asrs	r3, r3, #31
 8002a70:	1ad2      	subs	r2, r2, r3
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <display+0x1fc>)
 8002a74:	fb83 1302 	smull	r1, r3, r3, r2
 8002a78:	1099      	asrs	r1, r3, #2
 8002a7a:	17d3      	asrs	r3, r2, #31
 8002a7c:	1ac9      	subs	r1, r1, r3
 8002a7e:	460b      	mov	r3, r1
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	1ad1      	subs	r1, r2, r3
 8002a88:	b2cb      	uxtb	r3, r1
 8002a8a:	3330      	adds	r3, #48	; 0x30
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	753b      	strb	r3, [r7, #20]


    uart_multibyte_send(tem_title, sizeof(tem_title));
 8002a90:	2115      	movs	r1, #21
 8002a92:	481b      	ldr	r0, [pc, #108]	; (8002b00 <display+0x208>)
 8002a94:	f001 f8f8 	bl	8003c88 <uart_multibyte_send>
    uart_multibyte_send(tem_unit, sizeof(tem_unit));
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 f8f2 	bl	8003c88 <uart_multibyte_send>
    uart_multibyte_send(tem_suffix, sizeof(tem_suffix));
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	4817      	ldr	r0, [pc, #92]	; (8002b04 <display+0x20c>)
 8002aa8:	f001 f8ee 	bl	8003c88 <uart_multibyte_send>

    OLED_ShowString_N(50,3, tem_unit, sizeof(tem_unit));
 8002aac:	f107 021c 	add.w	r2, r7, #28
 8002ab0:	2305      	movs	r3, #5
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	2032      	movs	r0, #50	; 0x32
 8002ab6:	f000 fc03 	bl	80032c0 <OLED_ShowString_N>

    uart_multibyte_send(hum_title, sizeof(hum_title));
 8002aba:	2112      	movs	r1, #18
 8002abc:	4812      	ldr	r0, [pc, #72]	; (8002b08 <display+0x210>)
 8002abe:	f001 f8e3 	bl	8003c88 <uart_multibyte_send>
    uart_multibyte_send(hum_unit, sizeof(hum_unit));
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	2105      	movs	r1, #5
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 f8dd 	bl	8003c88 <uart_multibyte_send>
    uart_multibyte_send(hum_suffix, sizeof(hum_suffix));
 8002ace:	2105      	movs	r1, #5
 8002ad0:	480e      	ldr	r0, [pc, #56]	; (8002b0c <display+0x214>)
 8002ad2:	f001 f8d9 	bl	8003c88 <uart_multibyte_send>

    OLED_ShowString_N(50,5, hum_unit, sizeof(hum_unit));
 8002ad6:	f107 0214 	add.w	r2, r7, #20
 8002ada:	2305      	movs	r3, #5
 8002adc:	2105      	movs	r1, #5
 8002ade:	2032      	movs	r0, #50	; 0x32
 8002ae0:	f000 fbee 	bl	80032c0 <OLED_ShowString_N>

    return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3730      	adds	r7, #48	; 0x30
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	42c80000 	.word	0x42c80000
 8002af4:	66666667 	.word	0x66666667
 8002af8:	51eb851f 	.word	0x51eb851f
 8002afc:	10624dd3 	.word	0x10624dd3
 8002b00:	20000008 	.word	0x20000008
 8002b04:	20000034 	.word	0x20000034
 8002b08:	20000020 	.word	0x20000020
 8002b0c:	2000003c 	.word	0x2000003c

08002b10 <gy_30_send_command>:

extern I2C_HandleTypeDef hi2c3;
#define GY30_I2C	&hi2c3

void gy_30_send_command(uint8_t command)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(GY30_I2C, GY_30_ADDR, &command, 1, 200);
 8002b1a:	1dfa      	adds	r2, r7, #7
 8002b1c:	23c8      	movs	r3, #200	; 0xc8
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2301      	movs	r3, #1
 8002b22:	2146      	movs	r1, #70	; 0x46
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <gy_30_send_command+0x24>)
 8002b26:	f7fe f969 	bl	8000dfc <HAL_I2C_Master_Transmit>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200000f8 	.word	0x200000f8

08002b38 <gy_30_read_data>:

uint16_t gy_30_read_data(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive(GY30_I2C, GY_30_ADDR, GY30_DATA, 2, 200);
 8002b3e:	23c8      	movs	r3, #200	; 0xc8
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2302      	movs	r3, #2
 8002b44:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <gy_30_read_data+0x30>)
 8002b46:	2146      	movs	r1, #70	; 0x46
 8002b48:	4808      	ldr	r0, [pc, #32]	; (8002b6c <gy_30_read_data+0x34>)
 8002b4a:	f7fe fa55 	bl	8000ff8 <HAL_I2C_Master_Receive>
	return ((GY30_DATA[0] << 8) | GY30_DATA[1]);
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <gy_30_read_data+0x30>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	b21a      	sxth	r2, r3
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <gy_30_read_data+0x30>)
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	b21b      	sxth	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	b29b      	uxth	r3, r3
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200000e0 	.word	0x200000e0
 8002b6c:	200000f8 	.word	0x200000f8

08002b70 <gy_30_display>:

void gy_30_display(uint16_t lx)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
	uint8_t symbol[6] = {0x0};
 8002b7a:	f107 030c 	add.w	r3, r7, #12
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	809a      	strh	r2, [r3, #4]
	symbol[5] = ' ';
 8002b84:	2320      	movs	r3, #32
 8002b86:	747b      	strb	r3, [r7, #17]
	symbol[4] = lx / 1 % 10 + '0';
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <gy_30_display+0x130>)
 8002b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b90:	08d9      	lsrs	r1, r3, #3
 8002b92:	460b      	mov	r3, r1
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3330      	adds	r3, #48	; 0x30
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	743b      	strb	r3, [r7, #16]
	symbol[3] = lx / 10 % 10 + '0';
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4a3d      	ldr	r2, [pc, #244]	; (8002ca0 <gy_30_display+0x130>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	08db      	lsrs	r3, r3, #3
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <gy_30_display+0x130>)
 8002bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb8:	08d9      	lsrs	r1, r3, #3
 8002bba:	460b      	mov	r3, r1
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3330      	adds	r3, #48	; 0x30
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	73fb      	strb	r3, [r7, #15]
	symbol[2] = lx / 100 % 10 + '0';
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <gy_30_display+0x134>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <gy_30_display+0x130>)
 8002bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002be0:	08d9      	lsrs	r1, r3, #3
 8002be2:	460b      	mov	r3, r1
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3330      	adds	r3, #48	; 0x30
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	73bb      	strb	r3, [r7, #14]
	symbol[1] = lx / 1000 % 10 + '0';
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <gy_30_display+0x138>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	099b      	lsrs	r3, r3, #6
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <gy_30_display+0x130>)
 8002c04:	fba3 1302 	umull	r1, r3, r3, r2
 8002c08:	08d9      	lsrs	r1, r3, #3
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3330      	adds	r3, #48	; 0x30
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	737b      	strb	r3, [r7, #13]
	symbol[0] = lx / 10000 % 10 + '0';
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <gy_30_display+0x13c>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0b5b      	lsrs	r3, r3, #13
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <gy_30_display+0x130>)
 8002c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c30:	08d9      	lsrs	r1, r3, #3
 8002c32:	460b      	mov	r3, r1
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3330      	adds	r3, #48	; 0x30
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	733b      	strb	r3, [r7, #12]

	uart_multibyte_send(gy_30_title, sizeof(gy_30_title));
 8002c46:	2112      	movs	r1, #18
 8002c48:	4819      	ldr	r0, [pc, #100]	; (8002cb0 <gy_30_display+0x140>)
 8002c4a:	f001 f81d 	bl	8003c88 <uart_multibyte_send>

	for(int i = 0; i < 5; i++) {
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e01e      	b.n	8002c92 <gy_30_display+0x122>
		if(symbol[i] != '0') {
 8002c54:	f107 020c 	add.w	r2, r7, #12
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b30      	cmp	r3, #48	; 0x30
 8002c60:	d00d      	beq.n	8002c7e <gy_30_display+0x10e>
			uart_multibyte_send(&symbol[i], 5-i);
 8002c62:	f107 020c 	add.w	r2, r7, #12
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	441a      	add	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f1c3 0305 	rsb	r3, r3, #5
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f001 f806 	bl	8003c88 <uart_multibyte_send>
			break;
 8002c7c:	e00c      	b.n	8002c98 <gy_30_display+0x128>
		}
		else
			uart_multibyte_send(&symbol[5], 1);
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	3305      	adds	r3, #5
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fffe 	bl	8003c88 <uart_multibyte_send>
	for(int i = 0; i < 5; i++) {
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	dddd      	ble.n	8002c54 <gy_30_display+0xe4>
	}

}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	cccccccd 	.word	0xcccccccd
 8002ca4:	51eb851f 	.word	0x51eb851f
 8002ca8:	10624dd3 	.word	0x10624dd3
 8002cac:	d1b71759 	.word	0xd1b71759
 8002cb0:	20000044 	.word	0x20000044

08002cb4 <gy_30_test>:

void gy_30_test(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
	uint16_t lx;

	gy_30_send_command(ONE_RIME_H_MODE);
 8002cba:	2020      	movs	r0, #32
 8002cbc:	f7ff ff28 	bl	8002b10 <gy_30_send_command>
	HAL_Delay(160);
 8002cc0:	20a0      	movs	r0, #160	; 0xa0
 8002cc2:	f7fd fccf 	bl	8000664 <HAL_Delay>
	lx = gy_30_read_data();
 8002cc6:	f7ff ff37 	bl	8002b38 <gy_30_read_data>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80fb      	strh	r3, [r7, #6]
	gy_30_display(lx);
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff4d 	bl	8002b70 <gy_30_display>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8002ce8:	1d39      	adds	r1, r7, #4
 8002cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4803      	ldr	r0, [pc, #12]	; (8002d00 <__io_putchar+0x20>)
 8002cf2:	f7ff fb14 	bl	800231e <HAL_UART_Transmit>
	return ch;
 8002cf6:	687b      	ldr	r3, [r7, #4]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200001f4 	.word	0x200001f4

08002d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d08:	f7fd fc3a 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d0c:	f000 f816 	bl	8002d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d10:	f000 f926 	bl	8002f60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d14:	f000 f870 	bl	8002df8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002d18:	f000 f89c 	bl	8002e54 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002d1c:	f000 f8c8 	bl	8002eb0 <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8002d20:	f000 f8f4 	bl	8002f0c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("This is a STM32F411CEU6\n\r");
 8002d24:	4804      	ldr	r0, [pc, #16]	; (8002d38 <main+0x34>)
 8002d26:	f001 f821 	bl	8003d6c <iprintf>
  oled_display_memu();
 8002d2a:	f000 fba3 	bl	8003474 <oled_display_memu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sht31_test();
 8002d2e:	f000 fd3d 	bl	80037ac <sht31_test>
	  gy_30_test();
 8002d32:	f7ff ffbf 	bl	8002cb4 <gy_30_test>
	  sht31_test();
 8002d36:	e7fa      	b.n	8002d2e <main+0x2a>
 8002d38:	08004b4c 	.word	0x08004b4c

08002d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b094      	sub	sp, #80	; 0x50
 8002d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d42:	f107 0320 	add.w	r3, r7, #32
 8002d46:	2230      	movs	r2, #48	; 0x30
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 f806 	bl	8003d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <SystemClock_Config+0xb4>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <SystemClock_Config+0xb4>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <SystemClock_Config+0xb4>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <SystemClock_Config+0xb8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <SystemClock_Config+0xb8>)
 8002d86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <SystemClock_Config+0xb8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da6:	f107 0320 	add.w	r3, r7, #32
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fe54 	bl	8001a58 <HAL_RCC_OscConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002db6:	f000 f925 	bl	8003004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dba:	230f      	movs	r3, #15
 8002dbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f881 	bl	8001edc <HAL_RCC_ClockConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002de0:	f000 f910 	bl	8003004 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8002de4:	f7ff f95c 	bl	80020a0 <HAL_RCC_EnableCSS>
}
 8002de8:	bf00      	nop
 8002dea:	3750      	adds	r7, #80	; 0x50
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000

08002df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <MX_I2C1_Init+0x54>)
 8002e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <MX_I2C1_Init+0x58>)
 8002e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e36:	f7fd feb9 	bl	8000bac <HAL_I2C_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e40:	f000 f8e0 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	2000014c 	.word	0x2000014c
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	000186a0 	.word	0x000186a0

08002e54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <MX_I2C2_Init+0x54>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e60:	4a12      	ldr	r2, [pc, #72]	; (8002eac <MX_I2C2_Init+0x58>)
 8002e62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <MX_I2C2_Init+0x50>)
 8002e92:	f7fd fe8b 	bl	8000bac <HAL_I2C_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e9c:	f000 f8b2 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200001a0 	.word	0x200001a0
 8002ea8:	40005800 	.word	0x40005800
 8002eac:	000186a0 	.word	0x000186a0

08002eb0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002eb6:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <MX_I2C3_Init+0x54>)
 8002eb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002ebc:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <MX_I2C3_Init+0x58>)
 8002ebe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ed2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002eec:	4804      	ldr	r0, [pc, #16]	; (8002f00 <MX_I2C3_Init+0x50>)
 8002eee:	f7fd fe5d 	bl	8000bac <HAL_I2C_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002ef8:	f000 f884 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200000f8 	.word	0x200000f8
 8002f04:	40005c00 	.word	0x40005c00
 8002f08:	000186a0 	.word	0x000186a0

08002f0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <MX_USART6_UART_Init+0x50>)
 8002f14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f32:	220c      	movs	r2, #12
 8002f34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f42:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_USART6_UART_Init+0x4c>)
 8002f44:	f7ff f99e 	bl	8002284 <HAL_UART_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002f4e:	f000 f859 	bl	8003004 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200001f4 	.word	0x200001f4
 8002f5c:	40011400 	.word	0x40011400

08002f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f66:	f107 030c 	add.w	r3, r7, #12
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <MX_GPIO_Init+0x9c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Blue_Pin|Red_Pin|Green_Pin, GPIO_PIN_RESET);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002fd0:	480b      	ldr	r0, [pc, #44]	; (8003000 <MX_GPIO_Init+0xa0>)
 8002fd2:	f7fd fdd1 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Blue_Pin Red_Pin Green_Pin */
  GPIO_InitStruct.Pin = Blue_Pin|Red_Pin|Green_Pin;
 8002fd6:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	4619      	mov	r1, r3
 8002fee:	4804      	ldr	r0, [pc, #16]	; (8003000 <MX_GPIO_Init+0xa0>)
 8002ff0:	f7fd fc40 	bl	8000874 <HAL_GPIO_Init>

}
 8002ff4:	bf00      	nop
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020400 	.word	0x40020400

08003004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <Write_IIC_Command>:

/**********************************************
// IIC Write Command
**********************************************/
void Write_IIC_Command(unsigned char IIC_Command)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af02      	add	r7, sp, #8
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
    oled_cmd[1] = IIC_Command;
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <Write_IIC_Command+0x3c>)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	7053      	strb	r3, [r2, #1]

    if(HAL_I2C_Master_Transmit(&hi2c2, oled_addr, oled_cmd, 2, 1000) != HAL_OK) {
 8003024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2302      	movs	r3, #2
 800302c:	4a08      	ldr	r2, [pc, #32]	; (8003050 <Write_IIC_Command+0x3c>)
 800302e:	2178      	movs	r1, #120	; 0x78
 8003030:	4808      	ldr	r0, [pc, #32]	; (8003054 <Write_IIC_Command+0x40>)
 8003032:	f7fd fee3 	bl	8000dfc <HAL_I2C_Master_Transmit>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <Write_IIC_Command+0x34>
    	HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 800303c:	2201      	movs	r2, #1
 800303e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <Write_IIC_Command+0x44>)
 8003044:	f7fd fd98 	bl	8000b78 <HAL_GPIO_WritePin>
    }
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200000e4 	.word	0x200000e4
 8003054:	200001a0 	.word	0x200001a0
 8003058:	40020400 	.word	0x40020400

0800305c <Write_IIC_Data>:
/**********************************************
// IIC Write Data
**********************************************/
void Write_IIC_Data(unsigned char IIC_Data)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af02      	add	r7, sp, #8
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
    oled_data[1] = IIC_Data;
 8003066:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <Write_IIC_Data+0x3c>)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	7053      	strb	r3, [r2, #1]

    if(HAL_I2C_Master_Transmit(&hi2c2, oled_addr, oled_data, 2, 1000) != HAL_OK) {
 800306c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	2302      	movs	r3, #2
 8003074:	4a08      	ldr	r2, [pc, #32]	; (8003098 <Write_IIC_Data+0x3c>)
 8003076:	2178      	movs	r1, #120	; 0x78
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <Write_IIC_Data+0x40>)
 800307a:	f7fd febf 	bl	8000dfc <HAL_I2C_Master_Transmit>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <Write_IIC_Data+0x34>
    	HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 8003084:	2201      	movs	r2, #1
 8003086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800308a:	4805      	ldr	r0, [pc, #20]	; (80030a0 <Write_IIC_Data+0x44>)
 800308c:	f7fd fd74 	bl	8000b78 <HAL_GPIO_WritePin>
    }
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000058 	.word	0x20000058
 800309c:	200001a0 	.word	0x200001a0
 80030a0:	40020400 	.word	0x40020400

080030a4 <OLED_WR_Byte>:

//向SSD1306写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(unsigned char data,unsigned char cmd)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	460a      	mov	r2, r1
 80030ae:	71fb      	strb	r3, [r7, #7]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71bb      	strb	r3, [r7, #6]
    if (cmd) {
 80030b4:	79bb      	ldrb	r3, [r7, #6]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <OLED_WR_Byte+0x20>
        Write_IIC_Data(data);
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ffcd 	bl	800305c <Write_IIC_Data>
    } else {
        Write_IIC_Command(data);
    }
}
 80030c2:	e003      	b.n	80030cc <OLED_WR_Byte+0x28>
        Write_IIC_Command(data);
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ffa4 	bl	8003014 <Write_IIC_Command>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	460a      	mov	r2, r1
 80030de:	71fb      	strb	r3, [r7, #7]
 80030e0:	4613      	mov	r3, r2
 80030e2:	71bb      	strb	r3, [r7, #6]
    OLED_WR_Byte(0xb0+y,OLED_CMD);
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	3b50      	subs	r3, #80	; 0x50
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ffd9 	bl	80030a4 <OLED_WR_Byte>
    OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0310 	orr.w	r3, r3, #16
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ffcf 	bl	80030a4 <OLED_WR_Byte>
    OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD);
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	f003 030e 	and.w	r3, r3, #14
 800310e:	b25b      	sxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b25b      	sxtb	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ffc2 	bl	80030a4 <OLED_WR_Byte>
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <OLED_Display_On>:

//开启OLED显示
void OLED_Display_On(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
    OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC����
 800312c:	2100      	movs	r1, #0
 800312e:	208d      	movs	r0, #141	; 0x8d
 8003130:	f7ff ffb8 	bl	80030a4 <OLED_WR_Byte>
    OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 8003134:	2100      	movs	r1, #0
 8003136:	2014      	movs	r0, #20
 8003138:	f7ff ffb4 	bl	80030a4 <OLED_WR_Byte>
    OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 800313c:	2100      	movs	r1, #0
 800313e:	20af      	movs	r0, #175	; 0xaf
 8003140:	f7ff ffb0 	bl	80030a4 <OLED_WR_Byte>
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}

08003148 <OLED_Display_Off>:

//关闭OLED显示
void OLED_Display_Off(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
    OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC����
 800314c:	2100      	movs	r1, #0
 800314e:	208d      	movs	r0, #141	; 0x8d
 8003150:	f7ff ffa8 	bl	80030a4 <OLED_WR_Byte>
    OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 8003154:	2100      	movs	r1, #0
 8003156:	2010      	movs	r0, #16
 8003158:	f7ff ffa4 	bl	80030a4 <OLED_WR_Byte>
    OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 800315c:	2100      	movs	r1, #0
 800315e:	20ae      	movs	r0, #174	; 0xae
 8003160:	f7ff ffa0 	bl	80030a4 <OLED_WR_Byte>
}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}

08003168 <OLED_Clear>:

//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
void OLED_Clear(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
    unsigned char i,n;
    for(i=0;i<8;i++)
 800316e:	2300      	movs	r3, #0
 8003170:	71fb      	strb	r3, [r7, #7]
 8003172:	e01e      	b.n	80031b2 <OLED_Clear+0x4a>
    {
        OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	3b50      	subs	r3, #80	; 0x50
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff91 	bl	80030a4 <OLED_WR_Byte>
        OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8003182:	2100      	movs	r1, #0
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff ff8d 	bl	80030a4 <OLED_WR_Byte>
        OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 800318a:	2100      	movs	r1, #0
 800318c:	2010      	movs	r0, #16
 800318e:	f7ff ff89 	bl	80030a4 <OLED_WR_Byte>
        for(n=0;n<130;n++)
 8003192:	2300      	movs	r3, #0
 8003194:	71bb      	strb	r3, [r7, #6]
 8003196:	e006      	b.n	80031a6 <OLED_Clear+0x3e>
            OLED_WR_Byte(0,OLED_DATA);
 8003198:	2101      	movs	r1, #1
 800319a:	2000      	movs	r0, #0
 800319c:	f7ff ff82 	bl	80030a4 <OLED_WR_Byte>
        for(n=0;n<130;n++)
 80031a0:	79bb      	ldrb	r3, [r7, #6]
 80031a2:	3301      	adds	r3, #1
 80031a4:	71bb      	strb	r3, [r7, #6]
 80031a6:	79bb      	ldrb	r3, [r7, #6]
 80031a8:	2b81      	cmp	r3, #129	; 0x81
 80031aa:	d9f5      	bls.n	8003198 <OLED_Clear+0x30>
    for(i=0;i<8;i++)
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	3301      	adds	r3, #1
 80031b0:	71fb      	strb	r3, [r7, #7]
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	2b07      	cmp	r3, #7
 80031b6:	d9dd      	bls.n	8003174 <OLED_Clear+0xc>
    } //更新显示
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	71fb      	strb	r3, [r7, #7]
 80031ca:	460b      	mov	r3, r1
 80031cc:	71bb      	strb	r3, [r7, #6]
 80031ce:	4613      	mov	r3, r2
 80031d0:	717b      	strb	r3, [r7, #5]
    unsigned char c=0,i=0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73bb      	strb	r3, [r7, #14]
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]
        c=chr-' ';//得到偏移后的值
 80031da:	797b      	ldrb	r3, [r7, #5]
 80031dc:	3b20      	subs	r3, #32
 80031de:	73bb      	strb	r3, [r7, #14]
        if(x>Max_Column-1){x=0;y=y+2;}
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	da04      	bge.n	80031f2 <OLED_ShowChar+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	71fb      	strb	r3, [r7, #7]
 80031ec:	79bb      	ldrb	r3, [r7, #6]
 80031ee:	3302      	adds	r3, #2
 80031f0:	71bb      	strb	r3, [r7, #6]
        if(SIZE ==16)
        {
            OLED_Set_Pos(x,y);
 80031f2:	79ba      	ldrb	r2, [r7, #6]
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff6b 	bl	80030d4 <OLED_Set_Pos>
            for(i=0;i<8;i++)
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	e00c      	b.n	800321e <OLED_ShowChar+0x5e>
            OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8003204:	7bbb      	ldrb	r3, [r7, #14]
 8003206:	011a      	lsls	r2, r3, #4
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	4413      	add	r3, r2
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <OLED_ShowChar+0xa4>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	2101      	movs	r1, #1
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff46 	bl	80030a4 <OLED_WR_Byte>
            for(i=0;i<8;i++)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	3301      	adds	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b07      	cmp	r3, #7
 8003222:	d9ef      	bls.n	8003204 <OLED_ShowChar+0x44>
            OLED_Set_Pos(x,y+1);
 8003224:	79bb      	ldrb	r3, [r7, #6]
 8003226:	3301      	adds	r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff ff50 	bl	80030d4 <OLED_Set_Pos>
            for(i=0;i<8;i++)
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e00d      	b.n	8003256 <OLED_ShowChar+0x96>
            OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 800323a:	7bbb      	ldrb	r3, [r7, #14]
 800323c:	011a      	lsls	r2, r3, #4
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	4413      	add	r3, r2
 8003242:	3308      	adds	r3, #8
 8003244:	4a07      	ldr	r2, [pc, #28]	; (8003264 <OLED_ShowChar+0xa4>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff2a 	bl	80030a4 <OLED_WR_Byte>
            for(i=0;i<8;i++)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	3301      	adds	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	2b07      	cmp	r3, #7
 800325a:	d9ee      	bls.n	800323a <OLED_ShowChar+0x7a>
        } else {
            OLED_Set_Pos(x,y+1);
            for(i=0;i<6;i++)
            OLED_WR_Byte(F6x8[c][i],OLED_DATA);
        }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	08004b68 	.word	0x08004b68

08003268 <OLED_ShowString>:
    }
}

//显示一个字符号串
void OLED_ShowString(unsigned char x,unsigned char y,unsigned char *chr)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	603a      	str	r2, [r7, #0]
 8003272:	71fb      	strb	r3, [r7, #7]
 8003274:	460b      	mov	r3, r1
 8003276:	71bb      	strb	r3, [r7, #6]
    unsigned char j=0;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
    while (chr[j]!='\0')
 800327c:	e016      	b.n	80032ac <OLED_ShowString+0x44>
    {
        OLED_ShowChar(x,y,chr[j]);
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	4413      	add	r3, r2
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	79b9      	ldrb	r1, [r7, #6]
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff98 	bl	80031c0 <OLED_ShowChar>
        x+=8;
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	3308      	adds	r3, #8
 8003294:	71fb      	strb	r3, [r7, #7]

        if(x>120)
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	2b78      	cmp	r3, #120	; 0x78
 800329a:	d904      	bls.n	80032a6 <OLED_ShowString+0x3e>
        {
            x=0;y+=2;
 800329c:	2300      	movs	r3, #0
 800329e:	71fb      	strb	r3, [r7, #7]
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	3302      	adds	r3, #2
 80032a4:	71bb      	strb	r3, [r7, #6]
        }
            j++;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	3301      	adds	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
    while (chr[j]!='\0')
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e2      	bne.n	800327e <OLED_ShowString+0x16>
    }
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <OLED_ShowString_N>:

//显示字符串，指定长度避免数组越界
void OLED_ShowString_N(unsigned char x,unsigned char y,unsigned char *chr, int size)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60ba      	str	r2, [r7, #8]
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	460b      	mov	r3, r1
 80032d0:	73bb      	strb	r3, [r7, #14]
    int j=0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
    while (j < size)
 80032d6:	e016      	b.n	8003306 <OLED_ShowString_N+0x46>
    {
        OLED_ShowChar(x,y,chr[j]);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	781a      	ldrb	r2, [r3, #0]
 80032e0:	7bb9      	ldrb	r1, [r7, #14]
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff6b 	bl	80031c0 <OLED_ShowChar>
        x+=8;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3308      	adds	r3, #8
 80032ee:	73fb      	strb	r3, [r7, #15]

        if(x>120)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b78      	cmp	r3, #120	; 0x78
 80032f4:	d904      	bls.n	8003300 <OLED_ShowString_N+0x40>
        {
            x=0;y+=2;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	7bbb      	ldrb	r3, [r7, #14]
 80032fc:	3302      	adds	r3, #2
 80032fe:	73bb      	strb	r3, [r7, #14]
        }
            j++;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
    while (j < size)
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	dbe4      	blt.n	80032d8 <OLED_ShowString_N+0x18>
    }
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <OLED_ShowCHinese>:

//显示汉字
void OLED_ShowCHinese(unsigned char x,unsigned char y,unsigned char no)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
 8003322:	460b      	mov	r3, r1
 8003324:	71bb      	strb	r3, [r7, #6]
 8003326:	4613      	mov	r3, r2
 8003328:	717b      	strb	r3, [r7, #5]
    unsigned char t,adder=0;
 800332a:	2300      	movs	r3, #0
 800332c:	73bb      	strb	r3, [r7, #14]
    OLED_Set_Pos(x,y);
 800332e:	79ba      	ldrb	r2, [r7, #6]
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fecd 	bl	80030d4 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e011      	b.n	8003364 <OLED_ShowCHinese+0x4c>
    {
        OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 8003340:	797b      	ldrb	r3, [r7, #5]
 8003342:	005a      	lsls	r2, r3, #1
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <OLED_ShowCHinese+0x9c>)
 8003348:	0152      	lsls	r2, r2, #5
 800334a:	440a      	add	r2, r1
 800334c:	4413      	add	r3, r2
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fea6 	bl	80030a4 <OLED_WR_Byte>
        adder+=1;
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	3301      	adds	r3, #1
 800335c:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	3301      	adds	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	d9ea      	bls.n	8003340 <OLED_ShowCHinese+0x28>
    }
        OLED_Set_Pos(x,y+1);
 800336a:	79bb      	ldrb	r3, [r7, #6]
 800336c:	3301      	adds	r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fead 	bl	80030d4 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	e012      	b.n	80033a6 <OLED_ShowCHinese+0x8e>
    {
        OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 8003380:	797b      	ldrb	r3, [r7, #5]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	490a      	ldr	r1, [pc, #40]	; (80033b4 <OLED_ShowCHinese+0x9c>)
 800338a:	0152      	lsls	r2, r2, #5
 800338c:	440a      	add	r2, r1
 800338e:	4413      	add	r3, r2
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2101      	movs	r1, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fe85 	bl	80030a4 <OLED_WR_Byte>
        adder+=1;
 800339a:	7bbb      	ldrb	r3, [r7, #14]
 800339c:	3301      	adds	r3, #1
 800339e:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	3301      	adds	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b0f      	cmp	r3, #15
 80033aa:	d9e9      	bls.n	8003380 <OLED_ShowCHinese+0x68>
    }
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	08005158 	.word	0x08005158

080033b8 <OLED_Init>:
    }
}

//void Initial_M096128x64_ssd1306(void)
void OLED_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
	Write_IIC_Command(0xAE);   //display off
 80033bc:	20ae      	movs	r0, #174	; 0xae
 80033be:	f7ff fe29 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x20);	//Set Memory Addressing Mode	
 80033c2:	2020      	movs	r0, #32
 80033c4:	f7ff fe26 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80033c8:	2010      	movs	r0, #16
 80033ca:	f7ff fe23 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 80033ce:	20b0      	movs	r0, #176	; 0xb0
 80033d0:	f7ff fe20 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xc8);	//Set COM Output Scan Direction
 80033d4:	20c8      	movs	r0, #200	; 0xc8
 80033d6:	f7ff fe1d 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x00);//---set low column address
 80033da:	2000      	movs	r0, #0
 80033dc:	f7ff fe1a 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x10);//---set high column address
 80033e0:	2010      	movs	r0, #16
 80033e2:	f7ff fe17 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x40);//--set start line address
 80033e6:	2040      	movs	r0, #64	; 0x40
 80033e8:	f7ff fe14 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x81);//--set contrast control register
 80033ec:	2081      	movs	r0, #129	; 0x81
 80033ee:	f7ff fe11 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xdf);
 80033f2:	20df      	movs	r0, #223	; 0xdf
 80033f4:	f7ff fe0e 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xa1);//--set segment re-map 0 to 127
 80033f8:	20a1      	movs	r0, #161	; 0xa1
 80033fa:	f7ff fe0b 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xa6);//--set normal display
 80033fe:	20a6      	movs	r0, #166	; 0xa6
 8003400:	f7ff fe08 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xa8);//--set multiplex ratio(1 to 64)
 8003404:	20a8      	movs	r0, #168	; 0xa8
 8003406:	f7ff fe05 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x3F);//
 800340a:	203f      	movs	r0, #63	; 0x3f
 800340c:	f7ff fe02 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xa4);//0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003410:	20a4      	movs	r0, #164	; 0xa4
 8003412:	f7ff fdff 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xd3);//-set display offset
 8003416:	20d3      	movs	r0, #211	; 0xd3
 8003418:	f7ff fdfc 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x00);//-not offset
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff fdf9 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xd5);//--set display clock divide ratio/oscillator frequency
 8003422:	20d5      	movs	r0, #213	; 0xd5
 8003424:	f7ff fdf6 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xf0);//--set divide ratio
 8003428:	20f0      	movs	r0, #240	; 0xf0
 800342a:	f7ff fdf3 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xd9);//--set pre-charge period
 800342e:	20d9      	movs	r0, #217	; 0xd9
 8003430:	f7ff fdf0 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x22); //
 8003434:	2022      	movs	r0, #34	; 0x22
 8003436:	f7ff fded 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xda);//--set com pins hardware configuration
 800343a:	20da      	movs	r0, #218	; 0xda
 800343c:	f7ff fdea 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x12);
 8003440:	2012      	movs	r0, #18
 8003442:	f7ff fde7 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xdb);//--set vcomh
 8003446:	20db      	movs	r0, #219	; 0xdb
 8003448:	f7ff fde4 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x20);//0x20,0.77xVcc
 800344c:	2020      	movs	r0, #32
 800344e:	f7ff fde1 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x8d);//--set DC-DC enable
 8003452:	208d      	movs	r0, #141	; 0x8d
 8003454:	f7ff fdde 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0x14);//
 8003458:	2014      	movs	r0, #20
 800345a:	f7ff fddb 	bl	8003014 <Write_IIC_Command>
	Write_IIC_Command(0xaf);//--turn on oled panel 
 800345e:	20af      	movs	r0, #175	; 0xaf
 8003460:	f7ff fdd8 	bl	8003014 <Write_IIC_Command>

    OLED_Clear();
 8003464:	f7ff fe80 	bl	8003168 <OLED_Clear>
    OLED_Set_Pos(0x02,0);
 8003468:	2100      	movs	r1, #0
 800346a:	2002      	movs	r0, #2
 800346c:	f7ff fe32 	bl	80030d4 <OLED_Set_Pos>
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}

08003474 <oled_display_memu>:

#include "stm32f4xx_hal.h"

/*******************************Main*******************************/
void oled_display_memu(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
	unsigned char Humidity_Unit[5] = "%RH";
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <oled_display_memu+0x88>)
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	713b      	strb	r3, [r7, #4]
    OLED_Init();
 8003482:	f7ff ff99 	bl	80033b8 <OLED_Init>
    HAL_Delay(10);
 8003486:	200a      	movs	r0, #10
 8003488:	f7fd f8ec 	bl	8000664 <HAL_Delay>

    OLED_ShowCHinese(14,0,0);//温
 800348c:	2200      	movs	r2, #0
 800348e:	2100      	movs	r1, #0
 8003490:	200e      	movs	r0, #14
 8003492:	f7ff ff41 	bl	8003318 <OLED_ShowCHinese>
    OLED_ShowCHinese(42,0,1);//湿
 8003496:	2201      	movs	r2, #1
 8003498:	2100      	movs	r1, #0
 800349a:	202a      	movs	r0, #42	; 0x2a
 800349c:	f7ff ff3c 	bl	8003318 <OLED_ShowCHinese>
    OLED_ShowCHinese(72,0,2);//度
 80034a0:	2202      	movs	r2, #2
 80034a2:	2100      	movs	r1, #0
 80034a4:	2048      	movs	r0, #72	; 0x48
 80034a6:	f7ff ff37 	bl	8003318 <OLED_ShowCHinese>
    OLED_ShowCHinese(100,0,3);//计
 80034aa:	2203      	movs	r2, #3
 80034ac:	2100      	movs	r1, #0
 80034ae:	2064      	movs	r0, #100	; 0x64
 80034b0:	f7ff ff32 	bl	8003318 <OLED_ShowCHinese>

    OLED_ShowCHinese(2,3,0);//温
 80034b4:	2200      	movs	r2, #0
 80034b6:	2103      	movs	r1, #3
 80034b8:	2002      	movs	r0, #2
 80034ba:	f7ff ff2d 	bl	8003318 <OLED_ShowCHinese>
    OLED_ShowCHinese(22,3,2);//度
 80034be:	2202      	movs	r2, #2
 80034c0:	2103      	movs	r1, #3
 80034c2:	2016      	movs	r0, #22
 80034c4:	f7ff ff28 	bl	8003318 <OLED_ShowCHinese>
//        OLED_ShowString(56,3,":");
//    OLED_ShowString(48,3,"26.50");
    OLED_ShowCHinese(100,3,4);//℃
 80034c8:	2204      	movs	r2, #4
 80034ca:	2103      	movs	r1, #3
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	f7ff ff23 	bl	8003318 <OLED_ShowCHinese>

    OLED_ShowCHinese(2,5,1);//湿
 80034d2:	2201      	movs	r2, #1
 80034d4:	2105      	movs	r1, #5
 80034d6:	2002      	movs	r0, #2
 80034d8:	f7ff ff1e 	bl	8003318 <OLED_ShowCHinese>
    OLED_ShowCHinese(22,5,2);//度
 80034dc:	2202      	movs	r2, #2
 80034de:	2105      	movs	r1, #5
 80034e0:	2016      	movs	r0, #22
 80034e2:	f7ff ff19 	bl	8003318 <OLED_ShowCHinese>
//        OLED_ShowString(56,5,":");
//    OLED_ShowString(48,5,"78.23");
    OLED_ShowString(98,5,Humidity_Unit);
 80034e6:	463b      	mov	r3, r7
 80034e8:	461a      	mov	r2, r3
 80034ea:	2105      	movs	r1, #5
 80034ec:	2062      	movs	r0, #98	; 0x62
 80034ee:	f7ff febb 	bl	8003268 <OLED_ShowString>
//    delay_ms(50);
////        OLED_DrawBMP(0,0,128,8,BMP1);  //ͼƬ��ʾ(ͼƬ��ʾ���ã����ɵ��ֱ�ϴ󣬻�ռ�ý϶�ռ䣬FLASH�ռ�8K��������)
//    delay_ms(50);
//    OLED_DrawBMP(0,0,128,8,gImage_128x64);
//    delay_ms(50);
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	00485225 	.word	0x00485225

08003500 <SHT3X_CalcCrc>:
//  return error;
//}

//-----------------------------------------------------------------------------
static u8t SHT3X_CalcCrc(u8t data[], u8t nbrOfBytes)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
  u8t bit;        // bit mask
  u8t crc = 0xFF; // calculated checksum
 800350c:	23ff      	movs	r3, #255	; 0xff
 800350e:	73bb      	strb	r3, [r7, #14]
  u8t byteCtr;    // byte counter
  
  // calculates 8-Bit checksum with given polynomial
  for(byteCtr = 0; byteCtr < nbrOfBytes; byteCtr++)
 8003510:	2300      	movs	r3, #0
 8003512:	737b      	strb	r3, [r7, #13]
 8003514:	e021      	b.n	800355a <SHT3X_CalcCrc+0x5a>
  {
    crc ^= (data[byteCtr]);
 8003516:	7b7b      	ldrb	r3, [r7, #13]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	4053      	eors	r3, r2
 8003522:	73bb      	strb	r3, [r7, #14]
    for(bit = 8; bit > 0; --bit)
 8003524:	2308      	movs	r3, #8
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	e011      	b.n	800354e <SHT3X_CalcCrc+0x4e>
    {
      if(crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 800352a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da07      	bge.n	8003542 <SHT3X_CalcCrc+0x42>
 8003532:	7bbb      	ldrb	r3, [r7, #14]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	b25b      	sxtb	r3, r3
 8003538:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800353c:	b25b      	sxtb	r3, r3
 800353e:	73bb      	strb	r3, [r7, #14]
 8003540:	e002      	b.n	8003548 <SHT3X_CalcCrc+0x48>
      else           crc = (crc << 1);
 8003542:	7bbb      	ldrb	r3, [r7, #14]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	73bb      	strb	r3, [r7, #14]
    for(bit = 8; bit > 0; --bit)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	3b01      	subs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ea      	bne.n	800352a <SHT3X_CalcCrc+0x2a>
  for(byteCtr = 0; byteCtr < nbrOfBytes; byteCtr++)
 8003554:	7b7b      	ldrb	r3, [r7, #13]
 8003556:	3301      	adds	r3, #1
 8003558:	737b      	strb	r3, [r7, #13]
 800355a:	7b7a      	ldrb	r2, [r7, #13]
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	429a      	cmp	r2, r3
 8003560:	d3d9      	bcc.n	8003516 <SHT3X_CalcCrc+0x16>
    }
  }
  
  return crc;
 8003562:	7bbb      	ldrb	r3, [r7, #14]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <SHT3X_CheckCrc>:

//-----------------------------------------------------------------------------
static etError SHT3X_CheckCrc(u8t data[], u8t nbrOfBytes, u8t checksum)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]
 800357c:	4613      	mov	r3, r2
 800357e:	70bb      	strb	r3, [r7, #2]
  u8t crc;     // calculated checksum
  
  // calculates 8-Bit checksum
  crc = SHT3X_CalcCrc(data, nbrOfBytes);
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ffbb 	bl	8003500 <SHT3X_CalcCrc>
 800358a:	4603      	mov	r3, r0
 800358c:	73fb      	strb	r3, [r7, #15]
  
  // verify checksum
  if(crc != checksum)
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	78bb      	ldrb	r3, [r7, #2]
 8003592:	429a      	cmp	r2, r3
 8003594:	d001      	beq.n	800359a <SHT3X_CheckCrc+0x2a>
	  return CHECKSUM_ERROR;
 8003596:	2302      	movs	r3, #2
 8003598:	e000      	b.n	800359c <SHT3X_CheckCrc+0x2c>
  else
	  return NO_ERROR;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <SHT3X_CalcTemperature>:

//-----------------------------------------------------------------------------
static ft SHT3X_CalcTemperature(u16t rawValue)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
  // calculate temperature [�C]
  // T = -45 + 175 * rawValue / (2^16-1)
  return 175.0f * (ft)rawValue / 65535.0f - 45.0f;
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80035e0 <SHT3X_CalcTemperature+0x3c>
 80035bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035c0:	eddf 6a08 	vldr	s13, [pc, #32]	; 80035e4 <SHT3X_CalcTemperature+0x40>
 80035c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80035e8 <SHT3X_CalcTemperature+0x44>
 80035cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80035d0:	eeb0 0a67 	vmov.f32	s0, s15
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	432f0000 	.word	0x432f0000
 80035e4:	477fff00 	.word	0x477fff00
 80035e8:	42340000 	.word	0x42340000

080035ec <SHT3X_CalcHumidity>:

//-----------------------------------------------------------------------------
static ft SHT3X_CalcHumidity(u16t rawValue)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
  // calculate relative humidity [%RH]
  // RH = rawValue / (2^16-1) * 100
  return 100.0f * (ft)rawValue / 65535.0f;
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003600:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003624 <SHT3X_CalcHumidity+0x38>
 8003604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003608:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003628 <SHT3X_CalcHumidity+0x3c>
 800360c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003610:	eef0 7a66 	vmov.f32	s15, s13
}
 8003614:	eeb0 0a67 	vmov.f32	s0, s15
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	42c80000 	.word	0x42c80000
 8003628:	477fff00 	.word	0x477fff00

0800362c <SHT3X_Send_Command>:
//  // rawRH = humidity / 100 * (2^16-1)
//  return humidity / 100.0f * 65535.0f;
//}

static u8t SHT3X_Send_Command(u16t command)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af02      	add	r7, sp, #8
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
	cmd[0] = (u8t)(command >> 8);
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	b29b      	uxth	r3, r3
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <SHT3X_Send_Command+0x38>)
 8003640:	701a      	strb	r2, [r3, #0]
    cmd[1] = (u8t)(command & 0xFF);
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <SHT3X_Send_Command+0x38>)
 8003648:	705a      	strb	r2, [r3, #1]

    HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, cmd, 2, 200);
 800364a:	23c8      	movs	r3, #200	; 0xc8
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2302      	movs	r3, #2
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <SHT3X_Send_Command+0x38>)
 8003652:	2189      	movs	r1, #137	; 0x89
 8003654:	4804      	ldr	r0, [pc, #16]	; (8003668 <SHT3X_Send_Command+0x3c>)
 8003656:	f7fd fbd1 	bl	8000dfc <HAL_I2C_Master_Transmit>

    return 0;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	2000025c 	.word	0x2000025c
 8003668:	2000014c 	.word	0x2000014c

0800366c <data_synthesis>:
u16t RawHumidity;
ft Temperature;
ft Humidity;

void data_synthesis(u8t data[])
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
    RawTemperature = ((data[0] << 8) | data[1]);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	b21a      	sxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3301      	adds	r3, #1
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b21b      	sxth	r3, r3
 8003684:	4313      	orrs	r3, r2
 8003686:	b21b      	sxth	r3, r3
 8003688:	b29a      	uxth	r2, r3
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <data_synthesis+0x4c>)
 800368c:	801a      	strh	r2, [r3, #0]
    RawHumidity = ((data[3] << 8) | data[4]);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3303      	adds	r3, #3
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	b21a      	sxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b21b      	sxth	r3, r3
 80036a0:	4313      	orrs	r3, r2
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <data_synthesis+0x50>)
 80036a8:	801a      	strh	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000254 	.word	0x20000254
 80036bc:	20000238 	.word	0x20000238

080036c0 <sht31_measurement>:

SHT3x_Sensor_Param sht3x_param;
#define sht3x   1

void sht31_measurement(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af02      	add	r7, sp, #8
    // wait 50ms after power on
    HAL_Delay(50);
 80036c6:	2032      	movs	r0, #50	; 0x32
 80036c8:	f7fc ffcc 	bl	8000664 <HAL_Delay>

    SHT3X_Send_Command(CMD_MEAS_CLOCKSTR_H);
 80036cc:	f642 4006 	movw	r0, #11270	; 0x2c06
 80036d0:	f7ff ffac 	bl	800362c <SHT3X_Send_Command>

    HAL_Delay(50);
 80036d4:	2032      	movs	r0, #50	; 0x32
 80036d6:	f7fc ffc5 	bl	8000664 <HAL_Delay>


    HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDR, raw_value, 6, 200);
 80036da:	23c8      	movs	r3, #200	; 0xc8
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2306      	movs	r3, #6
 80036e0:	4a29      	ldr	r2, [pc, #164]	; (8003788 <sht31_measurement+0xc8>)
 80036e2:	2189      	movs	r1, #137	; 0x89
 80036e4:	4829      	ldr	r0, [pc, #164]	; (800378c <sht31_measurement+0xcc>)
 80036e6:	f7fd fc87 	bl	8000ff8 <HAL_I2C_Master_Receive>

    if (CHECKSUM_ERROR == SHT3X_CheckCrc(raw_value, 2, raw_value[2])) {
 80036ea:	4b27      	ldr	r3, [pc, #156]	; (8003788 <sht31_measurement+0xc8>)
 80036ec:	789b      	ldrb	r3, [r3, #2]
 80036ee:	461a      	mov	r2, r3
 80036f0:	2102      	movs	r1, #2
 80036f2:	4825      	ldr	r0, [pc, #148]	; (8003788 <sht31_measurement+0xc8>)
 80036f4:	f7ff ff3c 	bl	8003570 <SHT3X_CheckCrc>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d105      	bne.n	800370a <sht31_measurement+0x4a>
        //Red led on
    	HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 80036fe:	2201      	movs	r2, #1
 8003700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003704:	4822      	ldr	r0, [pc, #136]	; (8003790 <sht31_measurement+0xd0>)
 8003706:	f7fd fa37 	bl	8000b78 <HAL_GPIO_WritePin>
    }

    if (CHECKSUM_ERROR == SHT3X_CheckCrc(&raw_value[3], 2, raw_value[5])) {
 800370a:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <sht31_measurement+0xc8>)
 800370c:	795b      	ldrb	r3, [r3, #5]
 800370e:	461a      	mov	r2, r3
 8003710:	2102      	movs	r1, #2
 8003712:	4820      	ldr	r0, [pc, #128]	; (8003794 <sht31_measurement+0xd4>)
 8003714:	f7ff ff2c 	bl	8003570 <SHT3X_CheckCrc>
 8003718:	4603      	mov	r3, r0
 800371a:	2b02      	cmp	r3, #2
 800371c:	d105      	bne.n	800372a <sht31_measurement+0x6a>
        //Red led on
    	HAL_GPIO_WritePin(GPIOB, Red_Pin, GPIO_PIN_SET);
 800371e:	2201      	movs	r2, #1
 8003720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003724:	481a      	ldr	r0, [pc, #104]	; (8003790 <sht31_measurement+0xd0>)
 8003726:	f7fd fa27 	bl	8000b78 <HAL_GPIO_WritePin>
    }

    data_synthesis(raw_value);
 800372a:	4817      	ldr	r0, [pc, #92]	; (8003788 <sht31_measurement+0xc8>)
 800372c:	f7ff ff9e 	bl	800366c <data_synthesis>

    Temperature = SHT3X_CalcTemperature(RawTemperature);
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <sht31_measurement+0xd8>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff35 	bl	80035a4 <SHT3X_CalcTemperature>
 800373a:	eef0 7a40 	vmov.f32	s15, s0
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <sht31_measurement+0xdc>)
 8003740:	edc3 7a00 	vstr	s15, [r3]
    Humidity = SHT3X_CalcHumidity(RawHumidity);
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <sht31_measurement+0xe0>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff4f 	bl	80035ec <SHT3X_CalcHumidity>
 800374e:	eef0 7a40 	vmov.f32	s15, s0
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <sht31_measurement+0xe4>)
 8003754:	edc3 7a00 	vstr	s15, [r3]

    sht3x_param.RawTemperature = RawTemperature;
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <sht31_measurement+0xd8>)
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <sht31_measurement+0xe8>)
 800375e:	805a      	strh	r2, [r3, #2]
    sht3x_param.RawHumidity = RawHumidity;
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <sht31_measurement+0xe0>)
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <sht31_measurement+0xe8>)
 8003766:	809a      	strh	r2, [r3, #4]
    sht3x_param.Temperature = Temperature;
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <sht31_measurement+0xdc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <sht31_measurement+0xe8>)
 800376e:	6093      	str	r3, [r2, #8]
    sht3x_param.Humidity = Humidity;
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <sht31_measurement+0xe4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <sht31_measurement+0xe8>)
 8003776:	60d3      	str	r3, [r2, #12]

    display(&sht3x_param, &sht3x_param, sht3x);
 8003778:	2201      	movs	r2, #1
 800377a:	490b      	ldr	r1, [pc, #44]	; (80037a8 <sht31_measurement+0xe8>)
 800377c:	480a      	ldr	r0, [pc, #40]	; (80037a8 <sht31_measurement+0xe8>)
 800377e:	f7ff f8bb 	bl	80028f8 <display>

}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2000023c 	.word	0x2000023c
 800378c:	2000014c 	.word	0x2000014c
 8003790:	40020400 	.word	0x40020400
 8003794:	2000023f 	.word	0x2000023f
 8003798:	20000254 	.word	0x20000254
 800379c:	20000234 	.word	0x20000234
 80037a0:	20000238 	.word	0x20000238
 80037a4:	20000258 	.word	0x20000258
 80037a8:	20000244 	.word	0x20000244

080037ac <sht31_test>:

void sht31_test(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
    int i = 3;
 80037b2:	2303      	movs	r3, #3
 80037b4:	607b      	str	r3, [r7, #4]

    while (i > 0)
 80037b6:	e008      	b.n	80037ca <sht31_test+0x1e>
    {
    	sht31_measurement();
 80037b8:	f7ff ff82 	bl	80036c0 <sht31_measurement>

    	HAL_Delay(2000);
 80037bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80037c0:	f7fc ff50 	bl	8000664 <HAL_Delay>

//    	HAL_GPIO_TogglePin(GPIOB, Green_Pin);

        i--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
    while (i > 0)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	dcf3      	bgt.n	80037b8 <sht31_test+0xc>
    }

    OLED_Display_Off();
 80037d0:	f7ff fcba 	bl	8003148 <OLED_Display_Off>

    HAL_Delay(5000);
 80037d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80037d8:	f7fc ff44 	bl	8000664 <HAL_Delay>

    OLED_Display_On();
 80037dc:	f7ff fca4 	bl	8003128 <OLED_Display_On>

}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <HAL_MspInit+0x4c>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	4a0f      	ldr	r2, [pc, #60]	; (8003834 <HAL_MspInit+0x4c>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	; 0x44
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <HAL_MspInit+0x4c>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_MspInit+0x4c>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	4a08      	ldr	r2, [pc, #32]	; (8003834 <HAL_MspInit+0x4c>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	; 0x40
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_MspInit+0x4c>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a63      	ldr	r2, [pc, #396]	; (80039e4 <HAL_I2C_MspInit+0x1ac>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d12c      	bne.n	80038b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a61      	ldr	r2, [pc, #388]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003876:	23c0      	movs	r3, #192	; 0xc0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800387a:	2312      	movs	r3, #18
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800387e:	2301      	movs	r3, #1
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003886:	2304      	movs	r3, #4
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388e:	4619      	mov	r1, r3
 8003890:	4856      	ldr	r0, [pc, #344]	; (80039ec <HAL_I2C_MspInit+0x1b4>)
 8003892:	f7fc ffef 	bl	8000874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a52      	ldr	r2, [pc, #328]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 80038a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038b2:	e092      	b.n	80039da <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	; (80039f0 <HAL_I2C_MspInit+0x1b8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d13d      	bne.n	800393a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4a48      	ldr	r2, [pc, #288]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	6313      	str	r3, [r2, #48]	; 0x30
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038e0:	2312      	movs	r3, #18
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038e4:	2301      	movs	r3, #1
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e8:	2303      	movs	r3, #3
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80038ec:	2304      	movs	r3, #4
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f4:	4619      	mov	r1, r3
 80038f6:	483d      	ldr	r0, [pc, #244]	; (80039ec <HAL_I2C_MspInit+0x1b4>)
 80038f8:	f7fc ffbc 	bl	8000874 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038fc:	2308      	movs	r3, #8
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003900:	2312      	movs	r3, #18
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003904:	2301      	movs	r3, #1
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003908:	2303      	movs	r3, #3
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800390c:	2309      	movs	r3, #9
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003914:	4619      	mov	r1, r3
 8003916:	4835      	ldr	r0, [pc, #212]	; (80039ec <HAL_I2C_MspInit+0x1b4>)
 8003918:	f7fc ffac 	bl	8000874 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	4a30      	ldr	r2, [pc, #192]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 8003926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800392a:	6413      	str	r3, [r2, #64]	; 0x40
 800392c:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	697b      	ldr	r3, [r7, #20]
}
 8003938:	e04f      	b.n	80039da <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <HAL_I2C_MspInit+0x1bc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d14a      	bne.n	80039da <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	6313      	str	r3, [r2, #48]	; 0x30
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800397c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003982:	2312      	movs	r3, #18
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003986:	2301      	movs	r3, #1
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398a:	2303      	movs	r3, #3
 800398c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800398e:	2304      	movs	r3, #4
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003996:	4619      	mov	r1, r3
 8003998:	4817      	ldr	r0, [pc, #92]	; (80039f8 <HAL_I2C_MspInit+0x1c0>)
 800399a:	f7fc ff6b 	bl	8000874 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800399e:	2310      	movs	r3, #16
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039a2:	2312      	movs	r3, #18
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039a6:	2301      	movs	r3, #1
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039aa:	2303      	movs	r3, #3
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80039ae:	2309      	movs	r3, #9
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b6:	4619      	mov	r1, r3
 80039b8:	480c      	ldr	r0, [pc, #48]	; (80039ec <HAL_I2C_MspInit+0x1b4>)
 80039ba:	f7fc ff5b 	bl	8000874 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 80039c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039cc:	6413      	str	r3, [r2, #64]	; 0x40
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_I2C_MspInit+0x1b0>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
}
 80039da:	bf00      	nop
 80039dc:	3738      	adds	r7, #56	; 0x38
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40005400 	.word	0x40005400
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40005800 	.word	0x40005800
 80039f4:	40005c00 	.word	0x40005c00
 80039f8:	40020000 	.word	0x40020000

080039fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <HAL_UART_MspInit+0x84>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d12c      	bne.n	8003a78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <HAL_UART_MspInit+0x88>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_UART_MspInit+0x88>)
 8003a28:	f043 0320 	orr.w	r3, r3, #32
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <HAL_UART_MspInit+0x88>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_UART_MspInit+0x88>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <HAL_UART_MspInit+0x88>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <HAL_UART_MspInit+0x88>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a68:	2308      	movs	r3, #8
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4619      	mov	r1, r3
 8003a72:	4805      	ldr	r0, [pc, #20]	; (8003a88 <HAL_UART_MspInit+0x8c>)
 8003a74:	f7fc fefe 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a78:	bf00      	nop
 8003a7a:	3728      	adds	r7, #40	; 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40011400 	.word	0x40011400
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40020000 	.word	0x40020000

08003a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a9e:	e7fe      	b.n	8003a9e <HardFault_Handler+0x4>

08003aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <MemManage_Handler+0x4>

08003aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aaa:	e7fe      	b.n	8003aaa <BusFault_Handler+0x4>

08003aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <UsageFault_Handler+0x4>

08003ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae0:	f7fc fda0 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e00a      	b.n	8003b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003afa:	f3af 8000 	nop.w
 8003afe:	4601      	mov	r1, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	60ba      	str	r2, [r7, #8]
 8003b06:	b2ca      	uxtb	r2, r1
 8003b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dbf0      	blt.n	8003afa <_read+0x12>
	}

return len;
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e009      	b.n	8003b48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	60ba      	str	r2, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff f8cf 	bl	8002ce0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3301      	adds	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dbf1      	blt.n	8003b34 <_write+0x12>
	}
	return len;
 8003b50:	687b      	ldr	r3, [r7, #4]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <_close>:

int _close(int file)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
	return -1;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b82:	605a      	str	r2, [r3, #4]
	return 0;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <_isatty>:

int _isatty(int file)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
	return 1;
 8003b9a:	2301      	movs	r3, #1
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <_sbrk+0x50>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <_sbrk+0x16>
		heap_end = &end;
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <_sbrk+0x50>)
 8003bd6:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <_sbrk+0x54>)
 8003bd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <_sbrk+0x50>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <_sbrk+0x50>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	466a      	mov	r2, sp
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d907      	bls.n	8003bfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003bee:	f000 f88b 	bl	8003d08 <__errno>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	230c      	movs	r3, #12
 8003bf6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	e006      	b.n	8003c0c <_sbrk+0x48>
	}

	heap_end += incr;
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <_sbrk+0x50>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <_sbrk+0x50>)
 8003c08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	200000e8 	.word	0x200000e8
 8003c18:	20000268 	.word	0x20000268

08003c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c20:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <SystemInit+0x60>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <SystemInit+0x60>)
 8003c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <SystemInit+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <SystemInit+0x64>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c3c:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <SystemInit+0x64>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <SystemInit+0x64>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <SystemInit+0x64>)
 8003c48:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <SystemInit+0x64>)
 8003c54:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <SystemInit+0x68>)
 8003c56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <SystemInit+0x64>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <SystemInit+0x64>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <SystemInit+0x64>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <SystemInit+0x60>)
 8003c6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c70:	609a      	str	r2, [r3, #8]
#endif
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00
 8003c80:	40023800 	.word	0x40023800
 8003c84:	24003010 	.word	0x24003010

08003c88 <uart_multibyte_send>:
#include "uart_display.h"

extern UART_HandleTypeDef huart6;

uint8_t uart_multibyte_send(uint8_t data[], uint8_t num)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
//
//    for (i = 0; i < num; i++ ) {
//        EUSCI_A_UART_transmitData(EUSCI_A0_BASE, data[i]);
//    }

	HAL_UART_Transmit(&huart6, (uint8_t *)data, num, 0xFFFF);
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <uart_multibyte_send+0x28>)
 8003ca0:	f7fe fb3d 	bl	800231e <HAL_UART_Transmit>

    return 0;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200001f4 	.word	0x200001f4

08003cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003cb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003cba:	e003      	b.n	8003cc4 <LoopCopyDataInit>

08003cbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003cbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003cc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003cc2:	3104      	adds	r1, #4

08003cc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003cc4:	480b      	ldr	r0, [pc, #44]	; (8003cf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003cc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003cca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ccc:	d3f6      	bcc.n	8003cbc <CopyDataInit>
  ldr  r2, =_sbss
 8003cce:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cd0:	e002      	b.n	8003cd8 <LoopFillZerobss>

08003cd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cd4:	f842 3b04 	str.w	r3, [r2], #4

08003cd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cdc:	d3f9      	bcc.n	8003cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cde:	f7ff ff9d 	bl	8003c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ce2:	f000 f817 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ce6:	f7ff f80d 	bl	8002d04 <main>
  bx  lr    
 8003cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003cf0:	08005358 	.word	0x08005358
  ldr  r0, =_sdata
 8003cf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cf8:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 8003cfc:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 8003d00:	20000264 	.word	0x20000264

08003d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d04:	e7fe      	b.n	8003d04 <ADC_IRQHandler>
	...

08003d08 <__errno>:
 8003d08:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <__errno+0x8>)
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000060 	.word	0x20000060

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	4e0d      	ldr	r6, [pc, #52]	; (8003d4c <__libc_init_array+0x38>)
 8003d18:	4c0d      	ldr	r4, [pc, #52]	; (8003d50 <__libc_init_array+0x3c>)
 8003d1a:	1ba4      	subs	r4, r4, r6
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	2500      	movs	r5, #0
 8003d20:	42a5      	cmp	r5, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	4e0b      	ldr	r6, [pc, #44]	; (8003d54 <__libc_init_array+0x40>)
 8003d26:	4c0c      	ldr	r4, [pc, #48]	; (8003d58 <__libc_init_array+0x44>)
 8003d28:	f000 ff04 	bl	8004b34 <_init>
 8003d2c:	1ba4      	subs	r4, r4, r6
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	2500      	movs	r5, #0
 8003d32:	42a5      	cmp	r5, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d3c:	4798      	blx	r3
 8003d3e:	3501      	adds	r5, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d46:	4798      	blx	r3
 8003d48:	3501      	adds	r5, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	08005350 	.word	0x08005350
 8003d50:	08005350 	.word	0x08005350
 8003d54:	08005350 	.word	0x08005350
 8003d58:	08005354 	.word	0x08005354

08003d5c <memset>:
 8003d5c:	4402      	add	r2, r0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d100      	bne.n	8003d66 <memset+0xa>
 8003d64:	4770      	bx	lr
 8003d66:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6a:	e7f9      	b.n	8003d60 <memset+0x4>

08003d6c <iprintf>:
 8003d6c:	b40f      	push	{r0, r1, r2, r3}
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <iprintf+0x2c>)
 8003d70:	b513      	push	{r0, r1, r4, lr}
 8003d72:	681c      	ldr	r4, [r3, #0]
 8003d74:	b124      	cbz	r4, 8003d80 <iprintf+0x14>
 8003d76:	69a3      	ldr	r3, [r4, #24]
 8003d78:	b913      	cbnz	r3, 8003d80 <iprintf+0x14>
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f000 f84e 	bl	8003e1c <__sinit>
 8003d80:	ab05      	add	r3, sp, #20
 8003d82:	9a04      	ldr	r2, [sp, #16]
 8003d84:	68a1      	ldr	r1, [r4, #8]
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f000 f955 	bl	8004038 <_vfiprintf_r>
 8003d8e:	b002      	add	sp, #8
 8003d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d94:	b004      	add	sp, #16
 8003d96:	4770      	bx	lr
 8003d98:	20000060 	.word	0x20000060

08003d9c <std>:
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	b510      	push	{r4, lr}
 8003da0:	4604      	mov	r4, r0
 8003da2:	e9c0 3300 	strd	r3, r3, [r0]
 8003da6:	6083      	str	r3, [r0, #8]
 8003da8:	8181      	strh	r1, [r0, #12]
 8003daa:	6643      	str	r3, [r0, #100]	; 0x64
 8003dac:	81c2      	strh	r2, [r0, #14]
 8003dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003db2:	6183      	str	r3, [r0, #24]
 8003db4:	4619      	mov	r1, r3
 8003db6:	2208      	movs	r2, #8
 8003db8:	305c      	adds	r0, #92	; 0x5c
 8003dba:	f7ff ffcf 	bl	8003d5c <memset>
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <std+0x38>)
 8003dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <std+0x3c>)
 8003dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <std+0x40>)
 8003dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <std+0x44>)
 8003dcc:	6224      	str	r4, [r4, #32]
 8003dce:	6323      	str	r3, [r4, #48]	; 0x30
 8003dd0:	bd10      	pop	{r4, pc}
 8003dd2:	bf00      	nop
 8003dd4:	08004595 	.word	0x08004595
 8003dd8:	080045b7 	.word	0x080045b7
 8003ddc:	080045ef 	.word	0x080045ef
 8003de0:	08004613 	.word	0x08004613

08003de4 <_cleanup_r>:
 8003de4:	4901      	ldr	r1, [pc, #4]	; (8003dec <_cleanup_r+0x8>)
 8003de6:	f000 b885 	b.w	8003ef4 <_fwalk_reent>
 8003dea:	bf00      	nop
 8003dec:	080048ed 	.word	0x080048ed

08003df0 <__sfmoreglue>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	1e4a      	subs	r2, r1, #1
 8003df4:	2568      	movs	r5, #104	; 0x68
 8003df6:	4355      	muls	r5, r2
 8003df8:	460e      	mov	r6, r1
 8003dfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003dfe:	f000 f897 	bl	8003f30 <_malloc_r>
 8003e02:	4604      	mov	r4, r0
 8003e04:	b140      	cbz	r0, 8003e18 <__sfmoreglue+0x28>
 8003e06:	2100      	movs	r1, #0
 8003e08:	e9c0 1600 	strd	r1, r6, [r0]
 8003e0c:	300c      	adds	r0, #12
 8003e0e:	60a0      	str	r0, [r4, #8]
 8003e10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e14:	f7ff ffa2 	bl	8003d5c <memset>
 8003e18:	4620      	mov	r0, r4
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}

08003e1c <__sinit>:
 8003e1c:	6983      	ldr	r3, [r0, #24]
 8003e1e:	b510      	push	{r4, lr}
 8003e20:	4604      	mov	r4, r0
 8003e22:	bb33      	cbnz	r3, 8003e72 <__sinit+0x56>
 8003e24:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003e28:	6503      	str	r3, [r0, #80]	; 0x50
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <__sinit+0x58>)
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <__sinit+0x5c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6282      	str	r2, [r0, #40]	; 0x28
 8003e32:	4298      	cmp	r0, r3
 8003e34:	bf04      	itt	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	6183      	streq	r3, [r0, #24]
 8003e3a:	f000 f81f 	bl	8003e7c <__sfp>
 8003e3e:	6060      	str	r0, [r4, #4]
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 f81b 	bl	8003e7c <__sfp>
 8003e46:	60a0      	str	r0, [r4, #8]
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f000 f817 	bl	8003e7c <__sfp>
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60e0      	str	r0, [r4, #12]
 8003e52:	2104      	movs	r1, #4
 8003e54:	6860      	ldr	r0, [r4, #4]
 8003e56:	f7ff ffa1 	bl	8003d9c <std>
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	2109      	movs	r1, #9
 8003e5e:	68a0      	ldr	r0, [r4, #8]
 8003e60:	f7ff ff9c 	bl	8003d9c <std>
 8003e64:	2202      	movs	r2, #2
 8003e66:	2112      	movs	r1, #18
 8003e68:	68e0      	ldr	r0, [r4, #12]
 8003e6a:	f7ff ff97 	bl	8003d9c <std>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61a3      	str	r3, [r4, #24]
 8003e72:	bd10      	pop	{r4, pc}
 8003e74:	080052b0 	.word	0x080052b0
 8003e78:	08003de5 	.word	0x08003de5

08003e7c <__sfp>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <__sfp+0x70>)
 8003e80:	681e      	ldr	r6, [r3, #0]
 8003e82:	69b3      	ldr	r3, [r6, #24]
 8003e84:	4607      	mov	r7, r0
 8003e86:	b913      	cbnz	r3, 8003e8e <__sfp+0x12>
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f7ff ffc7 	bl	8003e1c <__sinit>
 8003e8e:	3648      	adds	r6, #72	; 0x48
 8003e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	d503      	bpl.n	8003ea0 <__sfp+0x24>
 8003e98:	6833      	ldr	r3, [r6, #0]
 8003e9a:	b133      	cbz	r3, 8003eaa <__sfp+0x2e>
 8003e9c:	6836      	ldr	r6, [r6, #0]
 8003e9e:	e7f7      	b.n	8003e90 <__sfp+0x14>
 8003ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ea4:	b16d      	cbz	r5, 8003ec2 <__sfp+0x46>
 8003ea6:	3468      	adds	r4, #104	; 0x68
 8003ea8:	e7f4      	b.n	8003e94 <__sfp+0x18>
 8003eaa:	2104      	movs	r1, #4
 8003eac:	4638      	mov	r0, r7
 8003eae:	f7ff ff9f 	bl	8003df0 <__sfmoreglue>
 8003eb2:	6030      	str	r0, [r6, #0]
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d1f1      	bne.n	8003e9c <__sfp+0x20>
 8003eb8:	230c      	movs	r3, #12
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <__sfp+0x74>)
 8003ec4:	6665      	str	r5, [r4, #100]	; 0x64
 8003ec6:	e9c4 5500 	strd	r5, r5, [r4]
 8003eca:	60a5      	str	r5, [r4, #8]
 8003ecc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003ed0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003edc:	f7ff ff3e 	bl	8003d5c <memset>
 8003ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ee8:	e7e9      	b.n	8003ebe <__sfp+0x42>
 8003eea:	bf00      	nop
 8003eec:	080052b0 	.word	0x080052b0
 8003ef0:	ffff0001 	.word	0xffff0001

08003ef4 <_fwalk_reent>:
 8003ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef8:	4680      	mov	r8, r0
 8003efa:	4689      	mov	r9, r1
 8003efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f00:	2600      	movs	r6, #0
 8003f02:	b914      	cbnz	r4, 8003f0a <_fwalk_reent+0x16>
 8003f04:	4630      	mov	r0, r6
 8003f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f0a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003f0e:	3f01      	subs	r7, #1
 8003f10:	d501      	bpl.n	8003f16 <_fwalk_reent+0x22>
 8003f12:	6824      	ldr	r4, [r4, #0]
 8003f14:	e7f5      	b.n	8003f02 <_fwalk_reent+0xe>
 8003f16:	89ab      	ldrh	r3, [r5, #12]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d907      	bls.n	8003f2c <_fwalk_reent+0x38>
 8003f1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f20:	3301      	adds	r3, #1
 8003f22:	d003      	beq.n	8003f2c <_fwalk_reent+0x38>
 8003f24:	4629      	mov	r1, r5
 8003f26:	4640      	mov	r0, r8
 8003f28:	47c8      	blx	r9
 8003f2a:	4306      	orrs	r6, r0
 8003f2c:	3568      	adds	r5, #104	; 0x68
 8003f2e:	e7ee      	b.n	8003f0e <_fwalk_reent+0x1a>

08003f30 <_malloc_r>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	1ccd      	adds	r5, r1, #3
 8003f34:	f025 0503 	bic.w	r5, r5, #3
 8003f38:	3508      	adds	r5, #8
 8003f3a:	2d0c      	cmp	r5, #12
 8003f3c:	bf38      	it	cc
 8003f3e:	250c      	movcc	r5, #12
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	4606      	mov	r6, r0
 8003f44:	db01      	blt.n	8003f4a <_malloc_r+0x1a>
 8003f46:	42a9      	cmp	r1, r5
 8003f48:	d903      	bls.n	8003f52 <_malloc_r+0x22>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	6033      	str	r3, [r6, #0]
 8003f4e:	2000      	movs	r0, #0
 8003f50:	bd70      	pop	{r4, r5, r6, pc}
 8003f52:	f000 fd6b 	bl	8004a2c <__malloc_lock>
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <_malloc_r+0xac>)
 8003f58:	6814      	ldr	r4, [r2, #0]
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	b991      	cbnz	r1, 8003f84 <_malloc_r+0x54>
 8003f5e:	4c20      	ldr	r4, [pc, #128]	; (8003fe0 <_malloc_r+0xb0>)
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	b91b      	cbnz	r3, 8003f6c <_malloc_r+0x3c>
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 fb05 	bl	8004574 <_sbrk_r>
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f000 fb00 	bl	8004574 <_sbrk_r>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d124      	bne.n	8003fc2 <_malloc_r+0x92>
 8003f78:	230c      	movs	r3, #12
 8003f7a:	6033      	str	r3, [r6, #0]
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f000 fd56 	bl	8004a2e <__malloc_unlock>
 8003f82:	e7e4      	b.n	8003f4e <_malloc_r+0x1e>
 8003f84:	680b      	ldr	r3, [r1, #0]
 8003f86:	1b5b      	subs	r3, r3, r5
 8003f88:	d418      	bmi.n	8003fbc <_malloc_r+0x8c>
 8003f8a:	2b0b      	cmp	r3, #11
 8003f8c:	d90f      	bls.n	8003fae <_malloc_r+0x7e>
 8003f8e:	600b      	str	r3, [r1, #0]
 8003f90:	50cd      	str	r5, [r1, r3]
 8003f92:	18cc      	adds	r4, r1, r3
 8003f94:	4630      	mov	r0, r6
 8003f96:	f000 fd4a 	bl	8004a2e <__malloc_unlock>
 8003f9a:	f104 000b 	add.w	r0, r4, #11
 8003f9e:	1d23      	adds	r3, r4, #4
 8003fa0:	f020 0007 	bic.w	r0, r0, #7
 8003fa4:	1ac3      	subs	r3, r0, r3
 8003fa6:	d0d3      	beq.n	8003f50 <_malloc_r+0x20>
 8003fa8:	425a      	negs	r2, r3
 8003faa:	50e2      	str	r2, [r4, r3]
 8003fac:	e7d0      	b.n	8003f50 <_malloc_r+0x20>
 8003fae:	428c      	cmp	r4, r1
 8003fb0:	684b      	ldr	r3, [r1, #4]
 8003fb2:	bf16      	itet	ne
 8003fb4:	6063      	strne	r3, [r4, #4]
 8003fb6:	6013      	streq	r3, [r2, #0]
 8003fb8:	460c      	movne	r4, r1
 8003fba:	e7eb      	b.n	8003f94 <_malloc_r+0x64>
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	6849      	ldr	r1, [r1, #4]
 8003fc0:	e7cc      	b.n	8003f5c <_malloc_r+0x2c>
 8003fc2:	1cc4      	adds	r4, r0, #3
 8003fc4:	f024 0403 	bic.w	r4, r4, #3
 8003fc8:	42a0      	cmp	r0, r4
 8003fca:	d005      	beq.n	8003fd8 <_malloc_r+0xa8>
 8003fcc:	1a21      	subs	r1, r4, r0
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 fad0 	bl	8004574 <_sbrk_r>
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d0cf      	beq.n	8003f78 <_malloc_r+0x48>
 8003fd8:	6025      	str	r5, [r4, #0]
 8003fda:	e7db      	b.n	8003f94 <_malloc_r+0x64>
 8003fdc:	200000ec 	.word	0x200000ec
 8003fe0:	200000f0 	.word	0x200000f0

08003fe4 <__sfputc_r>:
 8003fe4:	6893      	ldr	r3, [r2, #8]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	b410      	push	{r4}
 8003fec:	6093      	str	r3, [r2, #8]
 8003fee:	da08      	bge.n	8004002 <__sfputc_r+0x1e>
 8003ff0:	6994      	ldr	r4, [r2, #24]
 8003ff2:	42a3      	cmp	r3, r4
 8003ff4:	db01      	blt.n	8003ffa <__sfputc_r+0x16>
 8003ff6:	290a      	cmp	r1, #10
 8003ff8:	d103      	bne.n	8004002 <__sfputc_r+0x1e>
 8003ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ffe:	f000 bb0d 	b.w	800461c <__swbuf_r>
 8004002:	6813      	ldr	r3, [r2, #0]
 8004004:	1c58      	adds	r0, r3, #1
 8004006:	6010      	str	r0, [r2, #0]
 8004008:	7019      	strb	r1, [r3, #0]
 800400a:	4608      	mov	r0, r1
 800400c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004010:	4770      	bx	lr

08004012 <__sfputs_r>:
 8004012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004014:	4606      	mov	r6, r0
 8004016:	460f      	mov	r7, r1
 8004018:	4614      	mov	r4, r2
 800401a:	18d5      	adds	r5, r2, r3
 800401c:	42ac      	cmp	r4, r5
 800401e:	d101      	bne.n	8004024 <__sfputs_r+0x12>
 8004020:	2000      	movs	r0, #0
 8004022:	e007      	b.n	8004034 <__sfputs_r+0x22>
 8004024:	463a      	mov	r2, r7
 8004026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402a:	4630      	mov	r0, r6
 800402c:	f7ff ffda 	bl	8003fe4 <__sfputc_r>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d1f3      	bne.n	800401c <__sfputs_r+0xa>
 8004034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004038 <_vfiprintf_r>:
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	460c      	mov	r4, r1
 800403e:	b09d      	sub	sp, #116	; 0x74
 8004040:	4617      	mov	r7, r2
 8004042:	461d      	mov	r5, r3
 8004044:	4606      	mov	r6, r0
 8004046:	b118      	cbz	r0, 8004050 <_vfiprintf_r+0x18>
 8004048:	6983      	ldr	r3, [r0, #24]
 800404a:	b90b      	cbnz	r3, 8004050 <_vfiprintf_r+0x18>
 800404c:	f7ff fee6 	bl	8003e1c <__sinit>
 8004050:	4b7c      	ldr	r3, [pc, #496]	; (8004244 <_vfiprintf_r+0x20c>)
 8004052:	429c      	cmp	r4, r3
 8004054:	d158      	bne.n	8004108 <_vfiprintf_r+0xd0>
 8004056:	6874      	ldr	r4, [r6, #4]
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	0718      	lsls	r0, r3, #28
 800405c:	d55e      	bpl.n	800411c <_vfiprintf_r+0xe4>
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05b      	beq.n	800411c <_vfiprintf_r+0xe4>
 8004064:	2300      	movs	r3, #0
 8004066:	9309      	str	r3, [sp, #36]	; 0x24
 8004068:	2320      	movs	r3, #32
 800406a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800406e:	2330      	movs	r3, #48	; 0x30
 8004070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004074:	9503      	str	r5, [sp, #12]
 8004076:	f04f 0b01 	mov.w	fp, #1
 800407a:	46b8      	mov	r8, r7
 800407c:	4645      	mov	r5, r8
 800407e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004082:	b10b      	cbz	r3, 8004088 <_vfiprintf_r+0x50>
 8004084:	2b25      	cmp	r3, #37	; 0x25
 8004086:	d154      	bne.n	8004132 <_vfiprintf_r+0xfa>
 8004088:	ebb8 0a07 	subs.w	sl, r8, r7
 800408c:	d00b      	beq.n	80040a6 <_vfiprintf_r+0x6e>
 800408e:	4653      	mov	r3, sl
 8004090:	463a      	mov	r2, r7
 8004092:	4621      	mov	r1, r4
 8004094:	4630      	mov	r0, r6
 8004096:	f7ff ffbc 	bl	8004012 <__sfputs_r>
 800409a:	3001      	adds	r0, #1
 800409c:	f000 80c2 	beq.w	8004224 <_vfiprintf_r+0x1ec>
 80040a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a2:	4453      	add	r3, sl
 80040a4:	9309      	str	r3, [sp, #36]	; 0x24
 80040a6:	f898 3000 	ldrb.w	r3, [r8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80ba 	beq.w	8004224 <_vfiprintf_r+0x1ec>
 80040b0:	2300      	movs	r3, #0
 80040b2:	f04f 32ff 	mov.w	r2, #4294967295
 80040b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ba:	9304      	str	r3, [sp, #16]
 80040bc:	9307      	str	r3, [sp, #28]
 80040be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040c2:	931a      	str	r3, [sp, #104]	; 0x68
 80040c4:	46a8      	mov	r8, r5
 80040c6:	2205      	movs	r2, #5
 80040c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80040cc:	485e      	ldr	r0, [pc, #376]	; (8004248 <_vfiprintf_r+0x210>)
 80040ce:	f7fc f887 	bl	80001e0 <memchr>
 80040d2:	9b04      	ldr	r3, [sp, #16]
 80040d4:	bb78      	cbnz	r0, 8004136 <_vfiprintf_r+0xfe>
 80040d6:	06d9      	lsls	r1, r3, #27
 80040d8:	bf44      	itt	mi
 80040da:	2220      	movmi	r2, #32
 80040dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040e0:	071a      	lsls	r2, r3, #28
 80040e2:	bf44      	itt	mi
 80040e4:	222b      	movmi	r2, #43	; 0x2b
 80040e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040ea:	782a      	ldrb	r2, [r5, #0]
 80040ec:	2a2a      	cmp	r2, #42	; 0x2a
 80040ee:	d02a      	beq.n	8004146 <_vfiprintf_r+0x10e>
 80040f0:	9a07      	ldr	r2, [sp, #28]
 80040f2:	46a8      	mov	r8, r5
 80040f4:	2000      	movs	r0, #0
 80040f6:	250a      	movs	r5, #10
 80040f8:	4641      	mov	r1, r8
 80040fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040fe:	3b30      	subs	r3, #48	; 0x30
 8004100:	2b09      	cmp	r3, #9
 8004102:	d969      	bls.n	80041d8 <_vfiprintf_r+0x1a0>
 8004104:	b360      	cbz	r0, 8004160 <_vfiprintf_r+0x128>
 8004106:	e024      	b.n	8004152 <_vfiprintf_r+0x11a>
 8004108:	4b50      	ldr	r3, [pc, #320]	; (800424c <_vfiprintf_r+0x214>)
 800410a:	429c      	cmp	r4, r3
 800410c:	d101      	bne.n	8004112 <_vfiprintf_r+0xda>
 800410e:	68b4      	ldr	r4, [r6, #8]
 8004110:	e7a2      	b.n	8004058 <_vfiprintf_r+0x20>
 8004112:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <_vfiprintf_r+0x218>)
 8004114:	429c      	cmp	r4, r3
 8004116:	bf08      	it	eq
 8004118:	68f4      	ldreq	r4, [r6, #12]
 800411a:	e79d      	b.n	8004058 <_vfiprintf_r+0x20>
 800411c:	4621      	mov	r1, r4
 800411e:	4630      	mov	r0, r6
 8004120:	f000 fae0 	bl	80046e4 <__swsetup_r>
 8004124:	2800      	cmp	r0, #0
 8004126:	d09d      	beq.n	8004064 <_vfiprintf_r+0x2c>
 8004128:	f04f 30ff 	mov.w	r0, #4294967295
 800412c:	b01d      	add	sp, #116	; 0x74
 800412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004132:	46a8      	mov	r8, r5
 8004134:	e7a2      	b.n	800407c <_vfiprintf_r+0x44>
 8004136:	4a44      	ldr	r2, [pc, #272]	; (8004248 <_vfiprintf_r+0x210>)
 8004138:	1a80      	subs	r0, r0, r2
 800413a:	fa0b f000 	lsl.w	r0, fp, r0
 800413e:	4318      	orrs	r0, r3
 8004140:	9004      	str	r0, [sp, #16]
 8004142:	4645      	mov	r5, r8
 8004144:	e7be      	b.n	80040c4 <_vfiprintf_r+0x8c>
 8004146:	9a03      	ldr	r2, [sp, #12]
 8004148:	1d11      	adds	r1, r2, #4
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	9103      	str	r1, [sp, #12]
 800414e:	2a00      	cmp	r2, #0
 8004150:	db01      	blt.n	8004156 <_vfiprintf_r+0x11e>
 8004152:	9207      	str	r2, [sp, #28]
 8004154:	e004      	b.n	8004160 <_vfiprintf_r+0x128>
 8004156:	4252      	negs	r2, r2
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	9207      	str	r2, [sp, #28]
 800415e:	9304      	str	r3, [sp, #16]
 8004160:	f898 3000 	ldrb.w	r3, [r8]
 8004164:	2b2e      	cmp	r3, #46	; 0x2e
 8004166:	d10e      	bne.n	8004186 <_vfiprintf_r+0x14e>
 8004168:	f898 3001 	ldrb.w	r3, [r8, #1]
 800416c:	2b2a      	cmp	r3, #42	; 0x2a
 800416e:	d138      	bne.n	80041e2 <_vfiprintf_r+0x1aa>
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	9203      	str	r2, [sp, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	bfb8      	it	lt
 800417c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004180:	f108 0802 	add.w	r8, r8, #2
 8004184:	9305      	str	r3, [sp, #20]
 8004186:	4d33      	ldr	r5, [pc, #204]	; (8004254 <_vfiprintf_r+0x21c>)
 8004188:	f898 1000 	ldrb.w	r1, [r8]
 800418c:	2203      	movs	r2, #3
 800418e:	4628      	mov	r0, r5
 8004190:	f7fc f826 	bl	80001e0 <memchr>
 8004194:	b140      	cbz	r0, 80041a8 <_vfiprintf_r+0x170>
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	1b40      	subs	r0, r0, r5
 800419a:	fa03 f000 	lsl.w	r0, r3, r0
 800419e:	9b04      	ldr	r3, [sp, #16]
 80041a0:	4303      	orrs	r3, r0
 80041a2:	f108 0801 	add.w	r8, r8, #1
 80041a6:	9304      	str	r3, [sp, #16]
 80041a8:	f898 1000 	ldrb.w	r1, [r8]
 80041ac:	482a      	ldr	r0, [pc, #168]	; (8004258 <_vfiprintf_r+0x220>)
 80041ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041b2:	2206      	movs	r2, #6
 80041b4:	f108 0701 	add.w	r7, r8, #1
 80041b8:	f7fc f812 	bl	80001e0 <memchr>
 80041bc:	2800      	cmp	r0, #0
 80041be:	d037      	beq.n	8004230 <_vfiprintf_r+0x1f8>
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <_vfiprintf_r+0x224>)
 80041c2:	bb1b      	cbnz	r3, 800420c <_vfiprintf_r+0x1d4>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	3307      	adds	r3, #7
 80041c8:	f023 0307 	bic.w	r3, r3, #7
 80041cc:	3308      	adds	r3, #8
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d2:	444b      	add	r3, r9
 80041d4:	9309      	str	r3, [sp, #36]	; 0x24
 80041d6:	e750      	b.n	800407a <_vfiprintf_r+0x42>
 80041d8:	fb05 3202 	mla	r2, r5, r2, r3
 80041dc:	2001      	movs	r0, #1
 80041de:	4688      	mov	r8, r1
 80041e0:	e78a      	b.n	80040f8 <_vfiprintf_r+0xc0>
 80041e2:	2300      	movs	r3, #0
 80041e4:	f108 0801 	add.w	r8, r8, #1
 80041e8:	9305      	str	r3, [sp, #20]
 80041ea:	4619      	mov	r1, r3
 80041ec:	250a      	movs	r5, #10
 80041ee:	4640      	mov	r0, r8
 80041f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041f4:	3a30      	subs	r2, #48	; 0x30
 80041f6:	2a09      	cmp	r2, #9
 80041f8:	d903      	bls.n	8004202 <_vfiprintf_r+0x1ca>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0c3      	beq.n	8004186 <_vfiprintf_r+0x14e>
 80041fe:	9105      	str	r1, [sp, #20]
 8004200:	e7c1      	b.n	8004186 <_vfiprintf_r+0x14e>
 8004202:	fb05 2101 	mla	r1, r5, r1, r2
 8004206:	2301      	movs	r3, #1
 8004208:	4680      	mov	r8, r0
 800420a:	e7f0      	b.n	80041ee <_vfiprintf_r+0x1b6>
 800420c:	ab03      	add	r3, sp, #12
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	4622      	mov	r2, r4
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <_vfiprintf_r+0x228>)
 8004214:	a904      	add	r1, sp, #16
 8004216:	4630      	mov	r0, r6
 8004218:	f3af 8000 	nop.w
 800421c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004220:	4681      	mov	r9, r0
 8004222:	d1d5      	bne.n	80041d0 <_vfiprintf_r+0x198>
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	065b      	lsls	r3, r3, #25
 8004228:	f53f af7e 	bmi.w	8004128 <_vfiprintf_r+0xf0>
 800422c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800422e:	e77d      	b.n	800412c <_vfiprintf_r+0xf4>
 8004230:	ab03      	add	r3, sp, #12
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	4622      	mov	r2, r4
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <_vfiprintf_r+0x228>)
 8004238:	a904      	add	r1, sp, #16
 800423a:	4630      	mov	r0, r6
 800423c:	f000 f888 	bl	8004350 <_printf_i>
 8004240:	e7ec      	b.n	800421c <_vfiprintf_r+0x1e4>
 8004242:	bf00      	nop
 8004244:	080052d4 	.word	0x080052d4
 8004248:	08005314 	.word	0x08005314
 800424c:	080052f4 	.word	0x080052f4
 8004250:	080052b4 	.word	0x080052b4
 8004254:	0800531a 	.word	0x0800531a
 8004258:	0800531e 	.word	0x0800531e
 800425c:	00000000 	.word	0x00000000
 8004260:	08004013 	.word	0x08004013

08004264 <_printf_common>:
 8004264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	4691      	mov	r9, r2
 800426a:	461f      	mov	r7, r3
 800426c:	688a      	ldr	r2, [r1, #8]
 800426e:	690b      	ldr	r3, [r1, #16]
 8004270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004274:	4293      	cmp	r3, r2
 8004276:	bfb8      	it	lt
 8004278:	4613      	movlt	r3, r2
 800427a:	f8c9 3000 	str.w	r3, [r9]
 800427e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004282:	4606      	mov	r6, r0
 8004284:	460c      	mov	r4, r1
 8004286:	b112      	cbz	r2, 800428e <_printf_common+0x2a>
 8004288:	3301      	adds	r3, #1
 800428a:	f8c9 3000 	str.w	r3, [r9]
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	0699      	lsls	r1, r3, #26
 8004292:	bf42      	ittt	mi
 8004294:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004298:	3302      	addmi	r3, #2
 800429a:	f8c9 3000 	strmi.w	r3, [r9]
 800429e:	6825      	ldr	r5, [r4, #0]
 80042a0:	f015 0506 	ands.w	r5, r5, #6
 80042a4:	d107      	bne.n	80042b6 <_printf_common+0x52>
 80042a6:	f104 0a19 	add.w	sl, r4, #25
 80042aa:	68e3      	ldr	r3, [r4, #12]
 80042ac:	f8d9 2000 	ldr.w	r2, [r9]
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	42ab      	cmp	r3, r5
 80042b4:	dc28      	bgt.n	8004308 <_printf_common+0xa4>
 80042b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	3300      	adds	r3, #0
 80042be:	bf18      	it	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	0692      	lsls	r2, r2, #26
 80042c4:	d42d      	bmi.n	8004322 <_printf_common+0xbe>
 80042c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ca:	4639      	mov	r1, r7
 80042cc:	4630      	mov	r0, r6
 80042ce:	47c0      	blx	r8
 80042d0:	3001      	adds	r0, #1
 80042d2:	d020      	beq.n	8004316 <_printf_common+0xb2>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	68e5      	ldr	r5, [r4, #12]
 80042d8:	f8d9 2000 	ldr.w	r2, [r9]
 80042dc:	f003 0306 	and.w	r3, r3, #6
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	bf08      	it	eq
 80042e4:	1aad      	subeq	r5, r5, r2
 80042e6:	68a3      	ldr	r3, [r4, #8]
 80042e8:	6922      	ldr	r2, [r4, #16]
 80042ea:	bf0c      	ite	eq
 80042ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042f0:	2500      	movne	r5, #0
 80042f2:	4293      	cmp	r3, r2
 80042f4:	bfc4      	itt	gt
 80042f6:	1a9b      	subgt	r3, r3, r2
 80042f8:	18ed      	addgt	r5, r5, r3
 80042fa:	f04f 0900 	mov.w	r9, #0
 80042fe:	341a      	adds	r4, #26
 8004300:	454d      	cmp	r5, r9
 8004302:	d11a      	bne.n	800433a <_printf_common+0xd6>
 8004304:	2000      	movs	r0, #0
 8004306:	e008      	b.n	800431a <_printf_common+0xb6>
 8004308:	2301      	movs	r3, #1
 800430a:	4652      	mov	r2, sl
 800430c:	4639      	mov	r1, r7
 800430e:	4630      	mov	r0, r6
 8004310:	47c0      	blx	r8
 8004312:	3001      	adds	r0, #1
 8004314:	d103      	bne.n	800431e <_printf_common+0xba>
 8004316:	f04f 30ff 	mov.w	r0, #4294967295
 800431a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431e:	3501      	adds	r5, #1
 8004320:	e7c3      	b.n	80042aa <_printf_common+0x46>
 8004322:	18e1      	adds	r1, r4, r3
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	2030      	movs	r0, #48	; 0x30
 8004328:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800432c:	4422      	add	r2, r4
 800432e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004332:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004336:	3302      	adds	r3, #2
 8004338:	e7c5      	b.n	80042c6 <_printf_common+0x62>
 800433a:	2301      	movs	r3, #1
 800433c:	4622      	mov	r2, r4
 800433e:	4639      	mov	r1, r7
 8004340:	4630      	mov	r0, r6
 8004342:	47c0      	blx	r8
 8004344:	3001      	adds	r0, #1
 8004346:	d0e6      	beq.n	8004316 <_printf_common+0xb2>
 8004348:	f109 0901 	add.w	r9, r9, #1
 800434c:	e7d8      	b.n	8004300 <_printf_common+0x9c>
	...

08004350 <_printf_i>:
 8004350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004354:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004358:	460c      	mov	r4, r1
 800435a:	7e09      	ldrb	r1, [r1, #24]
 800435c:	b085      	sub	sp, #20
 800435e:	296e      	cmp	r1, #110	; 0x6e
 8004360:	4617      	mov	r7, r2
 8004362:	4606      	mov	r6, r0
 8004364:	4698      	mov	r8, r3
 8004366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004368:	f000 80b3 	beq.w	80044d2 <_printf_i+0x182>
 800436c:	d822      	bhi.n	80043b4 <_printf_i+0x64>
 800436e:	2963      	cmp	r1, #99	; 0x63
 8004370:	d036      	beq.n	80043e0 <_printf_i+0x90>
 8004372:	d80a      	bhi.n	800438a <_printf_i+0x3a>
 8004374:	2900      	cmp	r1, #0
 8004376:	f000 80b9 	beq.w	80044ec <_printf_i+0x19c>
 800437a:	2958      	cmp	r1, #88	; 0x58
 800437c:	f000 8083 	beq.w	8004486 <_printf_i+0x136>
 8004380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004384:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004388:	e032      	b.n	80043f0 <_printf_i+0xa0>
 800438a:	2964      	cmp	r1, #100	; 0x64
 800438c:	d001      	beq.n	8004392 <_printf_i+0x42>
 800438e:	2969      	cmp	r1, #105	; 0x69
 8004390:	d1f6      	bne.n	8004380 <_printf_i+0x30>
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	6813      	ldr	r3, [r2, #0]
 8004396:	0605      	lsls	r5, r0, #24
 8004398:	f103 0104 	add.w	r1, r3, #4
 800439c:	d52a      	bpl.n	80043f4 <_printf_i+0xa4>
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6011      	str	r1, [r2, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da03      	bge.n	80043ae <_printf_i+0x5e>
 80043a6:	222d      	movs	r2, #45	; 0x2d
 80043a8:	425b      	negs	r3, r3
 80043aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80043ae:	486f      	ldr	r0, [pc, #444]	; (800456c <_printf_i+0x21c>)
 80043b0:	220a      	movs	r2, #10
 80043b2:	e039      	b.n	8004428 <_printf_i+0xd8>
 80043b4:	2973      	cmp	r1, #115	; 0x73
 80043b6:	f000 809d 	beq.w	80044f4 <_printf_i+0x1a4>
 80043ba:	d808      	bhi.n	80043ce <_printf_i+0x7e>
 80043bc:	296f      	cmp	r1, #111	; 0x6f
 80043be:	d020      	beq.n	8004402 <_printf_i+0xb2>
 80043c0:	2970      	cmp	r1, #112	; 0x70
 80043c2:	d1dd      	bne.n	8004380 <_printf_i+0x30>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	f043 0320 	orr.w	r3, r3, #32
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	e003      	b.n	80043d6 <_printf_i+0x86>
 80043ce:	2975      	cmp	r1, #117	; 0x75
 80043d0:	d017      	beq.n	8004402 <_printf_i+0xb2>
 80043d2:	2978      	cmp	r1, #120	; 0x78
 80043d4:	d1d4      	bne.n	8004380 <_printf_i+0x30>
 80043d6:	2378      	movs	r3, #120	; 0x78
 80043d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043dc:	4864      	ldr	r0, [pc, #400]	; (8004570 <_printf_i+0x220>)
 80043de:	e055      	b.n	800448c <_printf_i+0x13c>
 80043e0:	6813      	ldr	r3, [r2, #0]
 80043e2:	1d19      	adds	r1, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6011      	str	r1, [r2, #0]
 80043e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043f0:	2301      	movs	r3, #1
 80043f2:	e08c      	b.n	800450e <_printf_i+0x1be>
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6011      	str	r1, [r2, #0]
 80043f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043fc:	bf18      	it	ne
 80043fe:	b21b      	sxthne	r3, r3
 8004400:	e7cf      	b.n	80043a2 <_printf_i+0x52>
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	6825      	ldr	r5, [r4, #0]
 8004406:	1d18      	adds	r0, r3, #4
 8004408:	6010      	str	r0, [r2, #0]
 800440a:	0628      	lsls	r0, r5, #24
 800440c:	d501      	bpl.n	8004412 <_printf_i+0xc2>
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	e002      	b.n	8004418 <_printf_i+0xc8>
 8004412:	0668      	lsls	r0, r5, #25
 8004414:	d5fb      	bpl.n	800440e <_printf_i+0xbe>
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	4854      	ldr	r0, [pc, #336]	; (800456c <_printf_i+0x21c>)
 800441a:	296f      	cmp	r1, #111	; 0x6f
 800441c:	bf14      	ite	ne
 800441e:	220a      	movne	r2, #10
 8004420:	2208      	moveq	r2, #8
 8004422:	2100      	movs	r1, #0
 8004424:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004428:	6865      	ldr	r5, [r4, #4]
 800442a:	60a5      	str	r5, [r4, #8]
 800442c:	2d00      	cmp	r5, #0
 800442e:	f2c0 8095 	blt.w	800455c <_printf_i+0x20c>
 8004432:	6821      	ldr	r1, [r4, #0]
 8004434:	f021 0104 	bic.w	r1, r1, #4
 8004438:	6021      	str	r1, [r4, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d13d      	bne.n	80044ba <_printf_i+0x16a>
 800443e:	2d00      	cmp	r5, #0
 8004440:	f040 808e 	bne.w	8004560 <_printf_i+0x210>
 8004444:	4665      	mov	r5, ip
 8004446:	2a08      	cmp	r2, #8
 8004448:	d10b      	bne.n	8004462 <_printf_i+0x112>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	07db      	lsls	r3, r3, #31
 800444e:	d508      	bpl.n	8004462 <_printf_i+0x112>
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	6862      	ldr	r2, [r4, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	bfde      	ittt	le
 8004458:	2330      	movle	r3, #48	; 0x30
 800445a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800445e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004462:	ebac 0305 	sub.w	r3, ip, r5
 8004466:	6123      	str	r3, [r4, #16]
 8004468:	f8cd 8000 	str.w	r8, [sp]
 800446c:	463b      	mov	r3, r7
 800446e:	aa03      	add	r2, sp, #12
 8004470:	4621      	mov	r1, r4
 8004472:	4630      	mov	r0, r6
 8004474:	f7ff fef6 	bl	8004264 <_printf_common>
 8004478:	3001      	adds	r0, #1
 800447a:	d14d      	bne.n	8004518 <_printf_i+0x1c8>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	b005      	add	sp, #20
 8004482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004486:	4839      	ldr	r0, [pc, #228]	; (800456c <_printf_i+0x21c>)
 8004488:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800448c:	6813      	ldr	r3, [r2, #0]
 800448e:	6821      	ldr	r1, [r4, #0]
 8004490:	1d1d      	adds	r5, r3, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6015      	str	r5, [r2, #0]
 8004496:	060a      	lsls	r2, r1, #24
 8004498:	d50b      	bpl.n	80044b2 <_printf_i+0x162>
 800449a:	07ca      	lsls	r2, r1, #31
 800449c:	bf44      	itt	mi
 800449e:	f041 0120 	orrmi.w	r1, r1, #32
 80044a2:	6021      	strmi	r1, [r4, #0]
 80044a4:	b91b      	cbnz	r3, 80044ae <_printf_i+0x15e>
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	f022 0220 	bic.w	r2, r2, #32
 80044ac:	6022      	str	r2, [r4, #0]
 80044ae:	2210      	movs	r2, #16
 80044b0:	e7b7      	b.n	8004422 <_printf_i+0xd2>
 80044b2:	064d      	lsls	r5, r1, #25
 80044b4:	bf48      	it	mi
 80044b6:	b29b      	uxthmi	r3, r3
 80044b8:	e7ef      	b.n	800449a <_printf_i+0x14a>
 80044ba:	4665      	mov	r5, ip
 80044bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80044c0:	fb02 3311 	mls	r3, r2, r1, r3
 80044c4:	5cc3      	ldrb	r3, [r0, r3]
 80044c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044ca:	460b      	mov	r3, r1
 80044cc:	2900      	cmp	r1, #0
 80044ce:	d1f5      	bne.n	80044bc <_printf_i+0x16c>
 80044d0:	e7b9      	b.n	8004446 <_printf_i+0xf6>
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	6825      	ldr	r5, [r4, #0]
 80044d6:	6961      	ldr	r1, [r4, #20]
 80044d8:	1d18      	adds	r0, r3, #4
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	0628      	lsls	r0, r5, #24
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	d501      	bpl.n	80044e6 <_printf_i+0x196>
 80044e2:	6019      	str	r1, [r3, #0]
 80044e4:	e002      	b.n	80044ec <_printf_i+0x19c>
 80044e6:	066a      	lsls	r2, r5, #25
 80044e8:	d5fb      	bpl.n	80044e2 <_printf_i+0x192>
 80044ea:	8019      	strh	r1, [r3, #0]
 80044ec:	2300      	movs	r3, #0
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	4665      	mov	r5, ip
 80044f2:	e7b9      	b.n	8004468 <_printf_i+0x118>
 80044f4:	6813      	ldr	r3, [r2, #0]
 80044f6:	1d19      	adds	r1, r3, #4
 80044f8:	6011      	str	r1, [r2, #0]
 80044fa:	681d      	ldr	r5, [r3, #0]
 80044fc:	6862      	ldr	r2, [r4, #4]
 80044fe:	2100      	movs	r1, #0
 8004500:	4628      	mov	r0, r5
 8004502:	f7fb fe6d 	bl	80001e0 <memchr>
 8004506:	b108      	cbz	r0, 800450c <_printf_i+0x1bc>
 8004508:	1b40      	subs	r0, r0, r5
 800450a:	6060      	str	r0, [r4, #4]
 800450c:	6863      	ldr	r3, [r4, #4]
 800450e:	6123      	str	r3, [r4, #16]
 8004510:	2300      	movs	r3, #0
 8004512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004516:	e7a7      	b.n	8004468 <_printf_i+0x118>
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	462a      	mov	r2, r5
 800451c:	4639      	mov	r1, r7
 800451e:	4630      	mov	r0, r6
 8004520:	47c0      	blx	r8
 8004522:	3001      	adds	r0, #1
 8004524:	d0aa      	beq.n	800447c <_printf_i+0x12c>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	079b      	lsls	r3, r3, #30
 800452a:	d413      	bmi.n	8004554 <_printf_i+0x204>
 800452c:	68e0      	ldr	r0, [r4, #12]
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	4298      	cmp	r0, r3
 8004532:	bfb8      	it	lt
 8004534:	4618      	movlt	r0, r3
 8004536:	e7a3      	b.n	8004480 <_printf_i+0x130>
 8004538:	2301      	movs	r3, #1
 800453a:	464a      	mov	r2, r9
 800453c:	4639      	mov	r1, r7
 800453e:	4630      	mov	r0, r6
 8004540:	47c0      	blx	r8
 8004542:	3001      	adds	r0, #1
 8004544:	d09a      	beq.n	800447c <_printf_i+0x12c>
 8004546:	3501      	adds	r5, #1
 8004548:	68e3      	ldr	r3, [r4, #12]
 800454a:	9a03      	ldr	r2, [sp, #12]
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	42ab      	cmp	r3, r5
 8004550:	dcf2      	bgt.n	8004538 <_printf_i+0x1e8>
 8004552:	e7eb      	b.n	800452c <_printf_i+0x1dc>
 8004554:	2500      	movs	r5, #0
 8004556:	f104 0919 	add.w	r9, r4, #25
 800455a:	e7f5      	b.n	8004548 <_printf_i+0x1f8>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ac      	bne.n	80044ba <_printf_i+0x16a>
 8004560:	7803      	ldrb	r3, [r0, #0]
 8004562:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004566:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800456a:	e76c      	b.n	8004446 <_printf_i+0xf6>
 800456c:	08005325 	.word	0x08005325
 8004570:	08005336 	.word	0x08005336

08004574 <_sbrk_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4c06      	ldr	r4, [pc, #24]	; (8004590 <_sbrk_r+0x1c>)
 8004578:	2300      	movs	r3, #0
 800457a:	4605      	mov	r5, r0
 800457c:	4608      	mov	r0, r1
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	f7ff fb20 	bl	8003bc4 <_sbrk>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_sbrk_r+0x1a>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	b103      	cbz	r3, 800458e <_sbrk_r+0x1a>
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	20000260 	.word	0x20000260

08004594 <__sread>:
 8004594:	b510      	push	{r4, lr}
 8004596:	460c      	mov	r4, r1
 8004598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459c:	f000 fa96 	bl	8004acc <_read_r>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	bfab      	itete	ge
 80045a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045a6:	89a3      	ldrhlt	r3, [r4, #12]
 80045a8:	181b      	addge	r3, r3, r0
 80045aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045ae:	bfac      	ite	ge
 80045b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80045b2:	81a3      	strhlt	r3, [r4, #12]
 80045b4:	bd10      	pop	{r4, pc}

080045b6 <__swrite>:
 80045b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ba:	461f      	mov	r7, r3
 80045bc:	898b      	ldrh	r3, [r1, #12]
 80045be:	05db      	lsls	r3, r3, #23
 80045c0:	4605      	mov	r5, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	4616      	mov	r6, r2
 80045c6:	d505      	bpl.n	80045d4 <__swrite+0x1e>
 80045c8:	2302      	movs	r3, #2
 80045ca:	2200      	movs	r2, #0
 80045cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d0:	f000 f9b6 	bl	8004940 <_lseek_r>
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	4632      	mov	r2, r6
 80045e2:	463b      	mov	r3, r7
 80045e4:	4628      	mov	r0, r5
 80045e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ea:	f000 b869 	b.w	80046c0 <_write_r>

080045ee <__sseek>:
 80045ee:	b510      	push	{r4, lr}
 80045f0:	460c      	mov	r4, r1
 80045f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f6:	f000 f9a3 	bl	8004940 <_lseek_r>
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	bf15      	itete	ne
 8004600:	6560      	strne	r0, [r4, #84]	; 0x54
 8004602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800460a:	81a3      	strheq	r3, [r4, #12]
 800460c:	bf18      	it	ne
 800460e:	81a3      	strhne	r3, [r4, #12]
 8004610:	bd10      	pop	{r4, pc}

08004612 <__sclose>:
 8004612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004616:	f000 b8d3 	b.w	80047c0 <_close_r>
	...

0800461c <__swbuf_r>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	460e      	mov	r6, r1
 8004620:	4614      	mov	r4, r2
 8004622:	4605      	mov	r5, r0
 8004624:	b118      	cbz	r0, 800462e <__swbuf_r+0x12>
 8004626:	6983      	ldr	r3, [r0, #24]
 8004628:	b90b      	cbnz	r3, 800462e <__swbuf_r+0x12>
 800462a:	f7ff fbf7 	bl	8003e1c <__sinit>
 800462e:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <__swbuf_r+0x98>)
 8004630:	429c      	cmp	r4, r3
 8004632:	d12a      	bne.n	800468a <__swbuf_r+0x6e>
 8004634:	686c      	ldr	r4, [r5, #4]
 8004636:	69a3      	ldr	r3, [r4, #24]
 8004638:	60a3      	str	r3, [r4, #8]
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	071a      	lsls	r2, r3, #28
 800463e:	d52e      	bpl.n	800469e <__swbuf_r+0x82>
 8004640:	6923      	ldr	r3, [r4, #16]
 8004642:	b363      	cbz	r3, 800469e <__swbuf_r+0x82>
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	6820      	ldr	r0, [r4, #0]
 8004648:	1ac0      	subs	r0, r0, r3
 800464a:	6963      	ldr	r3, [r4, #20]
 800464c:	b2f6      	uxtb	r6, r6
 800464e:	4283      	cmp	r3, r0
 8004650:	4637      	mov	r7, r6
 8004652:	dc04      	bgt.n	800465e <__swbuf_r+0x42>
 8004654:	4621      	mov	r1, r4
 8004656:	4628      	mov	r0, r5
 8004658:	f000 f948 	bl	80048ec <_fflush_r>
 800465c:	bb28      	cbnz	r0, 80046aa <__swbuf_r+0x8e>
 800465e:	68a3      	ldr	r3, [r4, #8]
 8004660:	3b01      	subs	r3, #1
 8004662:	60a3      	str	r3, [r4, #8]
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	6022      	str	r2, [r4, #0]
 800466a:	701e      	strb	r6, [r3, #0]
 800466c:	6963      	ldr	r3, [r4, #20]
 800466e:	3001      	adds	r0, #1
 8004670:	4283      	cmp	r3, r0
 8004672:	d004      	beq.n	800467e <__swbuf_r+0x62>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	07db      	lsls	r3, r3, #31
 8004678:	d519      	bpl.n	80046ae <__swbuf_r+0x92>
 800467a:	2e0a      	cmp	r6, #10
 800467c:	d117      	bne.n	80046ae <__swbuf_r+0x92>
 800467e:	4621      	mov	r1, r4
 8004680:	4628      	mov	r0, r5
 8004682:	f000 f933 	bl	80048ec <_fflush_r>
 8004686:	b190      	cbz	r0, 80046ae <__swbuf_r+0x92>
 8004688:	e00f      	b.n	80046aa <__swbuf_r+0x8e>
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <__swbuf_r+0x9c>)
 800468c:	429c      	cmp	r4, r3
 800468e:	d101      	bne.n	8004694 <__swbuf_r+0x78>
 8004690:	68ac      	ldr	r4, [r5, #8]
 8004692:	e7d0      	b.n	8004636 <__swbuf_r+0x1a>
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <__swbuf_r+0xa0>)
 8004696:	429c      	cmp	r4, r3
 8004698:	bf08      	it	eq
 800469a:	68ec      	ldreq	r4, [r5, #12]
 800469c:	e7cb      	b.n	8004636 <__swbuf_r+0x1a>
 800469e:	4621      	mov	r1, r4
 80046a0:	4628      	mov	r0, r5
 80046a2:	f000 f81f 	bl	80046e4 <__swsetup_r>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d0cc      	beq.n	8004644 <__swbuf_r+0x28>
 80046aa:	f04f 37ff 	mov.w	r7, #4294967295
 80046ae:	4638      	mov	r0, r7
 80046b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b2:	bf00      	nop
 80046b4:	080052d4 	.word	0x080052d4
 80046b8:	080052f4 	.word	0x080052f4
 80046bc:	080052b4 	.word	0x080052b4

080046c0 <_write_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4c07      	ldr	r4, [pc, #28]	; (80046e0 <_write_r+0x20>)
 80046c4:	4605      	mov	r5, r0
 80046c6:	4608      	mov	r0, r1
 80046c8:	4611      	mov	r1, r2
 80046ca:	2200      	movs	r2, #0
 80046cc:	6022      	str	r2, [r4, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7ff fa27 	bl	8003b22 <_write>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_write_r+0x1e>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	b103      	cbz	r3, 80046de <_write_r+0x1e>
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	20000260 	.word	0x20000260

080046e4 <__swsetup_r>:
 80046e4:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <__swsetup_r+0xcc>)
 80046e6:	b570      	push	{r4, r5, r6, lr}
 80046e8:	681d      	ldr	r5, [r3, #0]
 80046ea:	4606      	mov	r6, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	b125      	cbz	r5, 80046fa <__swsetup_r+0x16>
 80046f0:	69ab      	ldr	r3, [r5, #24]
 80046f2:	b913      	cbnz	r3, 80046fa <__swsetup_r+0x16>
 80046f4:	4628      	mov	r0, r5
 80046f6:	f7ff fb91 	bl	8003e1c <__sinit>
 80046fa:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <__swsetup_r+0xd0>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	d10f      	bne.n	8004720 <__swsetup_r+0x3c>
 8004700:	686c      	ldr	r4, [r5, #4]
 8004702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004706:	b29a      	uxth	r2, r3
 8004708:	0715      	lsls	r5, r2, #28
 800470a:	d42c      	bmi.n	8004766 <__swsetup_r+0x82>
 800470c:	06d0      	lsls	r0, r2, #27
 800470e:	d411      	bmi.n	8004734 <__swsetup_r+0x50>
 8004710:	2209      	movs	r2, #9
 8004712:	6032      	str	r2, [r6, #0]
 8004714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	f04f 30ff 	mov.w	r0, #4294967295
 800471e:	e03e      	b.n	800479e <__swsetup_r+0xba>
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <__swsetup_r+0xd4>)
 8004722:	429c      	cmp	r4, r3
 8004724:	d101      	bne.n	800472a <__swsetup_r+0x46>
 8004726:	68ac      	ldr	r4, [r5, #8]
 8004728:	e7eb      	b.n	8004702 <__swsetup_r+0x1e>
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <__swsetup_r+0xd8>)
 800472c:	429c      	cmp	r4, r3
 800472e:	bf08      	it	eq
 8004730:	68ec      	ldreq	r4, [r5, #12]
 8004732:	e7e6      	b.n	8004702 <__swsetup_r+0x1e>
 8004734:	0751      	lsls	r1, r2, #29
 8004736:	d512      	bpl.n	800475e <__swsetup_r+0x7a>
 8004738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473a:	b141      	cbz	r1, 800474e <__swsetup_r+0x6a>
 800473c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004740:	4299      	cmp	r1, r3
 8004742:	d002      	beq.n	800474a <__swsetup_r+0x66>
 8004744:	4630      	mov	r0, r6
 8004746:	f000 f973 	bl	8004a30 <_free_r>
 800474a:	2300      	movs	r3, #0
 800474c:	6363      	str	r3, [r4, #52]	; 0x34
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	2300      	movs	r3, #0
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	6923      	ldr	r3, [r4, #16]
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	f043 0308 	orr.w	r3, r3, #8
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	b94b      	cbnz	r3, 800477e <__swsetup_r+0x9a>
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004774:	d003      	beq.n	800477e <__swsetup_r+0x9a>
 8004776:	4621      	mov	r1, r4
 8004778:	4630      	mov	r0, r6
 800477a:	f000 f917 	bl	80049ac <__smakebuf_r>
 800477e:	89a2      	ldrh	r2, [r4, #12]
 8004780:	f012 0301 	ands.w	r3, r2, #1
 8004784:	d00c      	beq.n	80047a0 <__swsetup_r+0xbc>
 8004786:	2300      	movs	r3, #0
 8004788:	60a3      	str	r3, [r4, #8]
 800478a:	6963      	ldr	r3, [r4, #20]
 800478c:	425b      	negs	r3, r3
 800478e:	61a3      	str	r3, [r4, #24]
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	b953      	cbnz	r3, 80047aa <__swsetup_r+0xc6>
 8004794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004798:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800479c:	d1ba      	bne.n	8004714 <__swsetup_r+0x30>
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	0792      	lsls	r2, r2, #30
 80047a2:	bf58      	it	pl
 80047a4:	6963      	ldrpl	r3, [r4, #20]
 80047a6:	60a3      	str	r3, [r4, #8]
 80047a8:	e7f2      	b.n	8004790 <__swsetup_r+0xac>
 80047aa:	2000      	movs	r0, #0
 80047ac:	e7f7      	b.n	800479e <__swsetup_r+0xba>
 80047ae:	bf00      	nop
 80047b0:	20000060 	.word	0x20000060
 80047b4:	080052d4 	.word	0x080052d4
 80047b8:	080052f4 	.word	0x080052f4
 80047bc:	080052b4 	.word	0x080052b4

080047c0 <_close_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4c06      	ldr	r4, [pc, #24]	; (80047dc <_close_r+0x1c>)
 80047c4:	2300      	movs	r3, #0
 80047c6:	4605      	mov	r5, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	f7ff f9c5 	bl	8003b5a <_close>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_close_r+0x1a>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	b103      	cbz	r3, 80047da <_close_r+0x1a>
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	20000260 	.word	0x20000260

080047e0 <__sflush_r>:
 80047e0:	898a      	ldrh	r2, [r1, #12]
 80047e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e6:	4605      	mov	r5, r0
 80047e8:	0710      	lsls	r0, r2, #28
 80047ea:	460c      	mov	r4, r1
 80047ec:	d458      	bmi.n	80048a0 <__sflush_r+0xc0>
 80047ee:	684b      	ldr	r3, [r1, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	dc05      	bgt.n	8004800 <__sflush_r+0x20>
 80047f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dc02      	bgt.n	8004800 <__sflush_r+0x20>
 80047fa:	2000      	movs	r0, #0
 80047fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004802:	2e00      	cmp	r6, #0
 8004804:	d0f9      	beq.n	80047fa <__sflush_r+0x1a>
 8004806:	2300      	movs	r3, #0
 8004808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800480c:	682f      	ldr	r7, [r5, #0]
 800480e:	6a21      	ldr	r1, [r4, #32]
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	d032      	beq.n	800487a <__sflush_r+0x9a>
 8004814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	075a      	lsls	r2, r3, #29
 800481a:	d505      	bpl.n	8004828 <__sflush_r+0x48>
 800481c:	6863      	ldr	r3, [r4, #4]
 800481e:	1ac0      	subs	r0, r0, r3
 8004820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004822:	b10b      	cbz	r3, 8004828 <__sflush_r+0x48>
 8004824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004826:	1ac0      	subs	r0, r0, r3
 8004828:	2300      	movs	r3, #0
 800482a:	4602      	mov	r2, r0
 800482c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800482e:	6a21      	ldr	r1, [r4, #32]
 8004830:	4628      	mov	r0, r5
 8004832:	47b0      	blx	r6
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	d106      	bne.n	8004848 <__sflush_r+0x68>
 800483a:	6829      	ldr	r1, [r5, #0]
 800483c:	291d      	cmp	r1, #29
 800483e:	d848      	bhi.n	80048d2 <__sflush_r+0xf2>
 8004840:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <__sflush_r+0x108>)
 8004842:	40ca      	lsrs	r2, r1
 8004844:	07d6      	lsls	r6, r2, #31
 8004846:	d544      	bpl.n	80048d2 <__sflush_r+0xf2>
 8004848:	2200      	movs	r2, #0
 800484a:	6062      	str	r2, [r4, #4]
 800484c:	04d9      	lsls	r1, r3, #19
 800484e:	6922      	ldr	r2, [r4, #16]
 8004850:	6022      	str	r2, [r4, #0]
 8004852:	d504      	bpl.n	800485e <__sflush_r+0x7e>
 8004854:	1c42      	adds	r2, r0, #1
 8004856:	d101      	bne.n	800485c <__sflush_r+0x7c>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b903      	cbnz	r3, 800485e <__sflush_r+0x7e>
 800485c:	6560      	str	r0, [r4, #84]	; 0x54
 800485e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004860:	602f      	str	r7, [r5, #0]
 8004862:	2900      	cmp	r1, #0
 8004864:	d0c9      	beq.n	80047fa <__sflush_r+0x1a>
 8004866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800486a:	4299      	cmp	r1, r3
 800486c:	d002      	beq.n	8004874 <__sflush_r+0x94>
 800486e:	4628      	mov	r0, r5
 8004870:	f000 f8de 	bl	8004a30 <_free_r>
 8004874:	2000      	movs	r0, #0
 8004876:	6360      	str	r0, [r4, #52]	; 0x34
 8004878:	e7c0      	b.n	80047fc <__sflush_r+0x1c>
 800487a:	2301      	movs	r3, #1
 800487c:	4628      	mov	r0, r5
 800487e:	47b0      	blx	r6
 8004880:	1c41      	adds	r1, r0, #1
 8004882:	d1c8      	bne.n	8004816 <__sflush_r+0x36>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0c5      	beq.n	8004816 <__sflush_r+0x36>
 800488a:	2b1d      	cmp	r3, #29
 800488c:	d001      	beq.n	8004892 <__sflush_r+0xb2>
 800488e:	2b16      	cmp	r3, #22
 8004890:	d101      	bne.n	8004896 <__sflush_r+0xb6>
 8004892:	602f      	str	r7, [r5, #0]
 8004894:	e7b1      	b.n	80047fa <__sflush_r+0x1a>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	e7ad      	b.n	80047fc <__sflush_r+0x1c>
 80048a0:	690f      	ldr	r7, [r1, #16]
 80048a2:	2f00      	cmp	r7, #0
 80048a4:	d0a9      	beq.n	80047fa <__sflush_r+0x1a>
 80048a6:	0793      	lsls	r3, r2, #30
 80048a8:	680e      	ldr	r6, [r1, #0]
 80048aa:	bf08      	it	eq
 80048ac:	694b      	ldreq	r3, [r1, #20]
 80048ae:	600f      	str	r7, [r1, #0]
 80048b0:	bf18      	it	ne
 80048b2:	2300      	movne	r3, #0
 80048b4:	eba6 0807 	sub.w	r8, r6, r7
 80048b8:	608b      	str	r3, [r1, #8]
 80048ba:	f1b8 0f00 	cmp.w	r8, #0
 80048be:	dd9c      	ble.n	80047fa <__sflush_r+0x1a>
 80048c0:	4643      	mov	r3, r8
 80048c2:	463a      	mov	r2, r7
 80048c4:	6a21      	ldr	r1, [r4, #32]
 80048c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b0      	blx	r6
 80048cc:	2800      	cmp	r0, #0
 80048ce:	dc06      	bgt.n	80048de <__sflush_r+0xfe>
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e78e      	b.n	80047fc <__sflush_r+0x1c>
 80048de:	4407      	add	r7, r0
 80048e0:	eba8 0800 	sub.w	r8, r8, r0
 80048e4:	e7e9      	b.n	80048ba <__sflush_r+0xda>
 80048e6:	bf00      	nop
 80048e8:	20400001 	.word	0x20400001

080048ec <_fflush_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	4605      	mov	r5, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	b1db      	cbz	r3, 800492e <_fflush_r+0x42>
 80048f6:	b118      	cbz	r0, 8004900 <_fflush_r+0x14>
 80048f8:	6983      	ldr	r3, [r0, #24]
 80048fa:	b90b      	cbnz	r3, 8004900 <_fflush_r+0x14>
 80048fc:	f7ff fa8e 	bl	8003e1c <__sinit>
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <_fflush_r+0x48>)
 8004902:	429c      	cmp	r4, r3
 8004904:	d109      	bne.n	800491a <_fflush_r+0x2e>
 8004906:	686c      	ldr	r4, [r5, #4]
 8004908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490c:	b17b      	cbz	r3, 800492e <_fflush_r+0x42>
 800490e:	4621      	mov	r1, r4
 8004910:	4628      	mov	r0, r5
 8004912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004916:	f7ff bf63 	b.w	80047e0 <__sflush_r>
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <_fflush_r+0x4c>)
 800491c:	429c      	cmp	r4, r3
 800491e:	d101      	bne.n	8004924 <_fflush_r+0x38>
 8004920:	68ac      	ldr	r4, [r5, #8]
 8004922:	e7f1      	b.n	8004908 <_fflush_r+0x1c>
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <_fflush_r+0x50>)
 8004926:	429c      	cmp	r4, r3
 8004928:	bf08      	it	eq
 800492a:	68ec      	ldreq	r4, [r5, #12]
 800492c:	e7ec      	b.n	8004908 <_fflush_r+0x1c>
 800492e:	2000      	movs	r0, #0
 8004930:	bd38      	pop	{r3, r4, r5, pc}
 8004932:	bf00      	nop
 8004934:	080052d4 	.word	0x080052d4
 8004938:	080052f4 	.word	0x080052f4
 800493c:	080052b4 	.word	0x080052b4

08004940 <_lseek_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4c07      	ldr	r4, [pc, #28]	; (8004960 <_lseek_r+0x20>)
 8004944:	4605      	mov	r5, r0
 8004946:	4608      	mov	r0, r1
 8004948:	4611      	mov	r1, r2
 800494a:	2200      	movs	r2, #0
 800494c:	6022      	str	r2, [r4, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	f7ff f92a 	bl	8003ba8 <_lseek>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d102      	bne.n	800495e <_lseek_r+0x1e>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	b103      	cbz	r3, 800495e <_lseek_r+0x1e>
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	20000260 	.word	0x20000260

08004964 <__swhatbuf_r>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	460e      	mov	r6, r1
 8004968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800496c:	2900      	cmp	r1, #0
 800496e:	b096      	sub	sp, #88	; 0x58
 8004970:	4614      	mov	r4, r2
 8004972:	461d      	mov	r5, r3
 8004974:	da07      	bge.n	8004986 <__swhatbuf_r+0x22>
 8004976:	2300      	movs	r3, #0
 8004978:	602b      	str	r3, [r5, #0]
 800497a:	89b3      	ldrh	r3, [r6, #12]
 800497c:	061a      	lsls	r2, r3, #24
 800497e:	d410      	bmi.n	80049a2 <__swhatbuf_r+0x3e>
 8004980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004984:	e00e      	b.n	80049a4 <__swhatbuf_r+0x40>
 8004986:	466a      	mov	r2, sp
 8004988:	f000 f8b2 	bl	8004af0 <_fstat_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	dbf2      	blt.n	8004976 <__swhatbuf_r+0x12>
 8004990:	9a01      	ldr	r2, [sp, #4]
 8004992:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004996:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800499a:	425a      	negs	r2, r3
 800499c:	415a      	adcs	r2, r3
 800499e:	602a      	str	r2, [r5, #0]
 80049a0:	e7ee      	b.n	8004980 <__swhatbuf_r+0x1c>
 80049a2:	2340      	movs	r3, #64	; 0x40
 80049a4:	2000      	movs	r0, #0
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	b016      	add	sp, #88	; 0x58
 80049aa:	bd70      	pop	{r4, r5, r6, pc}

080049ac <__smakebuf_r>:
 80049ac:	898b      	ldrh	r3, [r1, #12]
 80049ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049b0:	079d      	lsls	r5, r3, #30
 80049b2:	4606      	mov	r6, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	d507      	bpl.n	80049c8 <__smakebuf_r+0x1c>
 80049b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	2301      	movs	r3, #1
 80049c2:	6163      	str	r3, [r4, #20]
 80049c4:	b002      	add	sp, #8
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	ab01      	add	r3, sp, #4
 80049ca:	466a      	mov	r2, sp
 80049cc:	f7ff ffca 	bl	8004964 <__swhatbuf_r>
 80049d0:	9900      	ldr	r1, [sp, #0]
 80049d2:	4605      	mov	r5, r0
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff faab 	bl	8003f30 <_malloc_r>
 80049da:	b948      	cbnz	r0, 80049f0 <__smakebuf_r+0x44>
 80049dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e0:	059a      	lsls	r2, r3, #22
 80049e2:	d4ef      	bmi.n	80049c4 <__smakebuf_r+0x18>
 80049e4:	f023 0303 	bic.w	r3, r3, #3
 80049e8:	f043 0302 	orr.w	r3, r3, #2
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	e7e3      	b.n	80049b8 <__smakebuf_r+0xc>
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <__smakebuf_r+0x7c>)
 80049f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	6020      	str	r0, [r4, #0]
 80049f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fc:	81a3      	strh	r3, [r4, #12]
 80049fe:	9b00      	ldr	r3, [sp, #0]
 8004a00:	6163      	str	r3, [r4, #20]
 8004a02:	9b01      	ldr	r3, [sp, #4]
 8004a04:	6120      	str	r0, [r4, #16]
 8004a06:	b15b      	cbz	r3, 8004a20 <__smakebuf_r+0x74>
 8004a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f000 f881 	bl	8004b14 <_isatty_r>
 8004a12:	b128      	cbz	r0, 8004a20 <__smakebuf_r+0x74>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	431d      	orrs	r5, r3
 8004a24:	81a5      	strh	r5, [r4, #12]
 8004a26:	e7cd      	b.n	80049c4 <__smakebuf_r+0x18>
 8004a28:	08003de5 	.word	0x08003de5

08004a2c <__malloc_lock>:
 8004a2c:	4770      	bx	lr

08004a2e <__malloc_unlock>:
 8004a2e:	4770      	bx	lr

08004a30 <_free_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4605      	mov	r5, r0
 8004a34:	2900      	cmp	r1, #0
 8004a36:	d045      	beq.n	8004ac4 <_free_r+0x94>
 8004a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a3c:	1f0c      	subs	r4, r1, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bfb8      	it	lt
 8004a42:	18e4      	addlt	r4, r4, r3
 8004a44:	f7ff fff2 	bl	8004a2c <__malloc_lock>
 8004a48:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <_free_r+0x98>)
 8004a4a:	6813      	ldr	r3, [r2, #0]
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	b933      	cbnz	r3, 8004a5e <_free_r+0x2e>
 8004a50:	6063      	str	r3, [r4, #4]
 8004a52:	6014      	str	r4, [r2, #0]
 8004a54:	4628      	mov	r0, r5
 8004a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a5a:	f7ff bfe8 	b.w	8004a2e <__malloc_unlock>
 8004a5e:	42a3      	cmp	r3, r4
 8004a60:	d90c      	bls.n	8004a7c <_free_r+0x4c>
 8004a62:	6821      	ldr	r1, [r4, #0]
 8004a64:	1862      	adds	r2, r4, r1
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bf04      	itt	eq
 8004a6a:	681a      	ldreq	r2, [r3, #0]
 8004a6c:	685b      	ldreq	r3, [r3, #4]
 8004a6e:	6063      	str	r3, [r4, #4]
 8004a70:	bf04      	itt	eq
 8004a72:	1852      	addeq	r2, r2, r1
 8004a74:	6022      	streq	r2, [r4, #0]
 8004a76:	6004      	str	r4, [r0, #0]
 8004a78:	e7ec      	b.n	8004a54 <_free_r+0x24>
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	b10a      	cbz	r2, 8004a84 <_free_r+0x54>
 8004a80:	42a2      	cmp	r2, r4
 8004a82:	d9fa      	bls.n	8004a7a <_free_r+0x4a>
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	1858      	adds	r0, r3, r1
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d10b      	bne.n	8004aa4 <_free_r+0x74>
 8004a8c:	6820      	ldr	r0, [r4, #0]
 8004a8e:	4401      	add	r1, r0
 8004a90:	1858      	adds	r0, r3, r1
 8004a92:	4282      	cmp	r2, r0
 8004a94:	6019      	str	r1, [r3, #0]
 8004a96:	d1dd      	bne.n	8004a54 <_free_r+0x24>
 8004a98:	6810      	ldr	r0, [r2, #0]
 8004a9a:	6852      	ldr	r2, [r2, #4]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	4401      	add	r1, r0
 8004aa0:	6019      	str	r1, [r3, #0]
 8004aa2:	e7d7      	b.n	8004a54 <_free_r+0x24>
 8004aa4:	d902      	bls.n	8004aac <_free_r+0x7c>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	e7d3      	b.n	8004a54 <_free_r+0x24>
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	1821      	adds	r1, r4, r0
 8004ab0:	428a      	cmp	r2, r1
 8004ab2:	bf04      	itt	eq
 8004ab4:	6811      	ldreq	r1, [r2, #0]
 8004ab6:	6852      	ldreq	r2, [r2, #4]
 8004ab8:	6062      	str	r2, [r4, #4]
 8004aba:	bf04      	itt	eq
 8004abc:	1809      	addeq	r1, r1, r0
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	605c      	str	r4, [r3, #4]
 8004ac2:	e7c7      	b.n	8004a54 <_free_r+0x24>
 8004ac4:	bd38      	pop	{r3, r4, r5, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200000ec 	.word	0x200000ec

08004acc <_read_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4c07      	ldr	r4, [pc, #28]	; (8004aec <_read_r+0x20>)
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7ff f804 	bl	8003ae8 <_read>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_read_r+0x1e>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_read_r+0x1e>
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20000260 	.word	0x20000260

08004af0 <_fstat_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4c07      	ldr	r4, [pc, #28]	; (8004b10 <_fstat_r+0x20>)
 8004af4:	2300      	movs	r3, #0
 8004af6:	4605      	mov	r5, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	f7ff f838 	bl	8003b72 <_fstat>
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	d102      	bne.n	8004b0c <_fstat_r+0x1c>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	b103      	cbz	r3, 8004b0c <_fstat_r+0x1c>
 8004b0a:	602b      	str	r3, [r5, #0]
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000260 	.word	0x20000260

08004b14 <_isatty_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4c06      	ldr	r4, [pc, #24]	; (8004b30 <_isatty_r+0x1c>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	f7ff f837 	bl	8003b92 <_isatty>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_isatty_r+0x1a>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_isatty_r+0x1a>
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	20000260 	.word	0x20000260

08004b34 <_init>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	bf00      	nop
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr

08004b40 <_fini>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr
