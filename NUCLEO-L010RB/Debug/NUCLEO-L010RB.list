
NUCLEO-L010RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d20  08004d20  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08004d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000004  08004d2c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004d2c  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab06  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c78  00000000  00000000  0002ab32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af0  00000000  00000000  0002c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f8  00000000  00000000  0002d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010728  00000000  00000000  0002dc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a3f  00000000  00000000  0003e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00064ba9  00000000  00000000  00047dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ac9a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002698  00000000  00000000  000aca24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c94 	.word	0x08004c94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08004c94 	.word	0x08004c94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f004 f9a1 	bl	80047a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fad6 	bl	8000a4a <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 faa3 	bl	8000a00 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000024 	.word	0x20000024

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000024 	.word	0x20000024

080004f8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d101      	bne.n	800050a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	e159      	b.n	80007be <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10a      	bne.n	8000528 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2250      	movs	r2, #80	; 0x50
 800051c:	2100      	movs	r1, #0
 800051e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	0018      	movs	r0, r3
 8000524:	f004 f954 	bl	80047d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800052c:	2210      	movs	r2, #16
 800052e:	4013      	ands	r3, r2
 8000530:	2b10      	cmp	r3, #16
 8000532:	d005      	beq.n	8000540 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	2204      	movs	r2, #4
 800053c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800053e:	d00b      	beq.n	8000558 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000544:	2210      	movs	r2, #16
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2250      	movs	r2, #80	; 0x50
 8000550:	2100      	movs	r1, #0
 8000552:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	e132      	b.n	80007be <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800055c:	4a9a      	ldr	r2, [pc, #616]	; (80007c8 <HAL_ADC_Init+0x2d0>)
 800055e:	4013      	ands	r3, r2
 8000560:	2202      	movs	r2, #2
 8000562:	431a      	orrs	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	2203      	movs	r2, #3
 8000570:	4013      	ands	r3, r2
 8000572:	2b01      	cmp	r3, #1
 8000574:	d108      	bne.n	8000588 <HAL_ADC_Init+0x90>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2201      	movs	r2, #1
 800057e:	4013      	ands	r3, r2
 8000580:	2b01      	cmp	r3, #1
 8000582:	d101      	bne.n	8000588 <HAL_ADC_Init+0x90>
 8000584:	2301      	movs	r3, #1
 8000586:	e000      	b.n	800058a <HAL_ADC_Init+0x92>
 8000588:	2300      	movs	r3, #0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d149      	bne.n	8000622 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	23c0      	movs	r3, #192	; 0xc0
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	429a      	cmp	r2, r3
 8000598:	d00b      	beq.n	80005b2 <HAL_ADC_Init+0xba>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d005      	beq.n	80005b2 <HAL_ADC_Init+0xba>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	061b      	lsls	r3, r3, #24
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d111      	bne.n	80005d6 <HAL_ADC_Init+0xde>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	691a      	ldr	r2, [r3, #16]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	0092      	lsls	r2, r2, #2
 80005be:	0892      	lsrs	r2, r2, #2
 80005c0:	611a      	str	r2, [r3, #16]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6919      	ldr	r1, [r3, #16]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	e014      	b.n	8000600 <HAL_ADC_Init+0x108>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	691a      	ldr	r2, [r3, #16]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	0092      	lsls	r2, r2, #2
 80005e2:	0892      	lsrs	r2, r2, #2
 80005e4:	611a      	str	r2, [r3, #16]
 80005e6:	4b79      	ldr	r3, [pc, #484]	; (80007cc <HAL_ADC_Init+0x2d4>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b78      	ldr	r3, [pc, #480]	; (80007cc <HAL_ADC_Init+0x2d4>)
 80005ec:	4978      	ldr	r1, [pc, #480]	; (80007d0 <HAL_ADC_Init+0x2d8>)
 80005ee:	400a      	ands	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	4b76      	ldr	r3, [pc, #472]	; (80007cc <HAL_ADC_Init+0x2d4>)
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	4b74      	ldr	r3, [pc, #464]	; (80007cc <HAL_ADC_Init+0x2d4>)
 80005fc:	430a      	orrs	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2118      	movs	r1, #24
 800060c:	438a      	bics	r2, r1
 800060e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68d9      	ldr	r1, [r3, #12]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	689a      	ldr	r2, [r3, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	430a      	orrs	r2, r1
 8000620:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000622:	4b6a      	ldr	r3, [pc, #424]	; (80007cc <HAL_ADC_Init+0x2d4>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	4b69      	ldr	r3, [pc, #420]	; (80007cc <HAL_ADC_Init+0x2d4>)
 8000628:	496a      	ldr	r1, [pc, #424]	; (80007d4 <HAL_ADC_Init+0x2dc>)
 800062a:	400a      	ands	r2, r1
 800062c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800062e:	4b67      	ldr	r3, [pc, #412]	; (80007cc <HAL_ADC_Init+0x2d4>)
 8000630:	6819      	ldr	r1, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	065a      	lsls	r2, r3, #25
 8000638:	4b64      	ldr	r3, [pc, #400]	; (80007cc <HAL_ADC_Init+0x2d4>)
 800063a:	430a      	orrs	r2, r1
 800063c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	055b      	lsls	r3, r3, #21
 8000648:	4013      	ands	r3, r2
 800064a:	d108      	bne.n	800065e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0549      	lsls	r1, r1, #21
 800065a:	430a      	orrs	r2, r1
 800065c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	495b      	ldr	r1, [pc, #364]	; (80007d8 <HAL_ADC_Init+0x2e0>)
 800066a:	400a      	ands	r2, r1
 800066c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68d9      	ldr	r1, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d101      	bne.n	8000684 <HAL_ADC_Init+0x18c>
 8000680:	2304      	movs	r3, #4
 8000682:	e000      	b.n	8000686 <HAL_ADC_Init+0x18e>
 8000684:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000686:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2020      	movs	r0, #32
 800068c:	5c1b      	ldrb	r3, [r3, r0]
 800068e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000690:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	202c      	movs	r0, #44	; 0x2c
 8000696:	5c1b      	ldrb	r3, [r3, r0]
 8000698:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800069a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80006a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80006a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80006b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	430a      	orrs	r2, r1
 80006b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006be:	23c2      	movs	r3, #194	; 0xc2
 80006c0:	33ff      	adds	r3, #255	; 0xff
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d00b      	beq.n	80006de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68d9      	ldr	r1, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80006d4:	431a      	orrs	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	430a      	orrs	r2, r1
 80006dc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2221      	movs	r2, #33	; 0x21
 80006e2:	5c9b      	ldrb	r3, [r3, r2]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d11a      	bne.n	800071e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2220      	movs	r2, #32
 80006ec:	5c9b      	ldrb	r3, [r3, r2]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d109      	bne.n	8000706 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68da      	ldr	r2, [r3, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0249      	lsls	r1, r1, #9
 8000700:	430a      	orrs	r2, r1
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	e00b      	b.n	800071e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800070a:	2220      	movs	r2, #32
 800070c:	431a      	orrs	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	2201      	movs	r2, #1
 8000718:	431a      	orrs	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000722:	2b01      	cmp	r3, #1
 8000724:	d11f      	bne.n	8000766 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	691a      	ldr	r2, [r3, #16]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	492a      	ldr	r1, [pc, #168]	; (80007dc <HAL_ADC_Init+0x2e4>)
 8000732:	400a      	ands	r2, r1
 8000734:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6919      	ldr	r1, [r3, #16]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000744:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800074a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	430a      	orrs	r2, r1
 8000752:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	691a      	ldr	r2, [r3, #16]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2101      	movs	r1, #1
 8000760:	430a      	orrs	r2, r1
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	e00e      	b.n	8000784 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	2201      	movs	r2, #1
 800076e:	4013      	ands	r3, r2
 8000770:	2b01      	cmp	r3, #1
 8000772:	d107      	bne.n	8000784 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	691a      	ldr	r2, [r3, #16]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2101      	movs	r1, #1
 8000780:	438a      	bics	r2, r1
 8000782:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2107      	movs	r1, #7
 8000790:	438a      	bics	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6959      	ldr	r1, [r3, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007b0:	2203      	movs	r2, #3
 80007b2:	4393      	bics	r3, r2
 80007b4:	2201      	movs	r2, #1
 80007b6:	431a      	orrs	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	0018      	movs	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	fffffefd 	.word	0xfffffefd
 80007cc:	40012708 	.word	0x40012708
 80007d0:	ffc3ffff 	.word	0xffc3ffff
 80007d4:	fdffffff 	.word	0xfdffffff
 80007d8:	fffe0219 	.word	0xfffe0219
 80007dc:	fffffc03 	.word	0xfffffc03

080007e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2250      	movs	r2, #80	; 0x50
 80007ee:	5c9b      	ldrb	r3, [r3, r2]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d101      	bne.n	80007f8 <HAL_ADC_ConfigChannel+0x18>
 80007f4:	2302      	movs	r3, #2
 80007f6:	e050      	b.n	800089a <HAL_ADC_ConfigChannel+0xba>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2250      	movs	r2, #80	; 0x50
 80007fc:	2101      	movs	r1, #1
 80007fe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	2204      	movs	r2, #4
 8000808:	4013      	ands	r3, r2
 800080a:	d00b      	beq.n	8000824 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000810:	2220      	movs	r2, #32
 8000812:	431a      	orrs	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2250      	movs	r2, #80	; 0x50
 800081c:	2100      	movs	r1, #0
 800081e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e03a      	b.n	800089a <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <HAL_ADC_ConfigChannel+0xc4>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d018      	beq.n	8000860 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	035b      	lsls	r3, r3, #13
 800083a:	0b5a      	lsrs	r2, r3, #13
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	430a      	orrs	r2, r1
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	029b      	lsls	r3, r3, #10
 800084c:	4013      	ands	r3, r2
 800084e:	d01f      	beq.n	8000890 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_ADC_ConfigChannel+0xc8>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_ADC_ConfigChannel+0xc8>)
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	03c9      	lsls	r1, r1, #15
 800085a:	430a      	orrs	r2, r1
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	e017      	b.n	8000890 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	035b      	lsls	r3, r3, #13
 800086c:	0b5b      	lsrs	r3, r3, #13
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	400a      	ands	r2, r1
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	029b      	lsls	r3, r3, #10
 8000880:	4013      	ands	r3, r2
 8000882:	d005      	beq.n	8000890 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_ADC_ConfigChannel+0xc8>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <HAL_ADC_ConfigChannel+0xc8>)
 800088a:	4908      	ldr	r1, [pc, #32]	; (80008ac <HAL_ADC_ConfigChannel+0xcc>)
 800088c:	400a      	ands	r2, r1
 800088e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2250      	movs	r2, #80	; 0x50
 8000894:	2100      	movs	r1, #0
 8000896:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	00001001 	.word	0x00001001
 80008a8:	40012708 	.word	0x40012708
 80008ac:	ffbfffff 	.word	0xffbfffff

080008b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	0002      	movs	r2, r0
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	001a      	movs	r2, r3
 80008c2:	231f      	movs	r3, #31
 80008c4:	401a      	ands	r2, r3
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <NVIC_EnableIRQ+0x28>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	4091      	lsls	r1, r2
 80008cc:	000a      	movs	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	e000e100 	.word	0xe000e100

080008dc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	0002      	movs	r2, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b7f      	cmp	r3, #127	; 0x7f
 80008f0:	d932      	bls.n	8000958 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f2:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <NVIC_SetPriority+0xd4>)
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	0019      	movs	r1, r3
 80008fa:	230f      	movs	r3, #15
 80008fc:	400b      	ands	r3, r1
 80008fe:	3b08      	subs	r3, #8
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	3306      	adds	r3, #6
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	3304      	adds	r3, #4
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	1dfa      	adds	r2, r7, #7
 800090e:	7812      	ldrb	r2, [r2, #0]
 8000910:	0011      	movs	r1, r2
 8000912:	2203      	movs	r2, #3
 8000914:	400a      	ands	r2, r1
 8000916:	00d2      	lsls	r2, r2, #3
 8000918:	21ff      	movs	r1, #255	; 0xff
 800091a:	4091      	lsls	r1, r2
 800091c:	000a      	movs	r2, r1
 800091e:	43d2      	mvns	r2, r2
 8000920:	401a      	ands	r2, r3
 8000922:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	019b      	lsls	r3, r3, #6
 8000928:	22ff      	movs	r2, #255	; 0xff
 800092a:	401a      	ands	r2, r3
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0018      	movs	r0, r3
 8000932:	2303      	movs	r3, #3
 8000934:	4003      	ands	r3, r0
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093a:	481d      	ldr	r0, [pc, #116]	; (80009b0 <NVIC_SetPriority+0xd4>)
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	001c      	movs	r4, r3
 8000942:	230f      	movs	r3, #15
 8000944:	4023      	ands	r3, r4
 8000946:	3b08      	subs	r3, #8
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	430a      	orrs	r2, r1
 800094c:	3306      	adds	r3, #6
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	18c3      	adds	r3, r0, r3
 8000952:	3304      	adds	r3, #4
 8000954:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000956:	e027      	b.n	80009a8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <NVIC_SetPriority+0xd8>)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	33c0      	adds	r3, #192	; 0xc0
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	589b      	ldr	r3, [r3, r2]
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	0011      	movs	r1, r2
 800096e:	2203      	movs	r2, #3
 8000970:	400a      	ands	r2, r1
 8000972:	00d2      	lsls	r2, r2, #3
 8000974:	21ff      	movs	r1, #255	; 0xff
 8000976:	4091      	lsls	r1, r2
 8000978:	000a      	movs	r2, r1
 800097a:	43d2      	mvns	r2, r2
 800097c:	401a      	ands	r2, r3
 800097e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	019b      	lsls	r3, r3, #6
 8000984:	22ff      	movs	r2, #255	; 0xff
 8000986:	401a      	ands	r2, r3
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	0018      	movs	r0, r3
 800098e:	2303      	movs	r3, #3
 8000990:	4003      	ands	r3, r0
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <NVIC_SetPriority+0xd8>)
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b25b      	sxtb	r3, r3
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	430a      	orrs	r2, r1
 80009a2:	33c0      	adds	r3, #192	; 0xc0
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	501a      	str	r2, [r3, r0]
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b003      	add	sp, #12
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	e000ed00 	.word	0xe000ed00
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <SysTick_Config+0x40>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d901      	bls.n	80009ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2301      	movs	r3, #1
 80009cc:	e010      	b.n	80009f0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <SysTick_Config+0x44>)
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	3a01      	subs	r2, #1
 80009d4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d6:	2301      	movs	r3, #1
 80009d8:	425b      	negs	r3, r3
 80009da:	2103      	movs	r1, #3
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff ff7d 	bl	80008dc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <SysTick_Config+0x44>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <SysTick_Config+0x44>)
 80009ea:	2207      	movs	r2, #7
 80009ec:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	00ffffff 	.word	0x00ffffff
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	1c02      	adds	r2, r0, #0
 8000a10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff ff5d 	bl	80008dc <NVIC_SetPriority>
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b004      	add	sp, #16
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	0002      	movs	r2, r0
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f7ff ff37 	bl	80008b0 <NVIC_EnableIRQ>
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff ffaf 	bl	80009b8 <SysTick_Config>
 8000a5a:	0003      	movs	r3, r0
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b002      	add	sp, #8
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e061      	b.n	8000b3a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <HAL_DMA_Init+0xe0>)
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	4463      	add	r3, ip
 8000a80:	2114      	movs	r1, #20
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fb40 	bl	8000108 <__udivsi3>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	009a      	lsls	r2, r3, #2
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a2d      	ldr	r2, [pc, #180]	; (8000b48 <HAL_DMA_Init+0xe4>)
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2225      	movs	r2, #37	; 0x25
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <HAL_DMA_Init+0xe8>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	01db      	lsls	r3, r3, #7
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d018      	beq.n	8000b22 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_DMA_Init+0xec>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af8:	211c      	movs	r1, #28
 8000afa:	400b      	ands	r3, r1
 8000afc:	210f      	movs	r1, #15
 8000afe:	4099      	lsls	r1, r3
 8000b00:	000b      	movs	r3, r1
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_DMA_Init+0xec>)
 8000b06:	400a      	ands	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_DMA_Init+0xec>)
 8000b0c:	6819      	ldr	r1, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	201c      	movs	r0, #28
 8000b18:	4003      	ands	r3, r0
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_DMA_Init+0xec>)
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2225      	movs	r2, #37	; 0x25
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2224      	movs	r2, #36	; 0x24
 8000b34:	2100      	movs	r1, #0
 8000b36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b004      	add	sp, #16
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	bffdfff8 	.word	0xbffdfff8
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	ffff800f 	.word	0xffff800f
 8000b50:	400200a8 	.word	0x400200a8

08000b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b62:	2317      	movs	r3, #23
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2224      	movs	r2, #36	; 0x24
 8000b6e:	5c9b      	ldrb	r3, [r3, r2]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d101      	bne.n	8000b78 <HAL_DMA_Start_IT+0x24>
 8000b74:	2302      	movs	r3, #2
 8000b76:	e04f      	b.n	8000c18 <HAL_DMA_Start_IT+0xc4>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2224      	movs	r2, #36	; 0x24
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2225      	movs	r2, #37	; 0x25
 8000b84:	5c9b      	ldrb	r3, [r3, r2]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d13a      	bne.n	8000c02 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2225      	movs	r2, #37	; 0x25
 8000b90:	2102      	movs	r1, #2
 8000b92:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	438a      	bics	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f92b 	bl	8000e0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d008      	beq.n	8000bd0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	210e      	movs	r1, #14
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e00f      	b.n	8000bf0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2104      	movs	r1, #4
 8000bdc:	438a      	bics	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	210a      	movs	r1, #10
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e007      	b.n	8000c12 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2224      	movs	r2, #36	; 0x24
 8000c06:	2100      	movs	r1, #0
 8000c08:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c0a:	2317      	movs	r3, #23
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	2202      	movs	r2, #2
 8000c10:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000c12:	2317      	movs	r3, #23
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	781b      	ldrb	r3, [r3, #0]
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b006      	add	sp, #24
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2225      	movs	r2, #37	; 0x25
 8000c34:	5c9b      	ldrb	r3, [r3, r2]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d007      	beq.n	8000c4c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2204      	movs	r2, #4
 8000c40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c42:	230f      	movs	r3, #15
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e02a      	b.n	8000ca2 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	210e      	movs	r1, #14
 8000c58:	438a      	bics	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2101      	movs	r1, #1
 8000c68:	438a      	bics	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c70:	221c      	movs	r2, #28
 8000c72:	401a      	ands	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4091      	lsls	r1, r2
 8000c7c:	000a      	movs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2225      	movs	r2, #37	; 0x25
 8000c84:	2101      	movs	r1, #1
 8000c86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2224      	movs	r2, #36	; 0x24
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d004      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	0010      	movs	r0, r2
 8000ca0:	4798      	blx	r3
    }
  }
  return status;
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b004      	add	sp, #16
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	221c      	movs	r2, #28
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d026      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x7a>
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d022      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2220      	movs	r2, #32
 8000cec:	4013      	ands	r3, r2
 8000cee:	d107      	bne.n	8000d00 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	438a      	bics	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	221c      	movs	r2, #28
 8000d06:	401a      	ands	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	4091      	lsls	r1, r2
 8000d10:	000a      	movs	r2, r1
 8000d12:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d100      	bne.n	8000d1e <HAL_DMA_IRQHandler+0x6e>
 8000d1c:	e071      	b.n	8000e02 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	0010      	movs	r0, r2
 8000d26:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000d28:	e06b      	b.n	8000e02 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	221c      	movs	r2, #28
 8000d30:	4013      	ands	r3, r2
 8000d32:	2202      	movs	r2, #2
 8000d34:	409a      	lsls	r2, r3
 8000d36:	0013      	movs	r3, r2
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d02d      	beq.n	8000d9a <HAL_DMA_IRQHandler+0xea>
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2202      	movs	r2, #2
 8000d42:	4013      	ands	r3, r2
 8000d44:	d029      	beq.n	8000d9a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	210a      	movs	r1, #10
 8000d5e:	438a      	bics	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2225      	movs	r2, #37	; 0x25
 8000d66:	2101      	movs	r1, #1
 8000d68:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	221c      	movs	r2, #28
 8000d70:	401a      	ands	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	2102      	movs	r1, #2
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2224      	movs	r2, #36	; 0x24
 8000d82:	2100      	movs	r1, #0
 8000d84:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d039      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	0010      	movs	r0, r2
 8000d96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d98:	e033      	b.n	8000e02 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	221c      	movs	r2, #28
 8000da0:	4013      	ands	r3, r2
 8000da2:	2208      	movs	r2, #8
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4013      	ands	r3, r2
 8000dac:	d02a      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x154>
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2208      	movs	r2, #8
 8000db2:	4013      	ands	r3, r2
 8000db4:	d026      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	210e      	movs	r1, #14
 8000dc2:	438a      	bics	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	221c      	movs	r2, #28
 8000dcc:	401a      	ands	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2225      	movs	r2, #37	; 0x25
 8000de4:	2101      	movs	r1, #1
 8000de6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2224      	movs	r2, #36	; 0x24
 8000dec:	2100      	movs	r1, #0
 8000dee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	0010      	movs	r0, r2
 8000e00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46c0      	nop			; (mov r8, r8)
}
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b004      	add	sp, #16
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	221c      	movs	r2, #28
 8000e20:	401a      	ands	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2101      	movs	r1, #1
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d108      	bne.n	8000e50 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e4e:	e007      	b.n	8000e60 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	60da      	str	r2, [r3, #12]
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b004      	add	sp, #16
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e7e:	e155      	b.n	800112c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d100      	bne.n	8000e98 <HAL_GPIO_Init+0x30>
 8000e96:	e146      	b.n	8001126 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x40>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b12      	cmp	r3, #18
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	58d3      	ldr	r3, [r2, r3]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2207      	movs	r2, #7
 8000eba:	4013      	ands	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	43da      	mvns	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	409a      	lsls	r2, r3
 8000eda:	0013      	movs	r3, r2
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	6939      	ldr	r1, [r7, #16]
 8000eee:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d00b      	beq.n	8000f10 <HAL_GPIO_Init+0xa8>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	2b11      	cmp	r3, #17
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	401a      	ands	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	055b      	lsls	r3, r3, #21
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <HAL_GPIO_Init+0x17c>
 8000fe2:	e0a0      	b.n	8001126 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe4:	4b57      	ldr	r3, [pc, #348]	; (8001144 <HAL_GPIO_Init+0x2dc>)
 8000fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe8:	4b56      	ldr	r3, [pc, #344]	; (8001144 <HAL_GPIO_Init+0x2dc>)
 8000fea:	2101      	movs	r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff0:	4a55      	ldr	r2, [pc, #340]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	589b      	ldr	r3, [r3, r2]
 8000ffc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2203      	movs	r2, #3
 8001002:	4013      	ands	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	409a      	lsls	r2, r3
 800100a:	0013      	movs	r3, r2
 800100c:	43da      	mvns	r2, r3
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	23a0      	movs	r3, #160	; 0xa0
 8001018:	05db      	lsls	r3, r3, #23
 800101a:	429a      	cmp	r2, r3
 800101c:	d01f      	beq.n	800105e <HAL_GPIO_Init+0x1f6>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x2e4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0x1f2>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x2e8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0x1ee>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_GPIO_Init+0x2ec>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00d      	beq.n	8001052 <HAL_GPIO_Init+0x1ea>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a47      	ldr	r2, [pc, #284]	; (8001158 <HAL_GPIO_Init+0x2f0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x1e6>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a46      	ldr	r2, [pc, #280]	; (800115c <HAL_GPIO_Init+0x2f4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_GPIO_Init+0x1e2>
 8001046:	2305      	movs	r3, #5
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x1f8>
 800104a:	2306      	movs	r3, #6
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x1f8>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x1f8>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x1f8>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x1f8>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x1f8>
 800105e:	2300      	movs	r3, #0
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	2103      	movs	r1, #3
 8001064:	400a      	ands	r2, r1
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001070:	4935      	ldr	r1, [pc, #212]	; (8001148 <HAL_GPIO_Init+0x2e0>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43da      	mvns	r2, r3
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	4013      	ands	r3, r2
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43da      	mvns	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	4013      	ands	r3, r2
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	035b      	lsls	r3, r3, #13
 80010ea:	4013      	ands	r3, r2
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43da      	mvns	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	039b      	lsls	r3, r3, #14
 8001114:	4013      	ands	r3, r2
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_GPIO_Init+0x2f8>)
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	40da      	lsrs	r2, r3
 8001134:	1e13      	subs	r3, r2, #0
 8001136:	d000      	beq.n	800113a <HAL_GPIO_Init+0x2d2>
 8001138:	e6a2      	b.n	8000e80 <HAL_GPIO_Init+0x18>
  }
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b006      	add	sp, #24
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000
 800114c:	50000400 	.word	0x50000400
 8001150:	50000800 	.word	0x50000800
 8001154:	50000c00 	.word	0x50000c00
 8001158:	50001000 	.word	0x50001000
 800115c:	50001c00 	.word	0x50001c00
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	0008      	movs	r0, r1
 800116e:	0011      	movs	r1, r2
 8001170:	1cbb      	adds	r3, r7, #2
 8001172:	1c02      	adds	r2, r0, #0
 8001174:	801a      	strh	r2, [r3, #0]
 8001176:	1c7b      	adds	r3, r7, #1
 8001178:	1c0a      	adds	r2, r1, #0
 800117a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800117c:	1c7b      	adds	r3, r7, #1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001184:	1cbb      	adds	r3, r7, #2
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800118e:	1cbb      	adds	r3, r7, #2
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	000a      	movs	r2, r1
 80011a8:	1cbb      	adds	r3, r7, #2
 80011aa:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695a      	ldr	r2, [r3, #20]
 80011b0:	1cbb      	adds	r3, r7, #2
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	405a      	eors	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	615a      	str	r2, [r3, #20]
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e082      	b.n	80012dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2241      	movs	r2, #65	; 0x41
 80011da:	5c9b      	ldrb	r3, [r3, r2]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	2100      	movs	r1, #0
 80011e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	0018      	movs	r0, r3
 80011ee:	f003 fb2d 	bl	800484c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2241      	movs	r2, #65	; 0x41
 80011f6:	2124      	movs	r1, #36	; 0x24
 80011f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	438a      	bics	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4934      	ldr	r1, [pc, #208]	; (80012e4 <HAL_I2C_Init+0x120>)
 8001214:	400a      	ands	r2, r1
 8001216:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4931      	ldr	r1, [pc, #196]	; (80012e8 <HAL_I2C_Init+0x124>)
 8001224:	400a      	ands	r2, r1
 8001226:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d108      	bne.n	8001242 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	0209      	lsls	r1, r1, #8
 800123c:	430a      	orrs	r2, r1
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	e007      	b.n	8001252 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2184      	movs	r1, #132	; 0x84
 800124c:	0209      	lsls	r1, r1, #8
 800124e:	430a      	orrs	r2, r1
 8001250:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d104      	bne.n	8001264 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	491f      	ldr	r1, [pc, #124]	; (80012ec <HAL_I2C_Init+0x128>)
 8001270:	430a      	orrs	r2, r1
 8001272:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	491a      	ldr	r1, [pc, #104]	; (80012e8 <HAL_I2C_Init+0x124>)
 8001280:	400a      	ands	r2, r1
 8001282:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	431a      	orrs	r2, r3
 800128e:	0011      	movs	r1, r2
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	021a      	lsls	r2, r3, #8
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69d9      	ldr	r1, [r3, #28]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1a      	ldr	r2, [r3, #32]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2241      	movs	r2, #65	; 0x41
 80012c8:	2120      	movs	r1, #32
 80012ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2242      	movs	r2, #66	; 0x42
 80012d6:	2100      	movs	r1, #0
 80012d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	f0ffffff 	.word	0xf0ffffff
 80012e8:	ffff7fff 	.word	0xffff7fff
 80012ec:	02008000 	.word	0x02008000

080012f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	68f9      	ldr	r1, [r7, #12]
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	4798      	blx	r3
  }
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b004      	add	sp, #16
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	001a      	movs	r2, r3
 8001342:	2301      	movs	r3, #1
 8001344:	4013      	ands	r3, r2
 8001346:	d010      	beq.n	800136a <HAL_I2C_ER_IRQHandler+0x46>
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	09db      	lsrs	r3, r3, #7
 800134c:	001a      	movs	r2, r3
 800134e:	2301      	movs	r3, #1
 8001350:	4013      	ands	r3, r2
 8001352:	d00a      	beq.n	800136a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001358:	2201      	movs	r2, #1
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	0052      	lsls	r2, r2, #1
 8001368:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	0a9b      	lsrs	r3, r3, #10
 800136e:	001a      	movs	r2, r3
 8001370:	2301      	movs	r3, #1
 8001372:	4013      	ands	r3, r2
 8001374:	d010      	beq.n	8001398 <HAL_I2C_ER_IRQHandler+0x74>
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	09db      	lsrs	r3, r3, #7
 800137a:	001a      	movs	r2, r3
 800137c:	2301      	movs	r3, #1
 800137e:	4013      	ands	r3, r2
 8001380:	d00a      	beq.n	8001398 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	2208      	movs	r2, #8
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	00d2      	lsls	r2, r2, #3
 8001396:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	0a5b      	lsrs	r3, r3, #9
 800139c:	001a      	movs	r2, r3
 800139e:	2301      	movs	r3, #1
 80013a0:	4013      	ands	r3, r2
 80013a2:	d010      	beq.n	80013c6 <HAL_I2C_ER_IRQHandler+0xa2>
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	09db      	lsrs	r3, r3, #7
 80013a8:	001a      	movs	r2, r3
 80013aa:	2301      	movs	r3, #1
 80013ac:	4013      	ands	r3, r2
 80013ae:	d00a      	beq.n	80013c6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	2202      	movs	r2, #2
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	220b      	movs	r2, #11
 80013d0:	4013      	ands	r3, r2
 80013d2:	d005      	beq.n	80013e0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0011      	movs	r1, r2
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 fb70 	bl	8001ac0 <I2C_ITError>
  }
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b006      	add	sp, #24
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	0008      	movs	r0, r1
 8001412:	0011      	movs	r1, r2
 8001414:	1cfb      	adds	r3, r7, #3
 8001416:	1c02      	adds	r2, r0, #0
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	003b      	movs	r3, r7
 800141c:	1c0a      	adds	r2, r1, #0
 800141e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}

08001458 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	5c9b      	ldrb	r3, [r3, r2]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <I2C_Slave_ISR_IT+0x20>
 8001474:	2302      	movs	r3, #2
 8001476:	e0fe      	b.n	8001676 <I2C_Slave_ISR_IT+0x21e>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	2101      	movs	r1, #1
 800147e:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	001a      	movs	r2, r3
 8001486:	2301      	movs	r3, #1
 8001488:	4013      	ands	r3, r2
 800148a:	d054      	beq.n	8001536 <I2C_Slave_ISR_IT+0xde>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	001a      	movs	r2, r3
 8001492:	2301      	movs	r3, #1
 8001494:	4013      	ands	r3, r2
 8001496:	d04e      	beq.n	8001536 <I2C_Slave_ISR_IT+0xde>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d12d      	bne.n	80014fe <I2C_Slave_ISR_IT+0xa6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2241      	movs	r2, #65	; 0x41
 80014a6:	5c9b      	ldrb	r3, [r3, r2]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b28      	cmp	r3, #40	; 0x28
 80014ac:	d10b      	bne.n	80014c6 <I2C_Slave_ISR_IT+0x6e>
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	049b      	lsls	r3, r3, #18
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d106      	bne.n	80014c6 <I2C_Slave_ISR_IT+0x6e>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, ITFlags);
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	0011      	movs	r1, r2
 80014be:	0018      	movs	r0, r3
 80014c0:	f000 faa4 	bl	8001a0c <I2C_ITListenCplt>
 80014c4:	e036      	b.n	8001534 <I2C_Slave_ISR_IT+0xdc>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2241      	movs	r2, #65	; 0x41
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b29      	cmp	r3, #41	; 0x29
 80014d0:	d110      	bne.n	80014f4 <I2C_Slave_ISR_IT+0x9c>
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	4a6a      	ldr	r2, [pc, #424]	; (8001680 <I2C_Slave_ISR_IT+0x228>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00c      	beq.n	80014f4 <I2C_Slave_ISR_IT+0x9c>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2210      	movs	r2, #16
 80014e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 fbbd 	bl	8001c64 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 f96e 	bl	80017ce <I2C_ITSlaveSeqCplt>
 80014f2:	e01f      	b.n	8001534 <I2C_Slave_ISR_IT+0xdc>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2210      	movs	r2, #16
 80014fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80014fc:	e0a1      	b.n	8001642 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2210      	movs	r2, #16
 8001504:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	2204      	movs	r2, #4
 800150c:	431a      	orrs	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <I2C_Slave_ISR_IT+0xcc>
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	045b      	lsls	r3, r3, #17
 800151e:	429a      	cmp	r2, r3
 8001520:	d000      	beq.n	8001524 <I2C_Slave_ISR_IT+0xcc>
 8001522:	e08e      	b.n	8001642 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	0011      	movs	r1, r2
 800152c:	0018      	movs	r0, r3
 800152e:	f000 fac7 	bl	8001ac0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001532:	e086      	b.n	8001642 <I2C_Slave_ISR_IT+0x1ea>
 8001534:	e085      	b.n	8001642 <I2C_Slave_ISR_IT+0x1ea>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	001a      	movs	r2, r3
 800153c:	2301      	movs	r3, #1
 800153e:	4013      	ands	r3, r2
 8001540:	d035      	beq.n	80015ae <I2C_Slave_ISR_IT+0x156>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	001a      	movs	r2, r3
 8001548:	2301      	movs	r3, #1
 800154a:	4013      	ands	r3, r2
 800154c:	d02f      	beq.n	80015ae <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01c      	beq.n	8001592 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Remove RXNE flag on temporary variable as read done */
      ITFlags &= ~I2C_FLAG_RXNE;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2204      	movs	r2, #4
 800155c:	4393      	bics	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157c:	3b01      	subs	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001588:	b29b      	uxth	r3, r3
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d154      	bne.n	8001646 <I2C_Slave_ISR_IT+0x1ee>
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4a38      	ldr	r2, [pc, #224]	; (8001680 <I2C_Slave_ISR_IT+0x228>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d050      	beq.n	8001646 <I2C_Slave_ISR_IT+0x1ee>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 f911 	bl	80017ce <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80015ac:	e04b      	b.n	8001646 <I2C_Slave_ISR_IT+0x1ee>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	001a      	movs	r2, r3
 80015b4:	2301      	movs	r3, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	d00c      	beq.n	80015d4 <I2C_Slave_ISR_IT+0x17c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	001a      	movs	r2, r3
 80015c0:	2301      	movs	r3, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	d006      	beq.n	80015d4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	0011      	movs	r1, r2
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f859 	bl	8001684 <I2C_ITAddrCplt>
 80015d2:	e039      	b.n	8001648 <I2C_Slave_ISR_IT+0x1f0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	001a      	movs	r2, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	4013      	ands	r3, r2
 80015de:	d033      	beq.n	8001648 <I2C_Slave_ISR_IT+0x1f0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	001a      	movs	r2, r3
 80015e6:	2301      	movs	r3, #1
 80015e8:	4013      	ands	r3, r2
 80015ea:	d02d      	beq.n	8001648 <I2C_Slave_ISR_IT+0x1f0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d018      	beq.n	8001628 <I2C_Slave_ISR_IT+0x1d0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29b      	uxth	r3, r3
 8001612:	3b01      	subs	r3, #1
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161e:	3b01      	subs	r3, #1
 8001620:	b29a      	uxth	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	851a      	strh	r2, [r3, #40]	; 0x28
 8001626:	e00f      	b.n	8001648 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	045b      	lsls	r3, r3, #17
 800162e:	429a      	cmp	r2, r3
 8001630:	d002      	beq.n	8001638 <I2C_Slave_ISR_IT+0x1e0>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d107      	bne.n	8001648 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	0018      	movs	r0, r3
 800163c:	f000 f8c7 	bl	80017ce <I2C_ITSlaveSeqCplt>
 8001640:	e002      	b.n	8001648 <I2C_Slave_ISR_IT+0x1f0>
    if (hi2c->XferCount == 0U)
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	e000      	b.n	8001648 <I2C_Slave_ISR_IT+0x1f0>
    if ((hi2c->XferCount == 0U) && \
 8001646:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	001a      	movs	r2, r3
 800164e:	2301      	movs	r3, #1
 8001650:	4013      	ands	r3, r2
 8001652:	d00b      	beq.n	800166c <I2C_Slave_ISR_IT+0x214>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	001a      	movs	r2, r3
 800165a:	2301      	movs	r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d005      	beq.n	800166c <I2C_Slave_ISR_IT+0x214>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	0011      	movs	r1, r2
 8001666:	0018      	movs	r0, r3
 8001668:	f000 f8f2 	bl	8001850 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2240      	movs	r2, #64	; 0x40
 8001670:	2100      	movs	r1, #0
 8001672:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b006      	add	sp, #24
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	ffff0000 	.word	0xffff0000

08001684 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2241      	movs	r2, #65	; 0x41
 8001692:	5c9b      	ldrb	r3, [r3, r2]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	001a      	movs	r2, r3
 8001698:	2328      	movs	r3, #40	; 0x28
 800169a:	4013      	ands	r3, r2
 800169c:	2b28      	cmp	r3, #40	; 0x28
 800169e:	d000      	beq.n	80016a2 <I2C_ITAddrCplt+0x1e>
 80016a0:	e089      	b.n	80017b6 <I2C_ITAddrCplt+0x132>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	0c1b      	lsrs	r3, r3, #16
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	230f      	movs	r3, #15
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2101      	movs	r1, #1
 80016b2:	400a      	ands	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	b29a      	uxth	r2, r3
 80016c0:	230c      	movs	r3, #12
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	21fe      	movs	r1, #254	; 0xfe
 80016c6:	400a      	ands	r2, r1
 80016c8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	230a      	movs	r3, #10
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	0592      	lsls	r2, r2, #22
 80016d8:	0d92      	lsrs	r2, r2, #22
 80016da:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	2308      	movs	r3, #8
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	21fe      	movs	r1, #254	; 0xfe
 80016ea:	400a      	ands	r2, r1
 80016ec:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d14b      	bne.n	800178e <I2C_ITAddrCplt+0x10a>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80016f6:	230a      	movs	r3, #10
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	09db      	lsrs	r3, r3, #7
 80016fe:	b29a      	uxth	r2, r3
 8001700:	230c      	movs	r3, #12
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	4053      	eors	r3, r2
 8001708:	b29b      	uxth	r3, r3
 800170a:	001a      	movs	r2, r3
 800170c:	2306      	movs	r3, #6
 800170e:	4013      	ands	r3, r2
 8001710:	d124      	bne.n	800175c <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 8001712:	230c      	movs	r3, #12
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	220a      	movs	r2, #10
 8001718:	18ba      	adds	r2, r7, r2
 800171a:	8812      	ldrh	r2, [r2, #0]
 800171c:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	2b02      	cmp	r3, #2
 800172e:	d14a      	bne.n	80017c6 <I2C_ITAddrCplt+0x142>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2208      	movs	r2, #8
 800173c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2240      	movs	r2, #64	; 0x40
 8001742:	2100      	movs	r1, #0
 8001744:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001746:	230c      	movs	r3, #12
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	230f      	movs	r3, #15
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fe57 	bl	8001408 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800175a:	e034      	b.n	80017c6 <I2C_ITAddrCplt+0x142>
        slaveaddrcode = ownadd2code;
 800175c:	240c      	movs	r4, #12
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2208      	movs	r2, #8
 8001762:	18ba      	adds	r2, r7, r2
 8001764:	8812      	ldrh	r2, [r2, #0]
 8001766:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2104      	movs	r1, #4
 800176c:	0018      	movs	r0, r3
 800176e:	f000 fac1 	bl	8001cf4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2240      	movs	r2, #64	; 0x40
 8001776:	2100      	movs	r1, #0
 8001778:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800177a:	193b      	adds	r3, r7, r4
 800177c:	881a      	ldrh	r2, [r3, #0]
 800177e:	230f      	movs	r3, #15
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	7819      	ldrb	r1, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff fe3e 	bl	8001408 <HAL_I2C_AddrCallback>
}
 800178c:	e01b      	b.n	80017c6 <I2C_ITAddrCplt+0x142>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2104      	movs	r1, #4
 8001792:	0018      	movs	r0, r3
 8001794:	f000 faae 	bl	8001cf4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80017a0:	230c      	movs	r3, #12
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	881a      	ldrh	r2, [r3, #0]
 80017a6:	230f      	movs	r3, #15
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	7819      	ldrb	r1, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7ff fe2a 	bl	8001408 <HAL_I2C_AddrCallback>
}
 80017b4:	e007      	b.n	80017c6 <I2C_ITAddrCplt+0x142>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2208      	movs	r2, #8
 80017bc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2240      	movs	r2, #64	; 0x40
 80017c2:	2100      	movs	r1, #0
 80017c4:	5499      	strb	r1, [r3, r2]
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b005      	add	sp, #20
 80017cc:	bd90      	pop	{r4, r7, pc}

080017ce <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2242      	movs	r2, #66	; 0x42
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2241      	movs	r2, #65	; 0x41
 80017e2:	5c9b      	ldrb	r3, [r3, r2]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b29      	cmp	r3, #41	; 0x29
 80017e8:	d114      	bne.n	8001814 <I2C_ITSlaveSeqCplt+0x46>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2241      	movs	r2, #65	; 0x41
 80017ee:	2128      	movs	r1, #40	; 0x28
 80017f0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2221      	movs	r2, #33	; 0x21
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2101      	movs	r1, #1
 80017fc:	0018      	movs	r0, r3
 80017fe:	f000 fa79 	bl	8001cf4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2240      	movs	r2, #64	; 0x40
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff fdeb 	bl	80013e8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001812:	e019      	b.n	8001848 <I2C_ITSlaveSeqCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2241      	movs	r2, #65	; 0x41
 8001818:	5c9b      	ldrb	r3, [r3, r2]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b2a      	cmp	r3, #42	; 0x2a
 800181e:	d113      	bne.n	8001848 <I2C_ITSlaveSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2241      	movs	r2, #65	; 0x41
 8001824:	2128      	movs	r1, #40	; 0x28
 8001826:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2222      	movs	r2, #34	; 0x22
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2102      	movs	r1, #2
 8001832:	0018      	movs	r0, r3
 8001834:	f000 fa5e 	bl	8001cf4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	2100      	movs	r1, #0
 800183e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0018      	movs	r0, r3
 8001844:	f7ff fdd8 	bl	80013f8 <HAL_I2C_SlaveRxCpltCallback>
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}

08001850 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2220      	movs	r2, #32
 8001868:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2107      	movs	r1, #7
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fa40 	bl	8001cf4 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	0209      	lsls	r1, r1, #8
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	495c      	ldr	r1, [pc, #368]	; (8001a04 <I2C_ITSlaveCplt+0x1b4>)
 8001892:	400a      	ands	r2, r1
 8001894:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0018      	movs	r0, r3
 800189a:	f000 f9e3 	bl	8001c64 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0b9b      	lsrs	r3, r3, #14
 80018a2:	001a      	movs	r2, r3
 80018a4:	2301      	movs	r3, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	d00b      	beq.n	80018c2 <I2C_ITSlaveCplt+0x72>
  {
    if (hi2c->hdmatx != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d018      	beq.n	80018e4 <I2C_ITSlaveCplt+0x94>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018c0:	e010      	b.n	80018e4 <I2C_ITSlaveCplt+0x94>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	0bdb      	lsrs	r3, r3, #15
 80018c6:	001a      	movs	r2, r3
 80018c8:	2301      	movs	r3, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	d00a      	beq.n	80018e4 <I2C_ITSlaveCplt+0x94>
  {
    if (hi2c->hdmarx != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <I2C_ITSlaveCplt+0x94>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	001a      	movs	r2, r3
 80018ea:	2301      	movs	r3, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	d020      	beq.n	8001932 <I2C_ITSlaveCplt+0xe2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    ITFlags &= ~I2C_FLAG_RXNE;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2204      	movs	r2, #4
 80018f4:	4393      	bics	r3, r2
 80018f6:	603b      	str	r3, [r7, #0]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00c      	beq.n	8001932 <I2C_ITSlaveCplt+0xe2>
    {
      hi2c->XferSize--;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <I2C_ITSlaveCplt+0xf8>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	2204      	movs	r2, #4
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2242      	movs	r2, #66	; 0x42
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <I2C_ITSlaveCplt+0x13c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f000 f8a7 	bl	8001ac0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2241      	movs	r2, #65	; 0x41
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b28      	cmp	r3, #40	; 0x28
 800197c:	d13e      	bne.n	80019fc <I2C_ITSlaveCplt+0x1ac>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, ITFlags);
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0011      	movs	r1, r2
 8001984:	0018      	movs	r0, r3
 8001986:	f000 f841 	bl	8001a0c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800198a:	e037      	b.n	80019fc <I2C_ITSlaveCplt+0x1ac>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <I2C_ITSlaveCplt+0x1b8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <I2C_ITSlaveCplt+0x16e>
    I2C_ITSlaveSeqCplt(hi2c);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff ff18 	bl	80017ce <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <I2C_ITSlaveCplt+0x1b8>)
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2241      	movs	r2, #65	; 0x41
 80019a8:	2120      	movs	r1, #32
 80019aa:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	2100      	movs	r1, #0
 80019b2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff fd36 	bl	8001428 <HAL_I2C_ListenCpltCallback>
}
 80019bc:	e01e      	b.n	80019fc <I2C_ITSlaveCplt+0x1ac>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2241      	movs	r2, #65	; 0x41
 80019c2:	5c9b      	ldrb	r3, [r3, r2]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b22      	cmp	r3, #34	; 0x22
 80019c8:	d10c      	bne.n	80019e4 <I2C_ITSlaveCplt+0x194>
    hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2241      	movs	r2, #65	; 0x41
 80019ce:	2120      	movs	r1, #32
 80019d0:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff fd0b 	bl	80013f8 <HAL_I2C_SlaveRxCpltCallback>
}
 80019e2:	e00b      	b.n	80019fc <I2C_ITSlaveCplt+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2241      	movs	r2, #65	; 0x41
 80019e8:	2120      	movs	r1, #32
 80019ea:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2240      	movs	r2, #64	; 0x40
 80019f0:	2100      	movs	r1, #0
 80019f2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff fcf6 	bl	80013e8 <HAL_I2C_SlaveTxCpltCallback>
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	fe00e800 	.word	0xfe00e800
 8001a08:	ffff0000 	.word	0xffff0000

08001a0c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a28      	ldr	r2, [pc, #160]	; (8001abc <I2C_ITListenCplt+0xb0>)
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2241      	movs	r2, #65	; 0x41
 8001a26:	2120      	movs	r1, #32
 8001a28:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2242      	movs	r2, #66	; 0x42
 8001a2e:	2100      	movs	r1, #0
 8001a30:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	2301      	movs	r3, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d026      	beq.n	8001a92 <I2C_ITListenCplt+0x86>
  {
    /* Remove RXNE flag on temporary variable as read done */
    ITFlags &= ~I2C_FLAG_RXNE;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2204      	movs	r2, #4
 8001a48:	4393      	bics	r3, r2
 8001a4a:	603b      	str	r3, [r7, #0]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d012      	beq.n	8001a92 <I2C_ITListenCplt+0x86>
    {
      hi2c->XferSize--;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2107      	movs	r1, #7
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f92c 	bl	8001cf4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff fcba 	bl	8001428 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	ffff0000 	.word	0xffff0000

08001ac0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001aca:	200f      	movs	r0, #15
 8001acc:	183b      	adds	r3, r7, r0
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	2141      	movs	r1, #65	; 0x41
 8001ad2:	5c52      	ldrb	r2, [r2, r1]
 8001ad4:	701a      	strb	r2, [r3, #0]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2242      	movs	r2, #66	; 0x42
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a5b      	ldr	r2, [pc, #364]	; (8001c50 <I2C_ITError+0x190>)
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001af6:	183b      	adds	r3, r7, r0
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b28      	cmp	r3, #40	; 0x28
 8001afc:	d009      	beq.n	8001b12 <I2C_ITError+0x52>
 8001afe:	230f      	movs	r3, #15
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b29      	cmp	r3, #41	; 0x29
 8001b06:	d004      	beq.n	8001b12 <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8001b10:	d10f      	bne.n	8001b32 <I2C_ITError+0x72>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2103      	movs	r1, #3
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 f8ec 	bl	8001cf4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2241      	movs	r2, #65	; 0x41
 8001b20:	2128      	movs	r1, #40	; 0x28
 8001b22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a49      	ldr	r2, [pc, #292]	; (8001c54 <I2C_ITError+0x194>)
 8001b2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b30:	e014      	b.n	8001b5c <I2C_ITError+0x9c>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2107      	movs	r1, #7
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 f8dc 	bl	8001cf4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2241      	movs	r2, #65	; 0x41
 8001b40:	5c9b      	ldrb	r3, [r3, r2]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b60      	cmp	r3, #96	; 0x60
 8001b46:	d003      	beq.n	8001b50 <I2C_ITError+0x90>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2241      	movs	r2, #65	; 0x41
 8001b4c:	2120      	movs	r1, #32
 8001b4e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	01db      	lsls	r3, r3, #7
 8001b66:	401a      	ands	r2, r3
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	01db      	lsls	r3, r3, #7
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d122      	bne.n	8001bb6 <I2C_ITError+0xf6>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4937      	ldr	r1, [pc, #220]	; (8001c58 <I2C_ITError+0x198>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d05e      	beq.n	8001c46 <I2C_ITError+0x186>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <I2C_ITError+0x19c>)
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff f83f 	bl	8000c20 <HAL_DMA_Abort_IT>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d04f      	beq.n	8001c46 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	4790      	blx	r2
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001bb4:	e047      	b.n	8001c46 <I2C_ITError+0x186>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d122      	bne.n	8001c10 <I2C_ITError+0x150>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4922      	ldr	r1, [pc, #136]	; (8001c60 <I2C_ITError+0x1a0>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d031      	beq.n	8001c46 <I2C_ITError+0x186>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <I2C_ITError+0x19c>)
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2240      	movs	r2, #64	; 0x40
 8001bee:	2100      	movs	r1, #0
 8001bf0:	5499      	strb	r1, [r3, r2]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7ff f812 	bl	8000c20 <HAL_DMA_Abort_IT>
 8001bfc:	1e03      	subs	r3, r0, #0
 8001bfe:	d022      	beq.n	8001c46 <I2C_ITError+0x186>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	4790      	blx	r2
}
 8001c0e:	e01a      	b.n	8001c46 <I2C_ITError+0x186>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2241      	movs	r2, #65	; 0x41
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b60      	cmp	r3, #96	; 0x60
 8001c1a:	d10c      	bne.n	8001c36 <I2C_ITError+0x176>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2241      	movs	r2, #65	; 0x41
 8001c20:	2120      	movs	r1, #32
 8001c22:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	2100      	movs	r1, #0
 8001c2a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff fc0a 	bl	8001448 <HAL_I2C_AbortCpltCallback>
}
 8001c34:	e007      	b.n	8001c46 <I2C_ITError+0x186>
    __HAL_UNLOCK(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff fbf9 	bl	8001438 <HAL_I2C_ErrorCallback>
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	ffff0000 	.word	0xffff0000
 8001c54:	08001459 	.word	0x08001459
 8001c58:	ffffbfff 	.word	0xffffbfff
 8001c5c:	08001ca9 	.word	0x08001ca9
 8001c60:	ffff7fff 	.word	0xffff7fff

08001c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d103      	bne.n	8001c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d007      	beq.n	8001ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	619a      	str	r2, [r3, #24]
  }
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	2200      	movs	r2, #0
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2241      	movs	r2, #65	; 0x41
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b60      	cmp	r3, #96	; 0x60
 8001cd0:	d108      	bne.n	8001ce4 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2241      	movs	r2, #65	; 0x41
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff fbb3 	bl	8001448 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ce2:	e003      	b.n	8001cec <I2C_DMAAbort+0x44>
    HAL_I2C_ErrorCallback(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff fba6 	bl	8001438 <HAL_I2C_ErrorCallback>
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b004      	add	sp, #16
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	1cbb      	adds	r3, r7, #2
 8001d00:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001d06:	1cbb      	adds	r3, r7, #2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d010      	beq.n	8001d32 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2242      	movs	r2, #66	; 0x42
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2241      	movs	r2, #65	; 0x41
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	001a      	movs	r2, r3
 8001d22:	2328      	movs	r3, #40	; 0x28
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b28      	cmp	r3, #40	; 0x28
 8001d28:	d003      	beq.n	8001d32 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	22b0      	movs	r2, #176	; 0xb0
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001d32:	1cbb      	adds	r3, r7, #2
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d010      	beq.n	8001d5e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2244      	movs	r2, #68	; 0x44
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2241      	movs	r2, #65	; 0x41
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	2328      	movs	r3, #40	; 0x28
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b28      	cmp	r3, #40	; 0x28
 8001d54:	d003      	beq.n	8001d5e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	22b0      	movs	r2, #176	; 0xb0
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001d5e:	1cbb      	adds	r3, r7, #2
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	2204      	movs	r2, #4
 8001d64:	4013      	ands	r3, r2
 8001d66:	d003      	beq.n	8001d70 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	22b8      	movs	r2, #184	; 0xb8
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001d70:	1cbb      	adds	r3, r7, #2
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	2211      	movs	r2, #17
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b11      	cmp	r3, #17
 8001d7a:	d103      	bne.n	8001d84 <I2C_Disable_IRQ+0x90>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2290      	movs	r2, #144	; 0x90
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001d84:	1cbb      	adds	r3, r7, #2
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	2212      	movs	r2, #18
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d103      	bne.n	8001d98 <I2C_Disable_IRQ+0xa4>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001d98:	1cbb      	adds	r3, r7, #2
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	2212      	movs	r2, #18
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b12      	cmp	r3, #18
 8001da2:	d103      	bne.n	8001dac <I2C_Disable_IRQ+0xb8>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43d9      	mvns	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	400a      	ands	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2241      	movs	r2, #65	; 0x41
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d138      	bne.n	8001e50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2240      	movs	r2, #64	; 0x40
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e032      	b.n	8001e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	2101      	movs	r1, #1
 8001df2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2241      	movs	r2, #65	; 0x41
 8001df8:	2124      	movs	r1, #36	; 0x24
 8001dfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	438a      	bics	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4911      	ldr	r1, [pc, #68]	; (8001e5c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2241      	movs	r2, #65	; 0x41
 8001e40:	2120      	movs	r1, #32
 8001e42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2240      	movs	r2, #64	; 0x40
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e000      	b.n	8001e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
  }
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	ffffefff 	.word	0xffffefff

08001e60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2241      	movs	r2, #65	; 0x41
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d139      	bne.n	8001eea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e033      	b.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	2101      	movs	r1, #1
 8001e8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2241      	movs	r2, #65	; 0x41
 8001e90:	2124      	movs	r1, #36	; 0x24
 8001e92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	438a      	bics	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2241      	movs	r2, #65	; 0x41
 8001eda:	2120      	movs	r1, #32
 8001edc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
  }
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	fffff0ff 	.word	0xfffff0ff

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f000 fb6a 	bl	80025e0 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0c:	4bc7      	ldr	r3, [pc, #796]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	220c      	movs	r2, #12
 8001f12:	4013      	ands	r3, r2
 8001f14:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f16:	4bc5      	ldr	r3, [pc, #788]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	025b      	lsls	r3, r3, #9
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0x36>
 8001f2c:	e07d      	b.n	800202a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d007      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d112      	bne.n	8001f60 <HAL_RCC_OscConfig+0x68>
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	025b      	lsls	r3, r3, #9
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4bb9      	ldr	r3, [pc, #740]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5a>
 8001f50:	e06a      	b.n	8002028 <HAL_RCC_OscConfig+0x130>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d166      	bne.n	8002028 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f000 fb40 	bl	80025e0 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x84>
 8001f6c:	4baf      	ldr	r3, [pc, #700]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4bae      	ldr	r3, [pc, #696]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	0249      	lsls	r1, r1, #9
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e027      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	23a0      	movs	r3, #160	; 0xa0
 8001f82:	02db      	lsls	r3, r3, #11
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d10e      	bne.n	8001fa6 <HAL_RCC_OscConfig+0xae>
 8001f88:	4ba8      	ldr	r3, [pc, #672]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4ba7      	ldr	r3, [pc, #668]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	02c9      	lsls	r1, r1, #11
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4ba5      	ldr	r3, [pc, #660]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4ba4      	ldr	r3, [pc, #656]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0249      	lsls	r1, r1, #9
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e012      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001fa6:	4ba1      	ldr	r3, [pc, #644]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4ba0      	ldr	r3, [pc, #640]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fac:	49a0      	ldr	r1, [pc, #640]	; (8002230 <HAL_RCC_OscConfig+0x338>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4b9e      	ldr	r3, [pc, #632]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4b9a      	ldr	r3, [pc, #616]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b99      	ldr	r3, [pc, #612]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001fc6:	499b      	ldr	r1, [pc, #620]	; (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d014      	beq.n	8001ffe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fa86 	bl	80004e4 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fde:	f7fe fa81 	bl	80004e4 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b64      	cmp	r3, #100	; 0x64
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e2f7      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff0:	4b8e      	ldr	r3, [pc, #568]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0xe6>
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fa71 	bl	80004e4 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f7fe fa6c 	bl	80004e4 <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e2e2      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800201a:	4b84      	ldr	r3, [pc, #528]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	4013      	ands	r3, r2
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x110>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2202      	movs	r2, #2
 8002030:	4013      	ands	r3, r2
 8002032:	d100      	bne.n	8002036 <HAL_RCC_OscConfig+0x13e>
 8002034:	e098      	b.n	8002168 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	2220      	movs	r2, #32
 8002040:	4013      	ands	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002044:	4b79      	ldr	r3, [pc, #484]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b78      	ldr	r3, [pc, #480]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800204a:	2120      	movs	r1, #32
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	2220      	movs	r2, #32
 8002054:	4393      	bics	r3, r2
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d13d      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1e8>
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d13a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800206a:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_RCC_OscConfig+0x186>
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e2b0      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b6b      	ldr	r3, [pc, #428]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a6d      	ldr	r2, [pc, #436]	; (8002238 <HAL_RCC_OscConfig+0x340>)
 8002084:	4013      	ands	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	021a      	lsls	r2, r3, #8
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002090:	430a      	orrs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002094:	4b65      	ldr	r3, [pc, #404]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2209      	movs	r2, #9
 800209a:	4393      	bics	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	4b63      	ldr	r3, [pc, #396]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 fbcb 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80020aa:	0001      	movs	r1, r0
 80020ac:	4b5f      	ldr	r3, [pc, #380]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	220f      	movs	r2, #15
 80020b4:	4013      	ands	r3, r2
 80020b6:	4a61      	ldr	r2, [pc, #388]	; (800223c <HAL_RCC_OscConfig+0x344>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	000a      	movs	r2, r1
 80020bc:	40da      	lsrs	r2, r3
 80020be:	4b60      	ldr	r3, [pc, #384]	; (8002240 <HAL_RCC_OscConfig+0x348>)
 80020c0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80020c2:	2513      	movs	r5, #19
 80020c4:	197c      	adds	r4, r7, r5
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7fe f9d6 	bl	8000478 <HAL_InitTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020d0:	197b      	adds	r3, r7, r5
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d047      	beq.n	8002168 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 80020d8:	2313      	movs	r3, #19
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	e27f      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d027      	beq.n	8002136 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2209      	movs	r2, #9
 80020ec:	4393      	bics	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	4b4e      	ldr	r3, [pc, #312]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7fe f9f4 	bl	80004e4 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002102:	f7fe f9ef 	bl	80004e4 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e265      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002114:	4b45      	ldr	r3, [pc, #276]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2204      	movs	r2, #4
 800211a:	4013      	ands	r3, r2
 800211c:	d0f1      	beq.n	8002102 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b43      	ldr	r3, [pc, #268]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a45      	ldr	r2, [pc, #276]	; (8002238 <HAL_RCC_OscConfig+0x340>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	021a      	lsls	r2, r3, #8
 800212e:	4b3f      	ldr	r3, [pc, #252]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	e018      	b.n	8002168 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800213c:	2101      	movs	r1, #1
 800213e:	438a      	bics	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe f9cf 	bl	80004e4 <HAL_GetTick>
 8002146:	0003      	movs	r3, r0
 8002148:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214c:	f7fe f9ca 	bl	80004e4 <HAL_GetTick>
 8002150:	0002      	movs	r2, r0
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e240      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2204      	movs	r2, #4
 8002164:	4013      	ands	r3, r2
 8002166:	d1f1      	bne.n	800214c <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2210      	movs	r2, #16
 800216e:	4013      	ands	r3, r2
 8002170:	d100      	bne.n	8002174 <HAL_RCC_OscConfig+0x27c>
 8002172:	e09e      	b.n	80022b2 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d13f      	bne.n	80021fa <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_RCC_OscConfig+0x334>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4013      	ands	r3, r2
 8002184:	d005      	beq.n	8002192 <HAL_RCC_OscConfig+0x29a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e226      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x34c>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1a      	ldr	r2, [r3, #32]
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	0a19      	lsrs	r1, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	061a      	lsls	r2, r3, #24
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	0b5b      	lsrs	r3, r3, #13
 80021c0:	3301      	adds	r3, #1
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	0212      	lsls	r2, r2, #8
 80021c6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_RCC_OscConfig+0x334>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	210f      	movs	r1, #15
 80021d0:	400b      	ands	r3, r1
 80021d2:	491a      	ldr	r1, [pc, #104]	; (800223c <HAL_RCC_OscConfig+0x344>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_OscConfig+0x348>)
 80021da:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80021dc:	2513      	movs	r5, #19
 80021de:	197c      	adds	r4, r7, r5
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe f949 	bl	8000478 <HAL_InitTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021ea:	197b      	adds	r3, r7, r5
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d05f      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 80021f2:	2313      	movs	r3, #19
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	e1f2      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03d      	beq.n	800227e <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_OscConfig+0x334>)
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0049      	lsls	r1, r1, #1
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe f968 	bl	80004e4 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002218:	e016      	b.n	8002248 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221a:	f7fe f963 	bl	80004e4 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d90f      	bls.n	8002248 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1d9      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
 800222c:	40021000 	.word	0x40021000
 8002230:	fffeffff 	.word	0xfffeffff
 8002234:	fffbffff 	.word	0xfffbffff
 8002238:	ffffe0ff 	.word	0xffffe0ff
 800223c:	08004cf4 	.word	0x08004cf4
 8002240:	20000000 	.word	0x20000000
 8002244:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002248:	4bca      	ldr	r3, [pc, #808]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d0e2      	beq.n	800221a <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002254:	4bc7      	ldr	r3, [pc, #796]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4ac7      	ldr	r2, [pc, #796]	; (8002578 <HAL_RCC_OscConfig+0x680>)
 800225a:	4013      	ands	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1a      	ldr	r2, [r3, #32]
 8002262:	4bc4      	ldr	r3, [pc, #784]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002268:	4bc2      	ldr	r3, [pc, #776]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	0a19      	lsrs	r1, r3, #8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	061a      	lsls	r2, r3, #24
 8002276:	4bbf      	ldr	r3, [pc, #764]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	e019      	b.n	80022b2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800227e:	4bbd      	ldr	r3, [pc, #756]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4bbc      	ldr	r3, [pc, #752]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002284:	49bd      	ldr	r1, [pc, #756]	; (800257c <HAL_RCC_OscConfig+0x684>)
 8002286:	400a      	ands	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe f92b 	bl	80004e4 <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002294:	f7fe f926 	bl	80004e4 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e19c      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022a6:	4bb3      	ldr	r3, [pc, #716]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2208      	movs	r2, #8
 80022b8:	4013      	ands	r3, r2
 80022ba:	d036      	beq.n	800232a <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d019      	beq.n	80022f8 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c4:	4bab      	ldr	r3, [pc, #684]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80022c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c8:	4baa      	ldr	r3, [pc, #680]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe f908 	bl	80004e4 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe f903 	bl	80004e4 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e179      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ec:	4ba1      	ldr	r3, [pc, #644]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	2202      	movs	r2, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d0f1      	beq.n	80022da <HAL_RCC_OscConfig+0x3e2>
 80022f6:	e018      	b.n	800232a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f8:	4b9e      	ldr	r3, [pc, #632]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80022fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fc:	4b9d      	ldr	r3, [pc, #628]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	2101      	movs	r1, #1
 8002300:	438a      	bics	r2, r1
 8002302:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7fe f8ee 	bl	80004e4 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230e:	f7fe f8e9 	bl	80004e4 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e15f      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002320:	4b94      	ldr	r3, [pc, #592]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	d1f1      	bne.n	800230e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2204      	movs	r2, #4
 8002330:	4013      	ands	r3, r2
 8002332:	d100      	bne.n	8002336 <HAL_RCC_OscConfig+0x43e>
 8002334:	e0af      	b.n	8002496 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2323      	movs	r3, #35	; 0x23
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b8d      	ldr	r3, [pc, #564]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	055b      	lsls	r3, r3, #21
 8002346:	4013      	ands	r3, r2
 8002348:	d10a      	bne.n	8002360 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b8a      	ldr	r3, [pc, #552]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800234c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	0549      	lsls	r1, r1, #21
 8002354:	430a      	orrs	r2, r1
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002358:	2323      	movs	r3, #35	; 0x23
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b87      	ldr	r3, [pc, #540]	; (8002580 <HAL_RCC_OscConfig+0x688>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4013      	ands	r3, r2
 800236a:	d11a      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_RCC_OscConfig+0x688>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b83      	ldr	r3, [pc, #524]	; (8002580 <HAL_RCC_OscConfig+0x688>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0049      	lsls	r1, r1, #1
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe f8b3 	bl	80004e4 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7fe f8ae 	bl	80004e4 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e124      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <HAL_RCC_OscConfig+0x688>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_OscConfig+0x4c6>
 80023ae:	4b71      	ldr	r3, [pc, #452]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b2:	4b70      	ldr	r3, [pc, #448]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0049      	lsls	r1, r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	651a      	str	r2, [r3, #80]	; 0x50
 80023bc:	e031      	b.n	8002422 <HAL_RCC_OscConfig+0x52a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x4e8>
 80023c6:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ca:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023cc:	496b      	ldr	r1, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x684>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	651a      	str	r2, [r3, #80]	; 0x50
 80023d2:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023d8:	496a      	ldr	r1, [pc, #424]	; (8002584 <HAL_RCC_OscConfig+0x68c>)
 80023da:	400a      	ands	r2, r1
 80023dc:	651a      	str	r2, [r3, #80]	; 0x50
 80023de:	e020      	b.n	8002422 <HAL_RCC_OscConfig+0x52a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	23a0      	movs	r3, #160	; 0xa0
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10e      	bne.n	800240a <HAL_RCC_OscConfig+0x512>
 80023ec:	4b61      	ldr	r3, [pc, #388]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023f0:	4b60      	ldr	r3, [pc, #384]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	00c9      	lsls	r1, r1, #3
 80023f6:	430a      	orrs	r2, r1
 80023f8:	651a      	str	r2, [r3, #80]	; 0x50
 80023fa:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80023fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fe:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0049      	lsls	r1, r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	651a      	str	r2, [r3, #80]	; 0x50
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x52a>
 800240a:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800240c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800240e:	4b59      	ldr	r3, [pc, #356]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002410:	495a      	ldr	r1, [pc, #360]	; (800257c <HAL_RCC_OscConfig+0x684>)
 8002412:	400a      	ands	r2, r1
 8002414:	651a      	str	r2, [r3, #80]	; 0x50
 8002416:	4b57      	ldr	r3, [pc, #348]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800241a:	4b56      	ldr	r3, [pc, #344]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800241c:	4959      	ldr	r1, [pc, #356]	; (8002584 <HAL_RCC_OscConfig+0x68c>)
 800241e:	400a      	ands	r2, r1
 8002420:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d015      	beq.n	8002456 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe f85b 	bl	80004e4 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002432:	e009      	b.n	8002448 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe f856 	bl	80004e4 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_RCC_OscConfig+0x690>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0cb      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002448:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800244a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4013      	ands	r3, r2
 8002452:	d0ef      	beq.n	8002434 <HAL_RCC_OscConfig+0x53c>
 8002454:	e014      	b.n	8002480 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7fe f845 	bl	80004e4 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800245e:	e009      	b.n	8002474 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe f840 	bl	80004e4 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_RCC_OscConfig+0x690>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0b5      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002474:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d1ef      	bne.n	8002460 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002480:	2323      	movs	r3, #35	; 0x23
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800248c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800248e:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002490:	493e      	ldr	r1, [pc, #248]	; (800258c <HAL_RCC_OscConfig+0x694>)
 8002492:	400a      	ands	r2, r1
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d100      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5a8>
 800249e:	e09e      	b.n	80025de <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d100      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5b0>
 80024a6:	e077      	b.n	8002598 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d145      	bne.n	800253c <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80024b6:	4936      	ldr	r1, [pc, #216]	; (8002590 <HAL_RCC_OscConfig+0x698>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe f812 	bl	80004e4 <HAL_GetTick>
 80024c0:	0003      	movs	r3, r0
 80024c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe f80d 	bl	80004e4 <HAL_GetTick>
 80024ca:	0002      	movs	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e083      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024d8:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	049b      	lsls	r3, r3, #18
 80024e0:	4013      	ands	r3, r2
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	; (8002594 <HAL_RCC_OscConfig+0x69c>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	431a      	orrs	r2, r3
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002500:	430a      	orrs	r2, r1
 8002502:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	0449      	lsls	r1, r1, #17
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fd ffe7 	bl	80004e4 <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fd ffe2 	bl	80004e4 <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e058      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	049b      	lsls	r3, r3, #18
 8002536:	4013      	ands	r3, r2
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x624>
 800253a:	e050      	b.n	80025de <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002542:	4913      	ldr	r1, [pc, #76]	; (8002590 <HAL_RCC_OscConfig+0x698>)
 8002544:	400a      	ands	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fd ffcc 	bl	80004e4 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002552:	f7fd ffc7 	bl	80004e4 <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e03d      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_RCC_OscConfig+0x67c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	049b      	lsls	r3, r3, #18
 800256c:	4013      	ands	r3, r2
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x65a>
 8002570:	e035      	b.n	80025de <HAL_RCC_OscConfig+0x6e6>
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	40021000 	.word	0x40021000
 8002578:	ffff1fff 	.word	0xffff1fff
 800257c:	fffffeff 	.word	0xfffffeff
 8002580:	40007000 	.word	0x40007000
 8002584:	fffffbff 	.word	0xfffffbff
 8002588:	00001388 	.word	0x00001388
 800258c:	efffffff 	.word	0xefffffff
 8002590:	feffffff 	.word	0xfeffffff
 8002594:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e01d      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCC_OscConfig+0x6f0>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	025b      	lsls	r3, r3, #9
 80025b0:	401a      	ands	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d10f      	bne.n	80025da <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	23f0      	movs	r3, #240	; 0xf0
 80025be:	039b      	lsls	r3, r3, #14
 80025c0:	401a      	ands	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	401a      	ands	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b00a      	add	sp, #40	; 0x28
 80025e6:	bdb0      	pop	{r4, r5, r7, pc}
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e10d      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b88      	ldr	r3, [pc, #544]	; (8002824 <HAL_RCC_ClockConfig+0x238>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	4013      	ands	r3, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d911      	bls.n	8002632 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b85      	ldr	r3, [pc, #532]	; (8002824 <HAL_RCC_ClockConfig+0x238>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	4393      	bics	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	4b82      	ldr	r3, [pc, #520]	; (8002824 <HAL_RCC_ClockConfig+0x238>)
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002620:	4b80      	ldr	r3, [pc, #512]	; (8002824 <HAL_RCC_ClockConfig+0x238>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0f4      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2202      	movs	r2, #2
 8002638:	4013      	ands	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b7a      	ldr	r3, [pc, #488]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	22f0      	movs	r2, #240	; 0xf0
 8002642:	4393      	bics	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	4b77      	ldr	r3, [pc, #476]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 800264c:	430a      	orrs	r2, r1
 800264e:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	d100      	bne.n	800265c <HAL_RCC_ClockConfig+0x70>
 800265a:	e089      	b.n	8002770 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d107      	bne.n	8002674 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002664:	4b70      	ldr	r3, [pc, #448]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	d120      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0d3      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d107      	bne.n	800268c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	049b      	lsls	r3, r3, #18
 8002684:	4013      	ands	r3, r2
 8002686:	d114      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0c7      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002694:	4b64      	ldr	r3, [pc, #400]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2204      	movs	r2, #4
 800269a:	4013      	ands	r3, r2
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0bc      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026a2:	4b61      	ldr	r3, [pc, #388]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0b4      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2203      	movs	r2, #3
 80026b8:	4393      	bics	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80026c2:	430a      	orrs	r2, r1
 80026c4:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c6:	f7fd ff0d 	bl	80004e4 <HAL_GetTick>
 80026ca:	0003      	movs	r3, r0
 80026cc:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d111      	bne.n	80026fa <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d6:	e009      	b.n	80026ec <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fd ff04 	bl	80004e4 <HAL_GetTick>
 80026dc:	0002      	movs	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_RCC_ClockConfig+0x240>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e097      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ec:	4b4e      	ldr	r3, [pc, #312]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	220c      	movs	r2, #12
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d1ef      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xec>
 80026f8:	e03a      	b.n	8002770 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d111      	bne.n	8002726 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002702:	e009      	b.n	8002718 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7fd feee 	bl	80004e4 <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	4a47      	ldr	r2, [pc, #284]	; (800282c <HAL_RCC_ClockConfig+0x240>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e081      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002718:	4b43      	ldr	r3, [pc, #268]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	220c      	movs	r2, #12
 800271e:	4013      	ands	r3, r2
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d1ef      	bne.n	8002704 <HAL_RCC_ClockConfig+0x118>
 8002724:	e024      	b.n	8002770 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d11b      	bne.n	8002766 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800272e:	e009      	b.n	8002744 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fd fed8 	bl	80004e4 <HAL_GetTick>
 8002734:	0002      	movs	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	4a3c      	ldr	r2, [pc, #240]	; (800282c <HAL_RCC_ClockConfig+0x240>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e06b      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002744:	4b38      	ldr	r3, [pc, #224]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	220c      	movs	r2, #12
 800274a:	4013      	ands	r3, r2
 800274c:	2b04      	cmp	r3, #4
 800274e:	d1ef      	bne.n	8002730 <HAL_RCC_ClockConfig+0x144>
 8002750:	e00e      	b.n	8002770 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002752:	f7fd fec7 	bl	80004e4 <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	4a33      	ldr	r2, [pc, #204]	; (800282c <HAL_RCC_ClockConfig+0x240>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e05a      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	220c      	movs	r2, #12
 800276c:	4013      	ands	r3, r2
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <HAL_RCC_ClockConfig+0x238>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	4013      	ands	r3, r2
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d211      	bcs.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b29      	ldr	r3, [pc, #164]	; (8002824 <HAL_RCC_ClockConfig+0x238>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2201      	movs	r2, #1
 8002784:	4393      	bics	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <HAL_RCC_ClockConfig+0x238>)
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_ClockConfig+0x238>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	4013      	ands	r3, r2
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e03c      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2204      	movs	r2, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	d009      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_RCC_ClockConfig+0x244>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2208      	movs	r2, #8
 80027c6:	4013      	ands	r3, r2
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4a19      	ldr	r2, [pc, #100]	; (8002834 <HAL_RCC_ClockConfig+0x248>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	00da      	lsls	r2, r3, #3
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e0:	f000 f82e 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027e4:	0001      	movs	r1, r0
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_RCC_ClockConfig+0x23c>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	220f      	movs	r2, #15
 80027ee:	4013      	ands	r3, r2
 80027f0:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_RCC_ClockConfig+0x24c>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	000a      	movs	r2, r1
 80027f6:	40da      	lsrs	r2, r3
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCC_ClockConfig+0x250>)
 80027fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80027fc:	250b      	movs	r5, #11
 80027fe:	197c      	adds	r4, r7, r5
 8002800:	2000      	movs	r0, #0
 8002802:	f7fd fe39 	bl	8000478 <HAL_InitTick>
 8002806:	0003      	movs	r3, r0
 8002808:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800280a:	197b      	adds	r3, r7, r5
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002812:	230b      	movs	r3, #11
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	e000      	b.n	800281c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b004      	add	sp, #16
 8002822:	bdb0      	pop	{r4, r5, r7, pc}
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
 800282c:	00001388 	.word	0x00001388
 8002830:	fffff8ff 	.word	0xfffff8ff
 8002834:	ffffc7ff 	.word	0xffffc7ff
 8002838:	08004cf4 	.word	0x08004cf4
 800283c:	20000000 	.word	0x20000000

08002840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002846:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	220c      	movs	r2, #12
 8002850:	4013      	ands	r3, r2
 8002852:	2b08      	cmp	r3, #8
 8002854:	d00e      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 8002856:	2b0c      	cmp	r3, #12
 8002858:	d00f      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x3a>
 800285a:	2b04      	cmp	r3, #4
 800285c:	d157      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800285e:	4b35      	ldr	r3, [pc, #212]	; (8002934 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2210      	movs	r2, #16
 8002864:	4013      	ands	r3, r2
 8002866:	d002      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002868:	4b33      	ldr	r3, [pc, #204]	; (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 800286a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800286c:	e05d      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800286e:	4b33      	ldr	r3, [pc, #204]	; (800293c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002870:	613b      	str	r3, [r7, #16]
      break;
 8002872:	e05a      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002874:	4b32      	ldr	r3, [pc, #200]	; (8002940 <HAL_RCC_GetSysClockFreq+0x100>)
 8002876:	613b      	str	r3, [r7, #16]
      break;
 8002878:	e057      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	0c9b      	lsrs	r3, r3, #18
 800287e:	220f      	movs	r2, #15
 8002880:	4013      	ands	r3, r2
 8002882:	4a30      	ldr	r2, [pc, #192]	; (8002944 <HAL_RCC_GetSysClockFreq+0x104>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	0d9b      	lsrs	r3, r3, #22
 800288c:	2203      	movs	r2, #3
 800288e:	4013      	ands	r3, r2
 8002890:	3301      	adds	r3, #1
 8002892:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	025b      	lsls	r3, r3, #9
 800289c:	4013      	ands	r3, r2
 800289e:	d00f      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	000a      	movs	r2, r1
 80028a4:	0152      	lsls	r2, r2, #5
 80028a6:	1a52      	subs	r2, r2, r1
 80028a8:	0193      	lsls	r3, r2, #6
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	185b      	adds	r3, r3, r1
 80028b0:	025b      	lsls	r3, r3, #9
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7fd fc27 	bl	8000108 <__udivsi3>
 80028ba:	0003      	movs	r3, r0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e023      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028c0:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d00f      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	000a      	movs	r2, r1
 80028ce:	0152      	lsls	r2, r2, #5
 80028d0:	1a52      	subs	r2, r2, r1
 80028d2:	0193      	lsls	r3, r2, #6
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	185b      	adds	r3, r3, r1
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fd fc12 	bl	8000108 <__udivsi3>
 80028e4:	0003      	movs	r3, r0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	e00e      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	000a      	movs	r2, r1
 80028ee:	0152      	lsls	r2, r2, #5
 80028f0:	1a52      	subs	r2, r2, r1
 80028f2:	0193      	lsls	r3, r2, #6
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	185b      	adds	r3, r3, r1
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fd fc02 	bl	8000108 <__udivsi3>
 8002904:	0003      	movs	r3, r0
 8002906:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
      break;
 800290c:	e00d      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0b5b      	lsrs	r3, r3, #13
 8002914:	2207      	movs	r2, #7
 8002916:	4013      	ands	r3, r2
 8002918:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	0212      	lsls	r2, r2, #8
 8002922:	409a      	lsls	r2, r3
 8002924:	0013      	movs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
      break;
 8002928:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800292a:	693b      	ldr	r3, [r7, #16]
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b006      	add	sp, #24
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	003d0900 	.word	0x003d0900
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200
 8002944:	08004d0c 	.word	0x08004d0c

08002948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800294c:	4b02      	ldr	r3, [pc, #8]	; (8002958 <HAL_RCC_GetHCLKFreq+0x10>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	20000000 	.word	0x20000000

0800295c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002960:	f7ff fff2 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002964:	0001      	movs	r1, r0
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	2207      	movs	r2, #7
 800296e:	4013      	ands	r3, r2
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	40d9      	lsrs	r1, r3
 8002976:	000b      	movs	r3, r1
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	40021000 	.word	0x40021000
 8002984:	08004d04 	.word	0x08004d04

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800298c:	f7ff ffdc 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002990:	0001      	movs	r1, r0
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	0adb      	lsrs	r3, r3, #11
 8002998:	2207      	movs	r2, #7
 800299a:	4013      	ands	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	40d9      	lsrs	r1, r3
 80029a2:	000b      	movs	r3, r1
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08004d04 	.word	0x08004d04

080029b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2220      	movs	r2, #32
 80029c2:	4013      	ands	r3, r2
 80029c4:	d100      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80029c6:	e0c7      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80029c8:	2317      	movs	r3, #23
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d0:	4b82      	ldr	r3, [pc, #520]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	055b      	lsls	r3, r3, #21
 80029d8:	4013      	ands	r3, r2
 80029da:	d10a      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e0:	4b7e      	ldr	r3, [pc, #504]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	0549      	lsls	r1, r1, #21
 80029e6:	430a      	orrs	r2, r1
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80029ea:	2317      	movs	r3, #23
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b7b      	ldr	r3, [pc, #492]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4013      	ands	r3, r2
 80029fc:	d11a      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b78      	ldr	r3, [pc, #480]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b77      	ldr	r3, [pc, #476]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0049      	lsls	r1, r1, #1
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0c:	f7fd fd6a 	bl	80004e4 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	e008      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fd fd65 	bl	80004e4 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	; 0x64
 8002a22:	d901      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e0d4      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b6d      	ldr	r3, [pc, #436]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a34:	4b69      	ldr	r3, [pc, #420]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	23c0      	movs	r3, #192	; 0xc0
 8002a3a:	039b      	lsls	r3, r3, #14
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	23c0      	movs	r3, #192	; 0xc0
 8002a46:	039b      	lsls	r3, r3, #14
 8002a48:	4013      	ands	r3, r2
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d013      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	23c0      	movs	r3, #192	; 0xc0
 8002a56:	029b      	lsls	r3, r3, #10
 8002a58:	401a      	ands	r2, r3
 8002a5a:	23c0      	movs	r3, #192	; 0xc0
 8002a5c:	029b      	lsls	r3, r3, #10
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a62:	4b5e      	ldr	r3, [pc, #376]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	029b      	lsls	r3, r3, #10
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	029b      	lsls	r3, r3, #10
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d101      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0ac      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a78:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a7c:	23c0      	movs	r3, #192	; 0xc0
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	4013      	ands	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d03b      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	23c0      	movs	r3, #192	; 0xc0
 8002a90:	029b      	lsls	r3, r3, #10
 8002a92:	4013      	ands	r3, r2
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d033      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d02e      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002aa4:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa8:	4a4e      	ldr	r2, [pc, #312]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aae:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0309      	lsls	r1, r1, #12
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002abc:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac0:	4b46      	ldr	r3, [pc, #280]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ac2:	4949      	ldr	r1, [pc, #292]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002ac8:	4b44      	ldr	r3, [pc, #272]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d014      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fd fd04 	bl	80004e4 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae0:	e009      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fd fcff 	bl	80004e4 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	4a3f      	ldr	r2, [pc, #252]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e06d      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af6:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d0ef      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	23c0      	movs	r3, #192	; 0xc0
 8002b08:	029b      	lsls	r3, r3, #10
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	23c0      	movs	r3, #192	; 0xc0
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a35      	ldr	r2, [pc, #212]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	23c0      	movs	r3, #192	; 0xc0
 8002b24:	039b      	lsls	r3, r3, #14
 8002b26:	401a      	ands	r2, r3
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	23c0      	movs	r3, #192	; 0xc0
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b42:	2317      	movs	r3, #23
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b52:	4928      	ldr	r1, [pc, #160]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b54:	400a      	ands	r2, r1
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	220c      	movs	r2, #12
 8002b68:	4393      	bics	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	0019      	movs	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b90:	430a      	orrs	r2, r1
 8002b92:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b006      	add	sp, #24
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
 8002be4:	fffcffff 	.word	0xfffcffff
 8002be8:	fff7ffff 	.word	0xfff7ffff
 8002bec:	00001388 	.word	0x00001388
 8002bf0:	ffcfffff 	.word	0xffcfffff
 8002bf4:	efffffff 	.word	0xefffffff
 8002bf8:	fffff3ff 	.word	0xfffff3ff
 8002bfc:	ffffcfff 	.word	0xffffcfff
 8002c00:	fff3ffff 	.word	0xfff3ffff

08002c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e044      	b.n	8002ca0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d107      	bne.n	8002c2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2270      	movs	r2, #112	; 0x70
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f001 fe5d 	bl	80048e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2224      	movs	r2, #36	; 0x24
 8002c32:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	438a      	bics	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fc6a 	bl	8003520 <UART_SetConfig>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e024      	b.n	8002ca0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 ff37 	bl	8003ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	490d      	ldr	r1, [pc, #52]	; (8002ca8 <HAL_UART_Init+0xa4>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	212a      	movs	r1, #42	; 0x2a
 8002c82:	438a      	bics	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2101      	movs	r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 ffcf 	bl	8003c3c <UART_CheckIdleState>
 8002c9e:	0003      	movs	r3, r0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	ffffb7ff 	.word	0xffffb7ff

08002cac <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	1dbb      	adds	r3, r7, #6
 8002cba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d000      	beq.n	8002cc6 <HAL_UART_Transmit+0x1a>
 8002cc4:	e094      	b.n	8002df0 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_UART_Transmit+0x28>
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e08c      	b.n	8002df2 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d109      	bne.n	8002cf8 <HAL_UART_Transmit+0x4c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d001      	beq.n	8002cf8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e07c      	b.n	8002df2 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2270      	movs	r2, #112	; 0x70
 8002cfc:	5c9b      	ldrb	r3, [r3, r2]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Transmit+0x5a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e075      	b.n	8002df2 <HAL_UART_Transmit+0x146>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2270      	movs	r2, #112	; 0x70
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2221      	movs	r2, #33	; 0x21
 8002d18:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002d1a:	f7fd fbe3 	bl	80004e4 <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1dba      	adds	r2, r7, #6
 8002d26:	2150      	movs	r1, #80	; 0x50
 8002d28:	8812      	ldrh	r2, [r2, #0]
 8002d2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1dba      	adds	r2, r7, #6
 8002d30:	2152      	movs	r1, #82	; 0x52
 8002d32:	8812      	ldrh	r2, [r2, #0]
 8002d34:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	015b      	lsls	r3, r3, #5
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d108      	bne.n	8002d54 <HAL_UART_Transmit+0xa8>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	e003      	b.n	8002d5c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d5c:	e02c      	b.n	8002db8 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	0013      	movs	r3, r2
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	f000 ffac 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e03c      	b.n	8002df2 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	001a      	movs	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	05d2      	lsls	r2, r2, #23
 8002d8a:	0dd2      	lsrs	r2, r2, #23
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	3302      	adds	r3, #2
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e007      	b.n	8002da6 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2252      	movs	r2, #82	; 0x52
 8002daa:	5a9b      	ldrh	r3, [r3, r2]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b299      	uxth	r1, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2252      	movs	r2, #82	; 0x52
 8002db6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2252      	movs	r2, #82	; 0x52
 8002dbc:	5a9b      	ldrh	r3, [r3, r2]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1cc      	bne.n	8002d5e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	0013      	movs	r3, r2
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2140      	movs	r1, #64	; 0x40
 8002dd2:	f000 ff79 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e009      	b.n	8002df2 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2270      	movs	r2, #112	; 0x70
 8002de8:	2100      	movs	r1, #0
 8002dea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b008      	add	sp, #32
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	1dbb      	adds	r3, r7, #6
 8002e08:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d158      	bne.n	8002ec4 <HAL_UART_Transmit_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_UART_Transmit_IT+0x24>
 8002e18:	1dbb      	adds	r3, r7, #6
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e050      	b.n	8002ec6 <HAL_UART_Transmit_IT+0xca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	015b      	lsls	r3, r3, #5
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d109      	bne.n	8002e44 <HAL_UART_Transmit_IT+0x48>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d001      	beq.n	8002e44 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e040      	b.n	8002ec6 <HAL_UART_Transmit_IT+0xca>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2270      	movs	r2, #112	; 0x70
 8002e48:	5c9b      	ldrb	r3, [r3, r2]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_UART_Transmit_IT+0x56>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e039      	b.n	8002ec6 <HAL_UART_Transmit_IT+0xca>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2270      	movs	r2, #112	; 0x70
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1dba      	adds	r2, r7, #6
 8002e64:	2150      	movs	r1, #80	; 0x50
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1dba      	adds	r2, r7, #6
 8002e6e:	2152      	movs	r1, #82	; 0x52
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2221      	movs	r2, #33	; 0x21
 8002e84:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	015b      	lsls	r3, r3, #5
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d107      	bne.n	8002ea2 <HAL_UART_Transmit_IT+0xa6>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <HAL_UART_Transmit_IT+0xa6>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <HAL_UART_Transmit_IT+0xd4>)
 8002e9e:	665a      	str	r2, [r3, #100]	; 0x64
 8002ea0:	e002      	b.n	8002ea8 <HAL_UART_Transmit_IT+0xac>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_UART_Transmit_IT+0xd8>)
 8002ea6:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2270      	movs	r2, #112	; 0x70
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_UART_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b004      	add	sp, #16
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	08003fad 	.word	0x08003fad
 8002ed4:	08003f3f 	.word	0x08003f3f

08002ed8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	1dbb      	adds	r3, r7, #6
 8002ee4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d000      	beq.n	8002ef0 <HAL_UART_Receive_IT+0x18>
 8002eee:	e09f      	b.n	8003030 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_UART_Receive_IT+0x26>
 8002ef6:	1dbb      	adds	r3, r7, #6
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e097      	b.n	8003032 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	015b      	lsls	r3, r3, #5
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d109      	bne.n	8002f22 <HAL_UART_Receive_IT+0x4a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d001      	beq.n	8002f22 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e087      	b.n	8003032 <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2270      	movs	r2, #112	; 0x70
 8002f26:	5c9b      	ldrb	r3, [r3, r2]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_UART_Receive_IT+0x58>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e080      	b.n	8003032 <HAL_UART_Receive_IT+0x15a>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2270      	movs	r2, #112	; 0x70
 8002f34:	2101      	movs	r1, #1
 8002f36:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1dba      	adds	r2, r7, #6
 8002f42:	2158      	movs	r1, #88	; 0x58
 8002f44:	8812      	ldrh	r2, [r2, #0]
 8002f46:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1dba      	adds	r2, r7, #6
 8002f4c:	215a      	movs	r1, #90	; 0x5a
 8002f4e:	8812      	ldrh	r2, [r2, #0]
 8002f50:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	015b      	lsls	r3, r3, #5
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d10d      	bne.n	8002f80 <HAL_UART_Receive_IT+0xa8>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <HAL_UART_Receive_IT+0x9e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	225c      	movs	r2, #92	; 0x5c
 8002f70:	4932      	ldr	r1, [pc, #200]	; (800303c <HAL_UART_Receive_IT+0x164>)
 8002f72:	5299      	strh	r1, [r3, r2]
 8002f74:	e02e      	b.n	8002fd4 <HAL_UART_Receive_IT+0xfc>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	225c      	movs	r2, #92	; 0x5c
 8002f7a:	21ff      	movs	r1, #255	; 0xff
 8002f7c:	5299      	strh	r1, [r3, r2]
 8002f7e:	e029      	b.n	8002fd4 <HAL_UART_Receive_IT+0xfc>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10d      	bne.n	8002fa4 <HAL_UART_Receive_IT+0xcc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <HAL_UART_Receive_IT+0xc2>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	225c      	movs	r2, #92	; 0x5c
 8002f94:	21ff      	movs	r1, #255	; 0xff
 8002f96:	5299      	strh	r1, [r3, r2]
 8002f98:	e01c      	b.n	8002fd4 <HAL_UART_Receive_IT+0xfc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	225c      	movs	r2, #92	; 0x5c
 8002f9e:	217f      	movs	r1, #127	; 0x7f
 8002fa0:	5299      	strh	r1, [r3, r2]
 8002fa2:	e017      	b.n	8002fd4 <HAL_UART_Receive_IT+0xfc>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	055b      	lsls	r3, r3, #21
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d10d      	bne.n	8002fcc <HAL_UART_Receive_IT+0xf4>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d104      	bne.n	8002fc2 <HAL_UART_Receive_IT+0xea>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	225c      	movs	r2, #92	; 0x5c
 8002fbc:	217f      	movs	r1, #127	; 0x7f
 8002fbe:	5299      	strh	r1, [r3, r2]
 8002fc0:	e008      	b.n	8002fd4 <HAL_UART_Receive_IT+0xfc>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	225c      	movs	r2, #92	; 0x5c
 8002fc6:	213f      	movs	r1, #63	; 0x3f
 8002fc8:	5299      	strh	r1, [r3, r2]
 8002fca:	e003      	b.n	8002fd4 <HAL_UART_Receive_IT+0xfc>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	225c      	movs	r2, #92	; 0x5c
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2222      	movs	r2, #34	; 0x22
 8002fde:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2101      	movs	r1, #1
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	015b      	lsls	r3, r3, #5
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d107      	bne.n	800300c <HAL_UART_Receive_IT+0x134>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <HAL_UART_Receive_IT+0x168>)
 8003008:	661a      	str	r2, [r3, #96]	; 0x60
 800300a:	e002      	b.n	8003012 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_UART_Receive_IT+0x16c>)
 8003010:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2270      	movs	r2, #112	; 0x70
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2190      	movs	r1, #144	; 0x90
 8003026:	0049      	lsls	r1, r1, #1
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b004      	add	sp, #16
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	000001ff 	.word	0x000001ff
 8003040:	08004115 	.word	0x08004115
 8003044:	08004059 	.word	0x08004059

08003048 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	1dbb      	adds	r3, r7, #6
 8003054:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305a:	2b20      	cmp	r3, #32
 800305c:	d000      	beq.n	8003060 <HAL_UART_Receive_DMA+0x18>
 800305e:	e087      	b.n	8003170 <HAL_UART_Receive_DMA+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_UART_Receive_DMA+0x26>
 8003066:	1dbb      	adds	r3, r7, #6
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_UART_Receive_DMA+0x12a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	015b      	lsls	r3, r3, #5
 800307a:	429a      	cmp	r2, r3
 800307c:	d109      	bne.n	8003092 <HAL_UART_Receive_DMA+0x4a>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2201      	movs	r2, #1
 800308a:	4013      	ands	r3, r2
 800308c:	d001      	beq.n	8003092 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_UART_Receive_DMA+0x12a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2270      	movs	r2, #112	; 0x70
 8003096:	5c9b      	ldrb	r3, [r3, r2]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_UART_Receive_DMA+0x58>
 800309c:	2302      	movs	r3, #2
 800309e:	e068      	b.n	8003172 <HAL_UART_Receive_DMA+0x12a>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2270      	movs	r2, #112	; 0x70
 80030a4:	2101      	movs	r1, #1
 80030a6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1dba      	adds	r2, r7, #6
 80030b2:	2158      	movs	r1, #88	; 0x58
 80030b4:	8812      	ldrh	r2, [r2, #0]
 80030b6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2222      	movs	r2, #34	; 0x22
 80030c2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02a      	beq.n	8003122 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d0:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_UART_Receive_DMA+0x134>)
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <HAL_UART_Receive_DMA+0x138>)
 80030da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e0:	4a28      	ldr	r2, [pc, #160]	; (8003184 <HAL_UART_Receive_DMA+0x13c>)
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e8:	2200      	movs	r2, #0
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3324      	adds	r3, #36	; 0x24
 80030f6:	0019      	movs	r1, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	001a      	movs	r2, r3
 80030fe:	1dbb      	adds	r3, r7, #6
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	f7fd fd27 	bl	8000b54 <HAL_DMA_Start_IT>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2210      	movs	r2, #16
 800310e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2270      	movs	r2, #112	; 0x70
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e027      	b.n	8003172 <HAL_UART_Receive_DMA+0x12a>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2270      	movs	r2, #112	; 0x70
 8003126:	2100      	movs	r1, #0
 8003128:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0049      	lsls	r1, r1, #1
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

    /* Enable the UART IDLE Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2110      	movs	r1, #16
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2101      	movs	r1, #1
 8003158:	430a      	orrs	r2, r1
 800315a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	430a      	orrs	r2, r1
 800316a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_UART_Receive_DMA+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b004      	add	sp, #16
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	08003dc5 	.word	0x08003dc5
 8003180:	08003e31 	.word	0x08003e31
 8003184:	08003e4f 	.word	0x08003e4f

08003188 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  //CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));

  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_IDLEIE));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4931      	ldr	r1, [pc, #196]	; (8003260 <HAL_UART_AbortReceive_IT+0xd8>)
 800319c:	400a      	ands	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	438a      	bics	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d139      	bne.n	8003232 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	438a      	bics	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <HAL_UART_AbortReceive_IT+0x74>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_UART_AbortReceive_IT+0xdc>)
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7fd fd1c 	bl	8000c20 <HAL_DMA_Abort_IT>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d034      	beq.n	8003256 <HAL_UART_AbortReceive_IT+0xce>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f6:	0018      	movs	r0, r3
 80031f8:	4790      	blx	r2
 80031fa:	e02c      	b.n	8003256 <HAL_UART_AbortReceive_IT+0xce>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	225a      	movs	r2, #90	; 0x5a
 8003200:	2100      	movs	r1, #0
 8003202:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_IDLEF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	221f      	movs	r2, #31
 8003210:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2108      	movs	r1, #8
 800321e:	430a      	orrs	r2, r1
 8003220:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0018      	movs	r0, r3
 800322c:	f001 fa84 	bl	8004738 <HAL_UART_AbortReceiveCpltCallback>
 8003230:	e011      	b.n	8003256 <HAL_UART_AbortReceive_IT+0xce>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	225a      	movs	r2, #90	; 0x5a
 8003236:	2100      	movs	r1, #0
 8003238:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_IDLEF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	221f      	movs	r2, #31
 8003246:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f001 fa71 	bl	8004738 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}
 8003260:	fffffecf 	.word	0xfffffecf
 8003264:	08003efb 	.word	0x08003efb

08003268 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t errorflags;
  uint32_t errorcode;


  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_IDLE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	221f      	movs	r2, #31
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d112      	bne.n	80032bc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2220      	movs	r2, #32
 800329a:	4013      	ands	r3, r2
 800329c:	d00e      	beq.n	80032bc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2220      	movs	r2, #32
 80032a2:	4013      	ands	r3, r2
 80032a4:	d00a      	beq.n	80032bc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d100      	bne.n	80032b0 <HAL_UART_IRQHandler+0x48>
 80032ae:	e112      	b.n	80034d6 <HAL_UART_IRQHandler+0x26e>
      {
        huart->RxISR(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	0010      	movs	r0, r2
 80032b8:	4798      	blx	r3
      }
      return;
 80032ba:	e10c      	b.n	80034d6 <HAL_UART_IRQHandler+0x26e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d100      	bne.n	80032c4 <HAL_UART_IRQHandler+0x5c>
 80032c2:	e0d4      	b.n	800346e <HAL_UART_IRQHandler+0x206>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	d105      	bne.n	80032d8 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_IDLEIE)) != 0U)))
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	2398      	movs	r3, #152	; 0x98
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	d100      	bne.n	80032d8 <HAL_UART_IRQHandler+0x70>
 80032d6:	e0ca      	b.n	800346e <HAL_UART_IRQHandler+0x206>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2201      	movs	r2, #1
 80032dc:	4013      	ands	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_UART_IRQHandler+0x96>
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4013      	ands	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f6:	2201      	movs	r2, #1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART LDLE interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_IDLE) != 0U) && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2210      	movs	r2, #16
 8003302:	4013      	ands	r3, r2
 8003304:	d017      	beq.n	8003336 <HAL_UART_IRQHandler+0xce>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2210      	movs	r2, #16
 800330a:	4013      	ands	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_UART_IRQHandler+0xce>
    {
    	rev_size = huart->RxXferSize - huart->hdmarx->Instance->CNDTR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2258      	movs	r2, #88	; 0x58
 8003312:	5a9b      	ldrh	r3, [r3, r2]
 8003314:	001a      	movs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	1ad2      	subs	r2, r2, r3
 8003320:	4b71      	ldr	r3, [pc, #452]	; (80034e8 <HAL_UART_IRQHandler+0x280>)
 8003322:	601a      	str	r2, [r3, #0]

      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2210      	movs	r2, #16
 800332a:	621a      	str	r2, [r3, #32]

      HAL_UART_AbortReceive_IT(huart);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff ff2a 	bl	8003188 <HAL_UART_AbortReceive_IT>

      return;
 8003334:	e0d4      	b.n	80034e0 <HAL_UART_IRQHandler+0x278>
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2202      	movs	r2, #2
 800333a:	4013      	ands	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_UART_IRQHandler+0xf2>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2201      	movs	r2, #1
 8003342:	4013      	ands	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2202      	movs	r2, #2
 800334c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003352:	2204      	movs	r2, #4
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2204      	movs	r2, #4
 800335e:	4013      	ands	r3, r2
 8003360:	d00d      	beq.n	800337e <HAL_UART_IRQHandler+0x116>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2201      	movs	r2, #1
 8003366:	4013      	ands	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_UART_IRQHandler+0x116>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2204      	movs	r2, #4
 8003370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003376:	2202      	movs	r2, #2
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2208      	movs	r2, #8
 8003382:	4013      	ands	r3, r2
 8003384:	d011      	beq.n	80033aa <HAL_UART_IRQHandler+0x142>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2220      	movs	r2, #32
 800338a:	4013      	ands	r3, r2
 800338c:	d103      	bne.n	8003396 <HAL_UART_IRQHandler+0x12e>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003394:	d009      	beq.n	80033aa <HAL_UART_IRQHandler+0x142>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2208      	movs	r2, #8
 800339c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a2:	2208      	movs	r2, #8
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d100      	bne.n	80033b4 <HAL_UART_IRQHandler+0x14c>
 80033b2:	e092      	b.n	80034da <HAL_UART_IRQHandler+0x272>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2220      	movs	r2, #32
 80033b8:	4013      	ands	r3, r2
 80033ba:	d00c      	beq.n	80033d6 <HAL_UART_IRQHandler+0x16e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2220      	movs	r2, #32
 80033c0:	4013      	ands	r3, r2
 80033c2:	d008      	beq.n	80033d6 <HAL_UART_IRQHandler+0x16e>
      {
        if (huart->RxISR != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_UART_IRQHandler+0x16e>
        {
          huart->RxISR(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	0010      	movs	r0, r2
 80033d4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2240      	movs	r2, #64	; 0x40
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d003      	beq.n	80033f2 <HAL_UART_IRQHandler+0x18a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2208      	movs	r2, #8
 80033ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033f0:	d033      	beq.n	800345a <HAL_UART_IRQHandler+0x1f2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 fcc5 	bl	8003d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	4013      	ands	r3, r2
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d123      	bne.n	8003450 <HAL_UART_IRQHandler+0x1e8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2140      	movs	r1, #64	; 0x40
 8003414:	438a      	bics	r2, r1
 8003416:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_UART_IRQHandler+0x1de>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003424:	4a31      	ldr	r2, [pc, #196]	; (80034ec <HAL_UART_IRQHandler+0x284>)
 8003426:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342c:	0018      	movs	r0, r3
 800342e:	f7fd fbf7 	bl	8000c20 <HAL_DMA_Abort_IT>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d019      	beq.n	800346a <HAL_UART_IRQHandler+0x202>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003440:	0018      	movs	r0, r3
 8003442:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003444:	e011      	b.n	800346a <HAL_UART_IRQHandler+0x202>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f000 f861 	bl	8003510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344e:	e00c      	b.n	800346a <HAL_UART_IRQHandler+0x202>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f000 f85c 	bl	8003510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	e007      	b.n	800346a <HAL_UART_IRQHandler+0x202>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f000 f857 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003468:	e037      	b.n	80034da <HAL_UART_IRQHandler+0x272>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346a:	46c0      	nop			; (mov r8, r8)
    return;
 800346c:	e035      	b.n	80034da <HAL_UART_IRQHandler+0x272>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	035b      	lsls	r3, r3, #13
 8003474:	4013      	ands	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_UART_IRQHandler+0x22e>
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	03db      	lsls	r3, r3, #15
 800347e:	4013      	ands	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_UART_IRQHandler+0x22e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	0352      	lsls	r2, r2, #13
 800348a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 fe9e 	bl	80041d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003494:	e024      	b.n	80034e0 <HAL_UART_IRQHandler+0x278>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	4013      	ands	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_UART_IRQHandler+0x252>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	4013      	ands	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_UART_IRQHandler+0x252>
  {
    if (huart->TxISR != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <HAL_UART_IRQHandler+0x276>
    {
      huart->TxISR(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	0010      	movs	r0, r2
 80034b6:	4798      	blx	r3
    }
    return;
 80034b8:	e011      	b.n	80034de <HAL_UART_IRQHandler+0x276>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2240      	movs	r2, #64	; 0x40
 80034be:	4013      	ands	r3, r2
 80034c0:	d00e      	beq.n	80034e0 <HAL_UART_IRQHandler+0x278>
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2240      	movs	r2, #64	; 0x40
 80034c6:	4013      	ands	r3, r2
 80034c8:	d00a      	beq.n	80034e0 <HAL_UART_IRQHandler+0x278>
  {
    UART_EndTransmit_IT(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 fda9 	bl	8004024 <UART_EndTransmit_IT>
    return;
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	e004      	b.n	80034e0 <HAL_UART_IRQHandler+0x278>
      return;
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	e002      	b.n	80034e0 <HAL_UART_IRQHandler+0x278>
    return;
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	e000      	b.n	80034e0 <HAL_UART_IRQHandler+0x278>
    return;
 80034de:	46c0      	nop			; (mov r8, r8)
  }

}
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b008      	add	sp, #32
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	20000020 	.word	0x20000020
 80034ec:	08003ecd 	.word	0x08003ecd

080034f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003520:	b5b0      	push	{r4, r5, r7, lr}
 8003522:	b08e      	sub	sp, #56	; 0x38
 8003524:	af00      	add	r7, sp, #0
 8003526:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003528:	231b      	movs	r3, #27
 800352a:	2218      	movs	r2, #24
 800352c:	4694      	mov	ip, r2
 800352e:	44bc      	add	ip, r7
 8003530:	4463      	add	r3, ip
 8003532:	2210      	movs	r2, #16
 8003534:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800353a:	2313      	movs	r3, #19
 800353c:	2218      	movs	r2, #24
 800353e:	4694      	mov	ip, r2
 8003540:	44bc      	add	ip, r7
 8003542:	4463      	add	r3, ip
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	431a      	orrs	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	431a      	orrs	r2, r3
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	4313      	orrs	r3, r2
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4ace      	ldr	r2, [pc, #824]	; (80038a4 <UART_SetConfig+0x384>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4ac9      	ldr	r2, [pc, #804]	; (80038a8 <UART_SetConfig+0x388>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4ac3      	ldr	r2, [pc, #780]	; (80038ac <UART_SetConfig+0x38c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a8:	4313      	orrs	r3, r2
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4abf      	ldr	r2, [pc, #764]	; (80038b0 <UART_SetConfig+0x390>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4abb      	ldr	r2, [pc, #748]	; (80038b4 <UART_SetConfig+0x394>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d137      	bne.n	800363c <UART_SetConfig+0x11c>
 80035cc:	4bba      	ldr	r3, [pc, #744]	; (80038b8 <UART_SetConfig+0x398>)
 80035ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d0:	220c      	movs	r2, #12
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d018      	beq.n	800360a <UART_SetConfig+0xea>
 80035d8:	d802      	bhi.n	80035e0 <UART_SetConfig+0xc0>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <UART_SetConfig+0xca>
 80035de:	e024      	b.n	800362a <UART_SetConfig+0x10a>
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d00a      	beq.n	80035fa <UART_SetConfig+0xda>
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d018      	beq.n	800361a <UART_SetConfig+0xfa>
 80035e8:	e01f      	b.n	800362a <UART_SetConfig+0x10a>
 80035ea:	231b      	movs	r3, #27
 80035ec:	2218      	movs	r2, #24
 80035ee:	4694      	mov	ip, r2
 80035f0:	44bc      	add	ip, r7
 80035f2:	4463      	add	r3, ip
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	e06e      	b.n	80036d8 <UART_SetConfig+0x1b8>
 80035fa:	231b      	movs	r3, #27
 80035fc:	2218      	movs	r2, #24
 80035fe:	4694      	mov	ip, r2
 8003600:	44bc      	add	ip, r7
 8003602:	4463      	add	r3, ip
 8003604:	2202      	movs	r2, #2
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e066      	b.n	80036d8 <UART_SetConfig+0x1b8>
 800360a:	231b      	movs	r3, #27
 800360c:	2218      	movs	r2, #24
 800360e:	4694      	mov	ip, r2
 8003610:	44bc      	add	ip, r7
 8003612:	4463      	add	r3, ip
 8003614:	2204      	movs	r2, #4
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e05e      	b.n	80036d8 <UART_SetConfig+0x1b8>
 800361a:	231b      	movs	r3, #27
 800361c:	2218      	movs	r2, #24
 800361e:	4694      	mov	ip, r2
 8003620:	44bc      	add	ip, r7
 8003622:	4463      	add	r3, ip
 8003624:	2208      	movs	r2, #8
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e056      	b.n	80036d8 <UART_SetConfig+0x1b8>
 800362a:	231b      	movs	r3, #27
 800362c:	2218      	movs	r2, #24
 800362e:	4694      	mov	ip, r2
 8003630:	44bc      	add	ip, r7
 8003632:	4463      	add	r3, ip
 8003634:	2210      	movs	r2, #16
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	e04d      	b.n	80036d8 <UART_SetConfig+0x1b8>
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a9a      	ldr	r2, [pc, #616]	; (80038ac <UART_SetConfig+0x38c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d141      	bne.n	80036ca <UART_SetConfig+0x1aa>
 8003646:	4b9c      	ldr	r3, [pc, #624]	; (80038b8 <UART_SetConfig+0x398>)
 8003648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800364a:	23c0      	movs	r3, #192	; 0xc0
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	4013      	ands	r3, r2
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	00d2      	lsls	r2, r2, #3
 8003654:	4293      	cmp	r3, r2
 8003656:	d01f      	beq.n	8003698 <UART_SetConfig+0x178>
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	00d2      	lsls	r2, r2, #3
 800365c:	4293      	cmp	r3, r2
 800365e:	d802      	bhi.n	8003666 <UART_SetConfig+0x146>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <UART_SetConfig+0x158>
 8003664:	e028      	b.n	80036b8 <UART_SetConfig+0x198>
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	4293      	cmp	r3, r2
 800366c:	d00c      	beq.n	8003688 <UART_SetConfig+0x168>
 800366e:	22c0      	movs	r2, #192	; 0xc0
 8003670:	0112      	lsls	r2, r2, #4
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <UART_SetConfig+0x188>
 8003676:	e01f      	b.n	80036b8 <UART_SetConfig+0x198>
 8003678:	231b      	movs	r3, #27
 800367a:	2218      	movs	r2, #24
 800367c:	4694      	mov	ip, r2
 800367e:	44bc      	add	ip, r7
 8003680:	4463      	add	r3, ip
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e027      	b.n	80036d8 <UART_SetConfig+0x1b8>
 8003688:	231b      	movs	r3, #27
 800368a:	2218      	movs	r2, #24
 800368c:	4694      	mov	ip, r2
 800368e:	44bc      	add	ip, r7
 8003690:	4463      	add	r3, ip
 8003692:	2202      	movs	r2, #2
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e01f      	b.n	80036d8 <UART_SetConfig+0x1b8>
 8003698:	231b      	movs	r3, #27
 800369a:	2218      	movs	r2, #24
 800369c:	4694      	mov	ip, r2
 800369e:	44bc      	add	ip, r7
 80036a0:	4463      	add	r3, ip
 80036a2:	2204      	movs	r2, #4
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e017      	b.n	80036d8 <UART_SetConfig+0x1b8>
 80036a8:	231b      	movs	r3, #27
 80036aa:	2218      	movs	r2, #24
 80036ac:	4694      	mov	ip, r2
 80036ae:	44bc      	add	ip, r7
 80036b0:	4463      	add	r3, ip
 80036b2:	2208      	movs	r2, #8
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e00f      	b.n	80036d8 <UART_SetConfig+0x1b8>
 80036b8:	231b      	movs	r3, #27
 80036ba:	2218      	movs	r2, #24
 80036bc:	4694      	mov	ip, r2
 80036be:	44bc      	add	ip, r7
 80036c0:	4463      	add	r3, ip
 80036c2:	2210      	movs	r2, #16
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	e006      	b.n	80036d8 <UART_SetConfig+0x1b8>
 80036ca:	231b      	movs	r3, #27
 80036cc:	2218      	movs	r2, #24
 80036ce:	4694      	mov	ip, r2
 80036d0:	44bc      	add	ip, r7
 80036d2:	4463      	add	r3, ip
 80036d4:	2210      	movs	r2, #16
 80036d6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a73      	ldr	r2, [pc, #460]	; (80038ac <UART_SetConfig+0x38c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d000      	beq.n	80036e4 <UART_SetConfig+0x1c4>
 80036e2:	e083      	b.n	80037ec <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036e4:	231b      	movs	r3, #27
 80036e6:	2218      	movs	r2, #24
 80036e8:	4694      	mov	ip, r2
 80036ea:	44bc      	add	ip, r7
 80036ec:	4463      	add	r3, ip
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d00d      	beq.n	8003710 <UART_SetConfig+0x1f0>
 80036f4:	dc02      	bgt.n	80036fc <UART_SetConfig+0x1dc>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <UART_SetConfig+0x1e6>
 80036fa:	e01d      	b.n	8003738 <UART_SetConfig+0x218>
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d012      	beq.n	8003726 <UART_SetConfig+0x206>
 8003700:	2b08      	cmp	r3, #8
 8003702:	d015      	beq.n	8003730 <UART_SetConfig+0x210>
 8003704:	e018      	b.n	8003738 <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003706:	f7ff f929 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 800370a:	0003      	movs	r3, r0
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800370e:	e01b      	b.n	8003748 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003710:	4b69      	ldr	r3, [pc, #420]	; (80038b8 <UART_SetConfig+0x398>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2210      	movs	r2, #16
 8003716:	4013      	ands	r3, r2
 8003718:	d002      	beq.n	8003720 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800371a:	4b68      	ldr	r3, [pc, #416]	; (80038bc <UART_SetConfig+0x39c>)
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800371e:	e013      	b.n	8003748 <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003720:	4b67      	ldr	r3, [pc, #412]	; (80038c0 <UART_SetConfig+0x3a0>)
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003724:	e010      	b.n	8003748 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003726:	f7ff f88b 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 800372a:	0003      	movs	r3, r0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800372e:	e00b      	b.n	8003748 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003736:	e007      	b.n	8003748 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003738:	2313      	movs	r3, #19
 800373a:	2218      	movs	r2, #24
 800373c:	4694      	mov	ip, r2
 800373e:	44bc      	add	ip, r7
 8003740:	4463      	add	r3, ip
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
        break;
 8003746:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d100      	bne.n	8003750 <UART_SetConfig+0x230>
 800374e:	e1a7      	b.n	8003aa0 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	0013      	movs	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	189b      	adds	r3, r3, r2
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	429a      	cmp	r2, r3
 800375e:	d305      	bcc.n	800376c <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003768:	429a      	cmp	r2, r3
 800376a:	d907      	bls.n	800377c <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 800376c:	2313      	movs	r3, #19
 800376e:	2218      	movs	r2, #24
 8003770:	4694      	mov	ip, r2
 8003772:	44bc      	add	ip, r7
 8003774:	4463      	add	r3, ip
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e191      	b.n	8003aa0 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	6939      	ldr	r1, [r7, #16]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	000b      	movs	r3, r1
 800378a:	0e1b      	lsrs	r3, r3, #24
 800378c:	0010      	movs	r0, r2
 800378e:	0205      	lsls	r5, r0, #8
 8003790:	431d      	orrs	r5, r3
 8003792:	000b      	movs	r3, r1
 8003794:	021c      	lsls	r4, r3, #8
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68b8      	ldr	r0, [r7, #8]
 80037a4:	68f9      	ldr	r1, [r7, #12]
 80037a6:	1900      	adds	r0, r0, r4
 80037a8:	4169      	adcs	r1, r5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f7fc fd32 	bl	8000220 <__aeabi_uldivmod>
 80037bc:	0003      	movs	r3, r0
 80037be:	000c      	movs	r4, r1
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	4a3f      	ldr	r2, [pc, #252]	; (80038c4 <UART_SetConfig+0x3a4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d908      	bls.n	80037dc <UART_SetConfig+0x2bc>
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	4a3e      	ldr	r2, [pc, #248]	; (80038c8 <UART_SetConfig+0x3a8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d804      	bhi.n	80037dc <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	e161      	b.n	8003aa0 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 80037dc:	2313      	movs	r3, #19
 80037de:	2218      	movs	r2, #24
 80037e0:	4694      	mov	ip, r2
 80037e2:	44bc      	add	ip, r7
 80037e4:	4463      	add	r3, ip
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e159      	b.n	8003aa0 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d000      	beq.n	80037fa <UART_SetConfig+0x2da>
 80037f8:	e0c4      	b.n	8003984 <UART_SetConfig+0x464>
  {
    switch (clocksource)
 80037fa:	231b      	movs	r3, #27
 80037fc:	2218      	movs	r2, #24
 80037fe:	4694      	mov	ip, r2
 8003800:	44bc      	add	ip, r7
 8003802:	4463      	add	r3, ip
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d900      	bls.n	800380c <UART_SetConfig+0x2ec>
 800380a:	e087      	b.n	800391c <UART_SetConfig+0x3fc>
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	4b2f      	ldr	r3, [pc, #188]	; (80038cc <UART_SetConfig+0x3ac>)
 8003810:	18d3      	adds	r3, r2, r3
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003816:	f7ff f8a1 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 800381a:	0003      	movs	r3, r0
 800381c:	005a      	lsls	r2, r3, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	0019      	movs	r1, r3
 800382c:	0010      	movs	r0, r2
 800382e:	f7fc fc6b 	bl	8000108 <__udivsi3>
 8003832:	0003      	movs	r3, r0
 8003834:	b29b      	uxth	r3, r3
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003838:	e078      	b.n	800392c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800383a:	f7ff f8a5 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 800383e:	0003      	movs	r3, r0
 8003840:	005a      	lsls	r2, r3, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	18d2      	adds	r2, r2, r3
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	0019      	movs	r1, r3
 8003850:	0010      	movs	r0, r2
 8003852:	f7fc fc59 	bl	8000108 <__udivsi3>
 8003856:	0003      	movs	r3, r0
 8003858:	b29b      	uxth	r3, r3
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800385c:	e066      	b.n	800392c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <UART_SetConfig+0x398>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2210      	movs	r2, #16
 8003864:	4013      	ands	r3, r2
 8003866:	d00e      	beq.n	8003886 <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <UART_SetConfig+0x3b0>)
 8003870:	189a      	adds	r2, r3, r2
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0019      	movs	r1, r3
 8003878:	0010      	movs	r0, r2
 800387a:	f7fc fc45 	bl	8000108 <__udivsi3>
 800387e:	0003      	movs	r3, r0
 8003880:	b29b      	uxth	r3, r3
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003884:	e052      	b.n	800392c <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <UART_SetConfig+0x3b4>)
 800388e:	189a      	adds	r2, r3, r2
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	0019      	movs	r1, r3
 8003896:	0010      	movs	r0, r2
 8003898:	f7fc fc36 	bl	8000108 <__udivsi3>
 800389c:	0003      	movs	r3, r0
 800389e:	b29b      	uxth	r3, r3
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038a2:	e043      	b.n	800392c <UART_SetConfig+0x40c>
 80038a4:	efff69f3 	.word	0xefff69f3
 80038a8:	ffffcfff 	.word	0xffffcfff
 80038ac:	40004800 	.word	0x40004800
 80038b0:	fffff4ff 	.word	0xfffff4ff
 80038b4:	40004400 	.word	0x40004400
 80038b8:	40021000 	.word	0x40021000
 80038bc:	003d0900 	.word	0x003d0900
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	000002ff 	.word	0x000002ff
 80038c8:	000fffff 	.word	0x000fffff
 80038cc:	08004cac 	.word	0x08004cac
 80038d0:	007a1200 	.word	0x007a1200
 80038d4:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80038d8:	f7fe ffb2 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80038dc:	0003      	movs	r3, r0
 80038de:	005a      	lsls	r2, r3, #1
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	18d2      	adds	r2, r2, r3
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0019      	movs	r1, r3
 80038ee:	0010      	movs	r0, r2
 80038f0:	f7fc fc0a 	bl	8000108 <__udivsi3>
 80038f4:	0003      	movs	r3, r0
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038fa:	e017      	b.n	800392c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	2280      	movs	r2, #128	; 0x80
 8003904:	0252      	lsls	r2, r2, #9
 8003906:	189a      	adds	r2, r3, r2
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0019      	movs	r1, r3
 800390e:	0010      	movs	r0, r2
 8003910:	f7fc fbfa 	bl	8000108 <__udivsi3>
 8003914:	0003      	movs	r3, r0
 8003916:	b29b      	uxth	r3, r3
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800391a:	e007      	b.n	800392c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800391c:	2313      	movs	r3, #19
 800391e:	2218      	movs	r2, #24
 8003920:	4694      	mov	ip, r2
 8003922:	44bc      	add	ip, r7
 8003924:	4463      	add	r3, ip
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
        break;
 800392a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d920      	bls.n	8003974 <UART_SetConfig+0x454>
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	4a62      	ldr	r2, [pc, #392]	; (8003ac0 <UART_SetConfig+0x5a0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d81c      	bhi.n	8003974 <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	b29a      	uxth	r2, r3
 800393e:	200a      	movs	r0, #10
 8003940:	2418      	movs	r4, #24
 8003942:	193b      	adds	r3, r7, r4
 8003944:	181b      	adds	r3, r3, r0
 8003946:	210f      	movs	r1, #15
 8003948:	438a      	bics	r2, r1
 800394a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	2207      	movs	r2, #7
 8003954:	4013      	ands	r3, r2
 8003956:	b299      	uxth	r1, r3
 8003958:	193b      	adds	r3, r7, r4
 800395a:	181b      	adds	r3, r3, r0
 800395c:	193a      	adds	r2, r7, r4
 800395e:	1812      	adds	r2, r2, r0
 8003960:	8812      	ldrh	r2, [r2, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	193a      	adds	r2, r7, r4
 800396c:	1812      	adds	r2, r2, r0
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	e095      	b.n	8003aa0 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8003974:	2313      	movs	r3, #19
 8003976:	2218      	movs	r2, #24
 8003978:	4694      	mov	ip, r2
 800397a:	44bc      	add	ip, r7
 800397c:	4463      	add	r3, ip
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e08d      	b.n	8003aa0 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 8003984:	231b      	movs	r3, #27
 8003986:	2218      	movs	r2, #24
 8003988:	4694      	mov	ip, r2
 800398a:	44bc      	add	ip, r7
 800398c:	4463      	add	r3, ip
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d86a      	bhi.n	8003a6a <UART_SetConfig+0x54a>
 8003994:	009a      	lsls	r2, r3, #2
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <UART_SetConfig+0x5a4>)
 8003998:	18d3      	adds	r3, r2, r3
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800399e:	f7fe ffdd 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 80039a2:	0002      	movs	r2, r0
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	18d2      	adds	r2, r2, r3
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	0019      	movs	r1, r3
 80039b2:	0010      	movs	r0, r2
 80039b4:	f7fc fba8 	bl	8000108 <__udivsi3>
 80039b8:	0003      	movs	r3, r0
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039be:	e05c      	b.n	8003a7a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80039c0:	f7fe ffe2 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 80039c4:	0002      	movs	r2, r0
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	18d2      	adds	r2, r2, r3
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	0019      	movs	r1, r3
 80039d4:	0010      	movs	r0, r2
 80039d6:	f7fc fb97 	bl	8000108 <__udivsi3>
 80039da:	0003      	movs	r3, r0
 80039dc:	b29b      	uxth	r3, r3
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039e0:	e04b      	b.n	8003a7a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039e2:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <UART_SetConfig+0x5a8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2210      	movs	r2, #16
 80039e8:	4013      	ands	r3, r2
 80039ea:	d00e      	beq.n	8003a0a <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	4a36      	ldr	r2, [pc, #216]	; (8003acc <UART_SetConfig+0x5ac>)
 80039f4:	189a      	adds	r2, r3, r2
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0019      	movs	r1, r3
 80039fc:	0010      	movs	r0, r2
 80039fe:	f7fc fb83 	bl	8000108 <__udivsi3>
 8003a02:	0003      	movs	r3, r0
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003a08:	e037      	b.n	8003a7a <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <UART_SetConfig+0x5b0>)
 8003a12:	189a      	adds	r2, r3, r2
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0019      	movs	r1, r3
 8003a1a:	0010      	movs	r0, r2
 8003a1c:	f7fc fb74 	bl	8000108 <__udivsi3>
 8003a20:	0003      	movs	r3, r0
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a26:	e028      	b.n	8003a7a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003a28:	f7fe ff0a 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	18d2      	adds	r2, r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	0010      	movs	r0, r2
 8003a3e:	f7fc fb63 	bl	8000108 <__udivsi3>
 8003a42:	0003      	movs	r3, r0
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a48:	e017      	b.n	8003a7a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	0212      	lsls	r2, r2, #8
 8003a54:	189a      	adds	r2, r3, r2
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	f7fc fb53 	bl	8000108 <__udivsi3>
 8003a62:	0003      	movs	r3, r0
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a68:	e007      	b.n	8003a7a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003a6a:	2313      	movs	r3, #19
 8003a6c:	2218      	movs	r2, #24
 8003a6e:	4694      	mov	ip, r2
 8003a70:	44bc      	add	ip, r7
 8003a72:	4463      	add	r3, ip
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
        break;
 8003a78:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	2b0f      	cmp	r3, #15
 8003a7e:	d908      	bls.n	8003a92 <UART_SetConfig+0x572>
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	4a0f      	ldr	r2, [pc, #60]	; (8003ac0 <UART_SetConfig+0x5a0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d804      	bhi.n	8003a92 <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	e006      	b.n	8003aa0 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8003a92:	2313      	movs	r3, #19
 8003a94:	2218      	movs	r2, #24
 8003a96:	4694      	mov	ip, r2
 8003a98:	44bc      	add	ip, r7
 8003a9a:	4463      	add	r3, ip
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003aac:	2313      	movs	r3, #19
 8003aae:	2218      	movs	r2, #24
 8003ab0:	4694      	mov	ip, r2
 8003ab2:	44bc      	add	ip, r7
 8003ab4:	4463      	add	r3, ip
 8003ab6:	781b      	ldrb	r3, [r3, #0]
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b00e      	add	sp, #56	; 0x38
 8003abe:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac0:	0000ffff 	.word	0x0000ffff
 8003ac4:	08004cd0 	.word	0x08004cd0
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	003d0900 	.word	0x003d0900
 8003ad0:	00f42400 	.word	0x00f42400

08003ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a4a      	ldr	r2, [pc, #296]	; (8003c18 <UART_AdvFeatureConfig+0x144>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2202      	movs	r2, #2
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4a43      	ldr	r2, [pc, #268]	; (8003c1c <UART_AdvFeatureConfig+0x148>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	2204      	movs	r2, #4
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a3b      	ldr	r2, [pc, #236]	; (8003c20 <UART_AdvFeatureConfig+0x14c>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2208      	movs	r2, #8
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a34      	ldr	r2, [pc, #208]	; (8003c24 <UART_AdvFeatureConfig+0x150>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2210      	movs	r2, #16
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <UART_AdvFeatureConfig+0x154>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d00b      	beq.n	8003ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <UART_AdvFeatureConfig+0x158>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	2240      	movs	r2, #64	; 0x40
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <UART_AdvFeatureConfig+0x15c>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	035b      	lsls	r3, r3, #13
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d10b      	bne.n	8003bee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <UART_AdvFeatureConfig+0x160>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	0019      	movs	r1, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <UART_AdvFeatureConfig+0x164>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	0019      	movs	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]
  }
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	fffdffff 	.word	0xfffdffff
 8003c1c:	fffeffff 	.word	0xfffeffff
 8003c20:	fffbffff 	.word	0xfffbffff
 8003c24:	ffff7fff 	.word	0xffff7fff
 8003c28:	ffffefff 	.word	0xffffefff
 8003c2c:	ffffdfff 	.word	0xffffdfff
 8003c30:	ffefffff 	.word	0xffefffff
 8003c34:	ff9fffff 	.word	0xff9fffff
 8003c38:	fff7ffff 	.word	0xfff7ffff

08003c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c4a:	f7fc fc4b 	bl	80004e4 <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d10d      	bne.n	8003c7c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	0399      	lsls	r1, r3, #14
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <UART_CheckIdleState+0x88>)
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	0013      	movs	r3, r2
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f000 f82a 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003c74:	1e03      	subs	r3, r0, #0
 8003c76:	d001      	beq.n	8003c7c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e01f      	b.n	8003cbc <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2204      	movs	r2, #4
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d10d      	bne.n	8003ca6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	03d9      	lsls	r1, r3, #15
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <UART_CheckIdleState+0x88>)
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	0013      	movs	r3, r2
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f000 f815 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003c9e:	1e03      	subs	r3, r0, #0
 8003ca0:	d001      	beq.n	8003ca6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e00a      	b.n	8003cbc <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2270      	movs	r2, #112	; 0x70
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	01ffffff 	.word	0x01ffffff

08003cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	1dfb      	adds	r3, r7, #7
 8003cd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd8:	e029      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	d026      	beq.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce0:	f7fc fc00 	bl	80004e4 <HAL_GetTick>
 8003ce4:	0002      	movs	r2, r0
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11b      	bne.n	8003d2e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4915      	ldr	r1, [pc, #84]	; (8003d58 <UART_WaitOnFlagUntilTimeout+0x90>)
 8003d02:	400a      	ands	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	438a      	bics	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2270      	movs	r2, #112	; 0x70
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e00f      	b.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	425a      	negs	r2, r3
 8003d3e:	4153      	adcs	r3, r2
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	001a      	movs	r2, r3
 8003d44:	1dfb      	adds	r3, r7, #7
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d0c6      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	fffffe5f 	.word	0xfffffe5f

08003d5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	21c0      	movs	r1, #192	; 0xc0
 8003d70:	438a      	bics	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	490a      	ldr	r1, [pc, #40]	; (8003dc0 <UART_EndRxTransfer+0x3c>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2101      	movs	r1, #1
 8003da8:	438a      	bics	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	fffffedf 	.word	0xfffffedf

08003dc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d11e      	bne.n	8003e1c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	225a      	movs	r2, #90	; 0x5a
 8003de2:	2100      	movs	r1, #0
 8003de4:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	490e      	ldr	r1, [pc, #56]	; (8003e2c <UART_DMAReceiveCplt+0x68>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	438a      	bics	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	438a      	bics	r2, r1
 8003e14:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 fc5e 	bl	80046e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b004      	add	sp, #16
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fffffeff 	.word	0xfffffeff

08003e30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff fb5d 	bl	8003500 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b004      	add	sp, #16
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b80      	cmp	r3, #128	; 0x80
 8003e74:	d10a      	bne.n	8003e8c <UART_DMAError+0x3e>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b21      	cmp	r3, #33	; 0x21
 8003e7a:	d107      	bne.n	8003e8c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2252      	movs	r2, #82	; 0x52
 8003e80:	2100      	movs	r1, #0
 8003e82:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7ff ff68 	bl	8003d5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d10a      	bne.n	8003eb0 <UART_DMAError+0x62>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b22      	cmp	r3, #34	; 0x22
 8003e9e:	d107      	bne.n	8003eb0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	225a      	movs	r2, #90	; 0x5a
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7ff ff6a 	bl	8003d84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7ff fb26 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b006      	add	sp, #24
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	225a      	movs	r2, #90	; 0x5a
 8003ede:	2100      	movs	r1, #0
 8003ee0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2252      	movs	r2, #82	; 0x52
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff fb0f 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	225a      	movs	r2, #90	; 0x5a
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	220f      	movs	r2, #15
 8003f16:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2108      	movs	r1, #8
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 fc01 	bl	8004738 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b004      	add	sp, #16
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	2b21      	cmp	r3, #33	; 0x21
 8003f4c:	d12a      	bne.n	8003fa4 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2252      	movs	r2, #82	; 0x52
 8003f52:	5a9b      	ldrh	r3, [r3, r2]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d110      	bne.n	8003f7c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2180      	movs	r1, #128	; 0x80
 8003f66:	438a      	bics	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003f7a:	e013      	b.n	8003fa4 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2252      	movs	r2, #82	; 0x52
 8003f96:	5a9b      	ldrh	r3, [r3, r2]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b299      	uxth	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2252      	movs	r2, #82	; 0x52
 8003fa2:	5299      	strh	r1, [r3, r2]
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb8:	2b21      	cmp	r3, #33	; 0x21
 8003fba:	d12f      	bne.n	800401c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2252      	movs	r2, #82	; 0x52
 8003fc0:	5a9b      	ldrh	r3, [r3, r2]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d110      	bne.n	8003fea <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2140      	movs	r1, #64	; 0x40
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003fe8:	e018      	b.n	800401c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	001a      	movs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	05d2      	lsls	r2, r2, #23
 8003ffc:	0dd2      	lsrs	r2, r2, #23
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2252      	movs	r2, #82	; 0x52
 800400e:	5a9b      	ldrh	r3, [r3, r2]
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b299      	uxth	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2252      	movs	r2, #82	; 0x52
 800401a:	5299      	strh	r1, [r3, r2]
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	46bd      	mov	sp, r7
 8004020:	b004      	add	sp, #16
 8004022:	bd80      	pop	{r7, pc}

08004024 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2140      	movs	r1, #64	; 0x40
 8004038:	438a      	bics	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0018      	movs	r0, r3
 800404c:	f7ff fa50 	bl	80034f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004060:	230e      	movs	r3, #14
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	215c      	movs	r1, #92	; 0x5c
 8004068:	5a52      	ldrh	r2, [r2, r1]
 800406a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004070:	2b22      	cmp	r3, #34	; 0x22
 8004072:	d140      	bne.n	80040f6 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407a:	210c      	movs	r1, #12
 800407c:	187b      	adds	r3, r7, r1
 800407e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004080:	187b      	adds	r3, r7, r1
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	230e      	movs	r3, #14
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b2d9      	uxtb	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	400a      	ands	r2, r1
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	225a      	movs	r2, #90	; 0x5a
 80040a6:	5a9b      	ldrh	r3, [r3, r2]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b299      	uxth	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	225a      	movs	r2, #90	; 0x5a
 80040b2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	225a      	movs	r2, #90	; 0x5a
 80040b8:	5a9b      	ldrh	r3, [r3, r2]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d122      	bne.n	8004106 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4911      	ldr	r1, [pc, #68]	; (8004110 <UART_RxISR_8BIT+0xb8>)
 80040cc:	400a      	ands	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2101      	movs	r1, #1
 80040dc:	438a      	bics	r2, r1
 80040de:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 faf6 	bl	80046e0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040f4:	e007      	b.n	8004106 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699a      	ldr	r2, [r3, #24]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2108      	movs	r1, #8
 8004102:	430a      	orrs	r2, r1
 8004104:	619a      	str	r2, [r3, #24]
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b004      	add	sp, #16
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	fffffedf 	.word	0xfffffedf

08004114 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800411c:	230e      	movs	r3, #14
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	215c      	movs	r1, #92	; 0x5c
 8004124:	5a52      	ldrh	r2, [r2, r1]
 8004126:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412c:	2b22      	cmp	r3, #34	; 0x22
 800412e:	d140      	bne.n	80041b2 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004136:	210c      	movs	r1, #12
 8004138:	187b      	adds	r3, r7, r1
 800413a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004142:	187b      	adds	r3, r7, r1
 8004144:	220e      	movs	r2, #14
 8004146:	18ba      	adds	r2, r7, r2
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	8812      	ldrh	r2, [r2, #0]
 800414c:	4013      	ands	r3, r2
 800414e:	b29a      	uxth	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	1c9a      	adds	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	225a      	movs	r2, #90	; 0x5a
 8004162:	5a9b      	ldrh	r3, [r3, r2]
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b299      	uxth	r1, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	225a      	movs	r2, #90	; 0x5a
 800416e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	225a      	movs	r2, #90	; 0x5a
 8004174:	5a9b      	ldrh	r3, [r3, r2]
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d122      	bne.n	80041c2 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4911      	ldr	r1, [pc, #68]	; (80041cc <UART_RxISR_16BIT+0xb8>)
 8004188:	400a      	ands	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2101      	movs	r1, #1
 8004198:	438a      	bics	r2, r1
 800419a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 fa98 	bl	80046e0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041b0:	e007      	b.n	80041c2 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2108      	movs	r1, #8
 80041be:	430a      	orrs	r2, r1
 80041c0:	619a      	str	r2, [r3, #24]
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b004      	add	sp, #16
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	fffffedf 	.word	0xfffffedf

080041d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}

080041e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041e4:	f7fc f928 	bl	8000438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041e8:	f000 f818 	bl	800421c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041ec:	f000 f9d6 	bl	800459c <MX_GPIO_Init>
  MX_DMA_Init();
 80041f0:	f000 f9b6 	bl	8004560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80041f4:	f000 f984 	bl	8004500 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80041f8:	f000 f882 	bl	8004300 <MX_ADC_Init>
  MX_I2C1_Init();
 80041fc:	f000 f912 	bl	8004424 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8004200:	f000 f950 	bl	80044a4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  uart_statu = HAL_UART_Receive_IT(&huart2, uart_data, 1);

  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, 15);
 8004204:	4903      	ldr	r1, [pc, #12]	; (8004214 <main+0x34>)
 8004206:	4b04      	ldr	r3, [pc, #16]	; (8004218 <main+0x38>)
 8004208:	220f      	movs	r2, #15
 800420a:	0018      	movs	r0, r3
 800420c:	f7fe ff1c 	bl	8003048 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004210:	e7fe      	b.n	8004210 <main+0x30>
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	20000190 	.word	0x20000190
 8004218:	200001a0 	.word	0x200001a0

0800421c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b099      	sub	sp, #100	; 0x64
 8004220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004222:	242c      	movs	r4, #44	; 0x2c
 8004224:	193b      	adds	r3, r7, r4
 8004226:	0018      	movs	r0, r3
 8004228:	2334      	movs	r3, #52	; 0x34
 800422a:	001a      	movs	r2, r3
 800422c:	2100      	movs	r1, #0
 800422e:	f000 fd29 	bl	8004c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004232:	2318      	movs	r3, #24
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	0018      	movs	r0, r3
 8004238:	2314      	movs	r3, #20
 800423a:	001a      	movs	r2, r3
 800423c:	2100      	movs	r1, #0
 800423e:	f000 fd21 	bl	8004c84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004242:	003b      	movs	r3, r7
 8004244:	0018      	movs	r0, r3
 8004246:	2318      	movs	r3, #24
 8004248:	001a      	movs	r2, r3
 800424a:	2100      	movs	r1, #0
 800424c:	f000 fd1a 	bl	8004c84 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004250:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <SystemClock_Config+0xdc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a29      	ldr	r2, [pc, #164]	; (80042fc <SystemClock_Config+0xe0>)
 8004256:	401a      	ands	r2, r3
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <SystemClock_Config+0xdc>)
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	0109      	lsls	r1, r1, #4
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004262:	0021      	movs	r1, r4
 8004264:	187b      	adds	r3, r7, r1
 8004266:	2210      	movs	r2, #16
 8004268:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800426a:	187b      	adds	r3, r7, r1
 800426c:	2201      	movs	r2, #1
 800426e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2200      	movs	r2, #0
 8004274:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004276:	187b      	adds	r3, r7, r1
 8004278:	22a0      	movs	r2, #160	; 0xa0
 800427a:	0212      	lsls	r2, r2, #8
 800427c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800427e:	187b      	adds	r3, r7, r1
 8004280:	2200      	movs	r2, #0
 8004282:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004284:	187b      	adds	r3, r7, r1
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fe36 	bl	8001ef8 <HAL_RCC_OscConfig>
 800428c:	1e03      	subs	r3, r0, #0
 800428e:	d001      	beq.n	8004294 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004290:	f000 fa84 	bl	800479c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004294:	2118      	movs	r1, #24
 8004296:	187b      	adds	r3, r7, r1
 8004298:	220f      	movs	r2, #15
 800429a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800429c:	187b      	adds	r3, r7, r1
 800429e:	2200      	movs	r2, #0
 80042a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042a2:	187b      	adds	r3, r7, r1
 80042a4:	2200      	movs	r2, #0
 80042a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042a8:	187b      	adds	r3, r7, r1
 80042aa:	2200      	movs	r2, #0
 80042ac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042ae:	187b      	adds	r3, r7, r1
 80042b0:	2200      	movs	r2, #0
 80042b2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80042b4:	187b      	adds	r3, r7, r1
 80042b6:	2100      	movs	r1, #0
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fe f997 	bl	80025ec <HAL_RCC_ClockConfig>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d001      	beq.n	80042c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80042c2:	f000 fa6b 	bl	800479c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 80042c6:	003b      	movs	r3, r7
 80042c8:	220e      	movs	r2, #14
 80042ca:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80042cc:	003b      	movs	r3, r7
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80042d2:	003b      	movs	r3, r7
 80042d4:	2200      	movs	r2, #0
 80042d6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80042d8:	003b      	movs	r3, r7
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042de:	003b      	movs	r3, r7
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7fe fb67 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 80042e6:	1e03      	subs	r3, r0, #0
 80042e8:	d001      	beq.n	80042ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80042ea:	f000 fa57 	bl	800479c <Error_Handler>
  }
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b019      	add	sp, #100	; 0x64
 80042f4:	bd90      	pop	{r4, r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	40007000 	.word	0x40007000
 80042fc:	ffffe7ff 	.word	0xffffe7ff

08004300 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004306:	003b      	movs	r3, r7
 8004308:	0018      	movs	r0, r3
 800430a:	2308      	movs	r3, #8
 800430c:	001a      	movs	r2, r3
 800430e:	2100      	movs	r1, #0
 8004310:	f000 fcb8 	bl	8004c84 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8004314:	4b3d      	ldr	r3, [pc, #244]	; (800440c <MX_ADC_Init+0x10c>)
 8004316:	4a3e      	ldr	r2, [pc, #248]	; (8004410 <MX_ADC_Init+0x110>)
 8004318:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800431a:	4b3c      	ldr	r3, [pc, #240]	; (800440c <MX_ADC_Init+0x10c>)
 800431c:	2200      	movs	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004320:	4b3a      	ldr	r3, [pc, #232]	; (800440c <MX_ADC_Init+0x10c>)
 8004322:	22c0      	movs	r2, #192	; 0xc0
 8004324:	0612      	lsls	r2, r2, #24
 8004326:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004328:	4b38      	ldr	r3, [pc, #224]	; (800440c <MX_ADC_Init+0x10c>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <MX_ADC_Init+0x10c>)
 8004330:	2200      	movs	r2, #0
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <MX_ADC_Init+0x10c>)
 8004336:	2201      	movs	r2, #1
 8004338:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800433a:	4b34      	ldr	r3, [pc, #208]	; (800440c <MX_ADC_Init+0x10c>)
 800433c:	2200      	movs	r2, #0
 800433e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004340:	4b32      	ldr	r3, [pc, #200]	; (800440c <MX_ADC_Init+0x10c>)
 8004342:	2220      	movs	r2, #32
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <MX_ADC_Init+0x10c>)
 800434a:	2221      	movs	r2, #33	; 0x21
 800434c:	2100      	movs	r1, #0
 800434e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004350:	4b2e      	ldr	r3, [pc, #184]	; (800440c <MX_ADC_Init+0x10c>)
 8004352:	2200      	movs	r2, #0
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004356:	4b2d      	ldr	r3, [pc, #180]	; (800440c <MX_ADC_Init+0x10c>)
 8004358:	22c2      	movs	r2, #194	; 0xc2
 800435a:	32ff      	adds	r2, #255	; 0xff
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800435e:	4b2b      	ldr	r3, [pc, #172]	; (800440c <MX_ADC_Init+0x10c>)
 8004360:	222c      	movs	r2, #44	; 0x2c
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <MX_ADC_Init+0x10c>)
 8004368:	2204      	movs	r2, #4
 800436a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <MX_ADC_Init+0x10c>)
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <MX_ADC_Init+0x10c>)
 8004374:	2200      	movs	r2, #0
 8004376:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004378:	4b24      	ldr	r3, [pc, #144]	; (800440c <MX_ADC_Init+0x10c>)
 800437a:	2200      	movs	r2, #0
 800437c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <MX_ADC_Init+0x10c>)
 8004380:	2200      	movs	r2, #0
 8004382:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <MX_ADC_Init+0x10c>)
 8004386:	0018      	movs	r0, r3
 8004388:	f7fc f8b6 	bl	80004f8 <HAL_ADC_Init>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d001      	beq.n	8004394 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004390:	f000 fa04 	bl	800479c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004394:	003b      	movs	r3, r7
 8004396:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <MX_ADC_Init+0x114>)
 8004398:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800439a:	003b      	movs	r3, r7
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	0152      	lsls	r2, r2, #5
 80043a0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80043a2:	003a      	movs	r2, r7
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <MX_ADC_Init+0x10c>)
 80043a6:	0011      	movs	r1, r2
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7fc fa19 	bl	80007e0 <HAL_ADC_ConfigChannel>
 80043ae:	1e03      	subs	r3, r0, #0
 80043b0:	d001      	beq.n	80043b6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80043b2:	f000 f9f3 	bl	800479c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80043b6:	003b      	movs	r3, r7
 80043b8:	4a17      	ldr	r2, [pc, #92]	; (8004418 <MX_ADC_Init+0x118>)
 80043ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80043bc:	003a      	movs	r2, r7
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <MX_ADC_Init+0x10c>)
 80043c0:	0011      	movs	r1, r2
 80043c2:	0018      	movs	r0, r3
 80043c4:	f7fc fa0c 	bl	80007e0 <HAL_ADC_ConfigChannel>
 80043c8:	1e03      	subs	r3, r0, #0
 80043ca:	d001      	beq.n	80043d0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80043cc:	f000 f9e6 	bl	800479c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80043d0:	003b      	movs	r3, r7
 80043d2:	4a12      	ldr	r2, [pc, #72]	; (800441c <MX_ADC_Init+0x11c>)
 80043d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80043d6:	003a      	movs	r2, r7
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <MX_ADC_Init+0x10c>)
 80043da:	0011      	movs	r1, r2
 80043dc:	0018      	movs	r0, r3
 80043de:	f7fc f9ff 	bl	80007e0 <HAL_ADC_ConfigChannel>
 80043e2:	1e03      	subs	r3, r0, #0
 80043e4:	d001      	beq.n	80043ea <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80043e6:	f000 f9d9 	bl	800479c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80043ea:	003b      	movs	r3, r7
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <MX_ADC_Init+0x120>)
 80043ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80043f0:	003a      	movs	r2, r7
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <MX_ADC_Init+0x10c>)
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f7fc f9f2 	bl	80007e0 <HAL_ADC_ConfigChannel>
 80043fc:	1e03      	subs	r3, r0, #0
 80043fe:	d001      	beq.n	8004404 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8004400:	f000 f9cc 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000220 	.word	0x20000220
 8004410:	40012400 	.word	0x40012400
 8004414:	28000400 	.word	0x28000400
 8004418:	2c000800 	.word	0x2c000800
 800441c:	30001000 	.word	0x30001000
 8004420:	34002000 	.word	0x34002000

08004424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <MX_I2C1_Init+0x78>)
 800442a:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <MX_I2C1_Init+0x7c>)
 800442c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <MX_I2C1_Init+0x78>)
 8004430:	22e1      	movs	r2, #225	; 0xe1
 8004432:	00d2      	lsls	r2, r2, #3
 8004434:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <MX_I2C1_Init+0x78>)
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <MX_I2C1_Init+0x78>)
 800443e:	2201      	movs	r2, #1
 8004440:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <MX_I2C1_Init+0x78>)
 8004444:	2200      	movs	r2, #0
 8004446:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <MX_I2C1_Init+0x78>)
 800444a:	2200      	movs	r2, #0
 800444c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <MX_I2C1_Init+0x78>)
 8004450:	2200      	movs	r2, #0
 8004452:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <MX_I2C1_Init+0x78>)
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <MX_I2C1_Init+0x78>)
 800445c:	2200      	movs	r2, #0
 800445e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <MX_I2C1_Init+0x78>)
 8004462:	0018      	movs	r0, r3
 8004464:	f7fc feae 	bl	80011c4 <HAL_I2C_Init>
 8004468:	1e03      	subs	r3, r0, #0
 800446a:	d001      	beq.n	8004470 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800446c:	f000 f996 	bl	800479c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <MX_I2C1_Init+0x78>)
 8004472:	2100      	movs	r1, #0
 8004474:	0018      	movs	r0, r3
 8004476:	f7fd fca7 	bl	8001dc8 <HAL_I2CEx_ConfigAnalogFilter>
 800447a:	1e03      	subs	r3, r0, #0
 800447c:	d001      	beq.n	8004482 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800447e:	f000 f98d 	bl	800479c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <MX_I2C1_Init+0x78>)
 8004484:	2100      	movs	r1, #0
 8004486:	0018      	movs	r0, r3
 8004488:	f7fd fcea 	bl	8001e60 <HAL_I2CEx_ConfigDigitalFilter>
 800448c:	1e03      	subs	r3, r0, #0
 800448e:	d001      	beq.n	8004494 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8004490:	f000 f984 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	20000070 	.word	0x20000070
 80044a0:	40005400 	.word	0x40005400

080044a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80044a8:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044aa:	4a14      	ldr	r2, [pc, #80]	; (80044fc <MX_LPUART1_UART_Init+0x58>)
 80044ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044b0:	22e1      	movs	r2, #225	; 0xe1
 80044b2:	0252      	lsls	r2, r2, #9
 80044b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80044bc:	4b0e      	ldr	r3, [pc, #56]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044be:	2200      	movs	r2, #0
 80044c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044ca:	220c      	movs	r2, #12
 80044cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044d4:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044dc:	2200      	movs	r2, #0
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <MX_LPUART1_UART_Init+0x54>)
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7fe fb8e 	bl	8002c04 <HAL_UART_Init>
 80044e8:	1e03      	subs	r3, r0, #0
 80044ea:	d001      	beq.n	80044f0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80044ec:	f000 f956 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	200000bc 	.word	0x200000bc
 80044fc:	40004800 	.word	0x40004800

08004500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <MX_USART2_UART_Init+0x58>)
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <MX_USART2_UART_Init+0x5c>)
 8004508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800450a:	4b13      	ldr	r3, [pc, #76]	; (8004558 <MX_USART2_UART_Init+0x58>)
 800450c:	22e1      	movs	r2, #225	; 0xe1
 800450e:	0252      	lsls	r2, r2, #9
 8004510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <MX_USART2_UART_Init+0x58>)
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <MX_USART2_UART_Init+0x58>)
 800451a:	2200      	movs	r2, #0
 800451c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <MX_USART2_UART_Init+0x58>)
 8004520:	2200      	movs	r2, #0
 8004522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <MX_USART2_UART_Init+0x58>)
 8004526:	220c      	movs	r2, #12
 8004528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <MX_USART2_UART_Init+0x58>)
 800452c:	2200      	movs	r2, #0
 800452e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <MX_USART2_UART_Init+0x58>)
 8004532:	2200      	movs	r2, #0
 8004534:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004536:	4b08      	ldr	r3, [pc, #32]	; (8004558 <MX_USART2_UART_Init+0x58>)
 8004538:	2200      	movs	r2, #0
 800453a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <MX_USART2_UART_Init+0x58>)
 800453e:	2200      	movs	r2, #0
 8004540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <MX_USART2_UART_Init+0x58>)
 8004544:	0018      	movs	r0, r3
 8004546:	f7fe fb5d 	bl	8002c04 <HAL_UART_Init>
 800454a:	1e03      	subs	r3, r0, #0
 800454c:	d001      	beq.n	8004552 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800454e:	f000 f925 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	200001a0 	.word	0x200001a0
 800455c:	40004400 	.word	0x40004400

08004560 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <MX_DMA_Init+0x38>)
 8004568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <MX_DMA_Init+0x38>)
 800456c:	2101      	movs	r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <MX_DMA_Init+0x38>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	2201      	movs	r2, #1
 8004578:	4013      	ands	r3, r2
 800457a:	607b      	str	r3, [r7, #4]
 800457c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800457e:	2200      	movs	r2, #0
 8004580:	2100      	movs	r1, #0
 8004582:	200b      	movs	r0, #11
 8004584:	f7fc fa3c 	bl	8000a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004588:	200b      	movs	r0, #11
 800458a:	f7fc fa4e 	bl	8000a2a <HAL_NVIC_EnableIRQ>

}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	46bd      	mov	sp, r7
 8004592:	b002      	add	sp, #8
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	40021000 	.word	0x40021000

0800459c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b08b      	sub	sp, #44	; 0x2c
 80045a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a2:	2414      	movs	r4, #20
 80045a4:	193b      	adds	r3, r7, r4
 80045a6:	0018      	movs	r0, r3
 80045a8:	2314      	movs	r3, #20
 80045aa:	001a      	movs	r2, r3
 80045ac:	2100      	movs	r1, #0
 80045ae:	f000 fb69 	bl	8004c84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045b2:	4b47      	ldr	r3, [pc, #284]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045b8:	2104      	movs	r1, #4
 80045ba:	430a      	orrs	r2, r1
 80045bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	2204      	movs	r2, #4
 80045c4:	4013      	ands	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045ca:	4b41      	ldr	r3, [pc, #260]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	4b40      	ldr	r3, [pc, #256]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	430a      	orrs	r2, r1
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80045d6:	4b3e      	ldr	r3, [pc, #248]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	4013      	ands	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e2:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e6:	4b3a      	ldr	r3, [pc, #232]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045e8:	2101      	movs	r1, #1
 80045ea:	430a      	orrs	r2, r1
 80045ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80045ee:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	2201      	movs	r2, #1
 80045f4:	4013      	ands	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fa:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <MX_GPIO_Init+0x134>)
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	4b34      	ldr	r3, [pc, #208]	; (80046d0 <MX_GPIO_Init+0x134>)
 8004600:	2102      	movs	r1, #2
 8004602:	430a      	orrs	r2, r1
 8004604:	62da      	str	r2, [r3, #44]	; 0x2c
 8004606:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <MX_GPIO_Init+0x134>)
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004612:	23a0      	movs	r3, #160	; 0xa0
 8004614:	05db      	lsls	r3, r3, #23
 8004616:	2200      	movs	r2, #0
 8004618:	2120      	movs	r1, #32
 800461a:	0018      	movs	r0, r3
 800461c:	f7fc fda2 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004620:	193b      	adds	r3, r7, r4
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	0192      	lsls	r2, r2, #6
 8004626:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004628:	193b      	adds	r3, r7, r4
 800462a:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <MX_GPIO_Init+0x138>)
 800462c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	193b      	adds	r3, r7, r4
 8004630:	2200      	movs	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004634:	193b      	adds	r3, r7, r4
 8004636:	4a28      	ldr	r2, [pc, #160]	; (80046d8 <MX_GPIO_Init+0x13c>)
 8004638:	0019      	movs	r1, r3
 800463a:	0010      	movs	r0, r2
 800463c:	f7fc fc14 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004640:	0021      	movs	r1, r4
 8004642:	187b      	adds	r3, r7, r1
 8004644:	2220      	movs	r2, #32
 8004646:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004648:	187b      	adds	r3, r7, r1
 800464a:	2201      	movs	r2, #1
 800464c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464e:	187b      	adds	r3, r7, r1
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004654:	187b      	adds	r3, r7, r1
 8004656:	2200      	movs	r2, #0
 8004658:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800465a:	000c      	movs	r4, r1
 800465c:	187a      	adds	r2, r7, r1
 800465e:	23a0      	movs	r3, #160	; 0xa0
 8004660:	05db      	lsls	r3, r3, #23
 8004662:	0011      	movs	r1, r2
 8004664:	0018      	movs	r0, r3
 8004666:	f7fc fbff 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800466a:	0021      	movs	r1, r4
 800466c:	187b      	adds	r3, r7, r1
 800466e:	2281      	movs	r2, #129	; 0x81
 8004670:	00d2      	lsls	r2, r2, #3
 8004672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004674:	187b      	adds	r3, r7, r1
 8004676:	2202      	movs	r2, #2
 8004678:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467a:	187b      	adds	r3, r7, r1
 800467c:	2200      	movs	r2, #0
 800467e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004680:	187b      	adds	r3, r7, r1
 8004682:	2200      	movs	r2, #0
 8004684:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004686:	187b      	adds	r3, r7, r1
 8004688:	2202      	movs	r2, #2
 800468a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800468c:	000c      	movs	r4, r1
 800468e:	187b      	adds	r3, r7, r1
 8004690:	4a12      	ldr	r2, [pc, #72]	; (80046dc <MX_GPIO_Init+0x140>)
 8004692:	0019      	movs	r1, r3
 8004694:	0010      	movs	r0, r2
 8004696:	f7fc fbe7 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800469a:	0021      	movs	r1, r4
 800469c:	187b      	adds	r3, r7, r1
 800469e:	2210      	movs	r2, #16
 80046a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	2202      	movs	r2, #2
 80046a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	2200      	movs	r2, #0
 80046ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ae:	187b      	adds	r3, r7, r1
 80046b0:	2200      	movs	r2, #0
 80046b2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	2204      	movs	r2, #4
 80046b8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	4a07      	ldr	r2, [pc, #28]	; (80046dc <MX_GPIO_Init+0x140>)
 80046be:	0019      	movs	r1, r3
 80046c0:	0010      	movs	r0, r2
 80046c2:	f7fc fbd1 	bl	8000e68 <HAL_GPIO_Init>

}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b00b      	add	sp, #44	; 0x2c
 80046cc:	bd90      	pop	{r4, r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	40021000 	.word	0x40021000
 80046d4:	10210000 	.word	0x10210000
 80046d8:	50000800 	.word	0x50000800
 80046dc:	50000400 	.word	0x50000400

080046e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  if (uart_statu == HAL_OK) {
 80046e8:	4b10      	ldr	r3, [pc, #64]	; (800472c <HAL_UART_RxCpltCallback+0x4c>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10f      	bne.n	8004710 <HAL_UART_RxCpltCallback+0x30>
	  uart_statu = HAL_UART_Transmit_IT(&huart2, uart_data, 1);
 80046f0:	490f      	ldr	r1, [pc, #60]	; (8004730 <HAL_UART_RxCpltCallback+0x50>)
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_UART_RxCpltCallback+0x54>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7fe fb80 	bl	8002dfc <HAL_UART_Transmit_IT>
 80046fc:	0003      	movs	r3, r0
 80046fe:	001a      	movs	r2, r3
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_UART_RxCpltCallback+0x4c>)
 8004702:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004704:	23a0      	movs	r3, #160	; 0xa0
 8004706:	05db      	lsls	r3, r3, #23
 8004708:	2120      	movs	r1, #32
 800470a:	0018      	movs	r0, r3
 800470c:	f7fc fd47 	bl	800119e <HAL_GPIO_TogglePin>
  }

  uart_statu = HAL_UART_Receive_IT(&huart2, uart_data, 1);
 8004710:	4907      	ldr	r1, [pc, #28]	; (8004730 <HAL_UART_RxCpltCallback+0x50>)
 8004712:	4b08      	ldr	r3, [pc, #32]	; (8004734 <HAL_UART_RxCpltCallback+0x54>)
 8004714:	2201      	movs	r2, #1
 8004716:	0018      	movs	r0, r3
 8004718:	f7fe fbde 	bl	8002ed8 <HAL_UART_Receive_IT>
 800471c:	0003      	movs	r3, r0
 800471e:	001a      	movs	r2, r3
 8004720:	4b02      	ldr	r3, [pc, #8]	; (800472c <HAL_UART_RxCpltCallback+0x4c>)
 8004722:	701a      	strb	r2, [r3, #0]

}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b002      	add	sp, #8
 800472a:	bd80      	pop	{r7, pc}
 800472c:	2000027c 	.word	0x2000027c
 8004730:	2000013c 	.word	0x2000013c
 8004734:	200001a0 	.word	0x200001a0

08004738 <HAL_UART_AbortReceiveCpltCallback>:

void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(huart);

//  printf("\n\r[IDLE]Received %d Bytes:", rev_size);
  for(uint16_t i = 0; i < rev_size; i++) {
 8004740:	230e      	movs	r3, #14
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	2200      	movs	r2, #0
 8004746:	801a      	strh	r2, [r3, #0]
 8004748:	e00e      	b.n	8004768 <HAL_UART_AbortReceiveCpltCallback+0x30>
//	  printf(" 0x%02X", uart_rx_buf[i]);
	  HAL_UART_Transmit(&huart2, (uint8_t *)&uart_rx_buf[i], 1, 0xFFFF);
 800474a:	240e      	movs	r4, #14
 800474c:	193b      	adds	r3, r7, r4
 800474e:	881a      	ldrh	r2, [r3, #0]
 8004750:	4b0e      	ldr	r3, [pc, #56]	; (800478c <HAL_UART_AbortReceiveCpltCallback+0x54>)
 8004752:	18d1      	adds	r1, r2, r3
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <HAL_UART_AbortReceiveCpltCallback+0x58>)
 8004756:	480f      	ldr	r0, [pc, #60]	; (8004794 <HAL_UART_AbortReceiveCpltCallback+0x5c>)
 8004758:	2201      	movs	r2, #1
 800475a:	f7fe faa7 	bl	8002cac <HAL_UART_Transmit>
  for(uint16_t i = 0; i < rev_size; i++) {
 800475e:	193b      	adds	r3, r7, r4
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	193b      	adds	r3, r7, r4
 8004764:	3201      	adds	r2, #1
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	230e      	movs	r3, #14
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	881a      	ldrh	r2, [r3, #0]
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <HAL_UART_AbortReceiveCpltCallback+0x60>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d3e9      	bcc.n	800474a <HAL_UART_AbortReceiveCpltCallback+0x12>


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, 15);
 8004776:	4905      	ldr	r1, [pc, #20]	; (800478c <HAL_UART_AbortReceiveCpltCallback+0x54>)
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_UART_AbortReceiveCpltCallback+0x5c>)
 800477a:	220f      	movs	r2, #15
 800477c:	0018      	movs	r0, r3
 800477e:	f7fe fc63 	bl	8003048 <HAL_UART_Receive_DMA>
}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	b005      	add	sp, #20
 8004788:	bd90      	pop	{r4, r7, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	20000190 	.word	0x20000190
 8004790:	0000ffff 	.word	0x0000ffff
 8004794:	200001a0 	.word	0x200001a0
 8004798:	20000020 	.word	0x20000020

0800479c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <HAL_MspInit+0x24>)
 80047ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_MspInit+0x24>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	430a      	orrs	r2, r1
 80047b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <HAL_MspInit+0x24>)
 80047ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <HAL_MspInit+0x24>)
 80047be:	2180      	movs	r1, #128	; 0x80
 80047c0:	0549      	lsls	r1, r1, #21
 80047c2:	430a      	orrs	r2, r1
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000

080047d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d8:	230c      	movs	r3, #12
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	0018      	movs	r0, r3
 80047de:	2314      	movs	r3, #20
 80047e0:	001a      	movs	r2, r3
 80047e2:	2100      	movs	r1, #0
 80047e4:	f000 fa4e 	bl	8004c84 <memset>
  if(hadc->Instance==ADC1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <HAL_ADC_MspInit+0x70>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d122      	bne.n	8004838 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <HAL_ADC_MspInit+0x74>)
 80047f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f6:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_ADC_MspInit+0x74>)
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	0089      	lsls	r1, r1, #2
 80047fc:	430a      	orrs	r2, r1
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004800:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_ADC_MspInit+0x74>)
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <HAL_ADC_MspInit+0x74>)
 8004806:	2104      	movs	r1, #4
 8004808:	430a      	orrs	r2, r1
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
 800480c:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <HAL_ADC_MspInit+0x74>)
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	2204      	movs	r2, #4
 8004812:	4013      	ands	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC_IN10
    PC1     ------> ADC_IN11
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004818:	210c      	movs	r1, #12
 800481a:	187b      	adds	r3, r7, r1
 800481c:	220f      	movs	r2, #15
 800481e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004820:	187b      	adds	r3, r7, r1
 8004822:	2203      	movs	r2, #3
 8004824:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004826:	187b      	adds	r3, r7, r1
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800482c:	187b      	adds	r3, r7, r1
 800482e:	4a06      	ldr	r2, [pc, #24]	; (8004848 <HAL_ADC_MspInit+0x78>)
 8004830:	0019      	movs	r1, r3
 8004832:	0010      	movs	r0, r2
 8004834:	f7fc fb18 	bl	8000e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b008      	add	sp, #32
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40012400 	.word	0x40012400
 8004844:	40021000 	.word	0x40021000
 8004848:	50000800 	.word	0x50000800

0800484c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004854:	230c      	movs	r3, #12
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	0018      	movs	r0, r3
 800485a:	2314      	movs	r3, #20
 800485c:	001a      	movs	r2, r3
 800485e:	2100      	movs	r1, #0
 8004860:	f000 fa10 	bl	8004c84 <memset>
  if(hi2c->Instance==I2C1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1c      	ldr	r2, [pc, #112]	; (80048dc <HAL_I2C_MspInit+0x90>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d131      	bne.n	80048d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800486e:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <HAL_I2C_MspInit+0x94>)
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_I2C_MspInit+0x94>)
 8004874:	2102      	movs	r1, #2
 8004876:	430a      	orrs	r2, r1
 8004878:	62da      	str	r2, [r3, #44]	; 0x2c
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_I2C_MspInit+0x94>)
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	2202      	movs	r2, #2
 8004880:	4013      	ands	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004886:	210c      	movs	r1, #12
 8004888:	187b      	adds	r3, r7, r1
 800488a:	22c0      	movs	r2, #192	; 0xc0
 800488c:	0092      	lsls	r2, r2, #2
 800488e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004890:	187b      	adds	r3, r7, r1
 8004892:	2212      	movs	r2, #18
 8004894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004896:	187b      	adds	r3, r7, r1
 8004898:	2201      	movs	r2, #1
 800489a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800489c:	187b      	adds	r3, r7, r1
 800489e:	2203      	movs	r2, #3
 80048a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	2204      	movs	r2, #4
 80048a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	4a0e      	ldr	r2, [pc, #56]	; (80048e4 <HAL_I2C_MspInit+0x98>)
 80048ac:	0019      	movs	r1, r3
 80048ae:	0010      	movs	r0, r2
 80048b0:	f7fc fada 	bl	8000e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_I2C_MspInit+0x94>)
 80048b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <HAL_I2C_MspInit+0x94>)
 80048ba:	2180      	movs	r1, #128	; 0x80
 80048bc:	0389      	lsls	r1, r1, #14
 80048be:	430a      	orrs	r2, r1
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	2017      	movs	r0, #23
 80048c8:	f7fc f89a 	bl	8000a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80048cc:	2017      	movs	r0, #23
 80048ce:	f7fc f8ac 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b008      	add	sp, #32
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	40005400 	.word	0x40005400
 80048e0:	40021000 	.word	0x40021000
 80048e4:	50000400 	.word	0x50000400

080048e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f0:	2314      	movs	r3, #20
 80048f2:	18fb      	adds	r3, r7, r3
 80048f4:	0018      	movs	r0, r3
 80048f6:	2314      	movs	r3, #20
 80048f8:	001a      	movs	r2, r3
 80048fa:	2100      	movs	r1, #0
 80048fc:	f000 f9c2 	bl	8004c84 <memset>
  if(huart->Instance==LPUART1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a5d      	ldr	r2, [pc, #372]	; (8004a7c <HAL_UART_MspInit+0x194>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d129      	bne.n	800495e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800490a:	4b5d      	ldr	r3, [pc, #372]	; (8004a80 <HAL_UART_MspInit+0x198>)
 800490c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490e:	4b5c      	ldr	r3, [pc, #368]	; (8004a80 <HAL_UART_MspInit+0x198>)
 8004910:	2180      	movs	r1, #128	; 0x80
 8004912:	02c9      	lsls	r1, r1, #11
 8004914:	430a      	orrs	r2, r1
 8004916:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004918:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <HAL_UART_MspInit+0x198>)
 800491a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491c:	4b58      	ldr	r3, [pc, #352]	; (8004a80 <HAL_UART_MspInit+0x198>)
 800491e:	2104      	movs	r1, #4
 8004920:	430a      	orrs	r2, r1
 8004922:	62da      	str	r2, [r3, #44]	; 0x2c
 8004924:	4b56      	ldr	r3, [pc, #344]	; (8004a80 <HAL_UART_MspInit+0x198>)
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	2204      	movs	r2, #4
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration    
    PC4     ------> LPUART1_TX
    PC5     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004930:	2114      	movs	r1, #20
 8004932:	187b      	adds	r3, r7, r1
 8004934:	2230      	movs	r2, #48	; 0x30
 8004936:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004938:	187b      	adds	r3, r7, r1
 800493a:	2202      	movs	r2, #2
 800493c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493e:	187b      	adds	r3, r7, r1
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004944:	187b      	adds	r3, r7, r1
 8004946:	2203      	movs	r2, #3
 8004948:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_LPUART1;
 800494a:	187b      	adds	r3, r7, r1
 800494c:	2202      	movs	r2, #2
 800494e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004950:	187b      	adds	r3, r7, r1
 8004952:	4a4c      	ldr	r2, [pc, #304]	; (8004a84 <HAL_UART_MspInit+0x19c>)
 8004954:	0019      	movs	r1, r3
 8004956:	0010      	movs	r0, r2
 8004958:	f7fc fa86 	bl	8000e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800495c:	e089      	b.n	8004a72 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a49      	ldr	r2, [pc, #292]	; (8004a88 <HAL_UART_MspInit+0x1a0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d000      	beq.n	800496a <HAL_UART_MspInit+0x82>
 8004968:	e083      	b.n	8004a72 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800496a:	4b45      	ldr	r3, [pc, #276]	; (8004a80 <HAL_UART_MspInit+0x198>)
 800496c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496e:	4b44      	ldr	r3, [pc, #272]	; (8004a80 <HAL_UART_MspInit+0x198>)
 8004970:	2180      	movs	r1, #128	; 0x80
 8004972:	0289      	lsls	r1, r1, #10
 8004974:	430a      	orrs	r2, r1
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004978:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_UART_MspInit+0x198>)
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <HAL_UART_MspInit+0x198>)
 800497e:	2101      	movs	r1, #1
 8004980:	430a      	orrs	r2, r1
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c
 8004984:	4b3e      	ldr	r3, [pc, #248]	; (8004a80 <HAL_UART_MspInit+0x198>)
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	2201      	movs	r2, #1
 800498a:	4013      	ands	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004990:	2114      	movs	r1, #20
 8004992:	187b      	adds	r3, r7, r1
 8004994:	220c      	movs	r2, #12
 8004996:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	187b      	adds	r3, r7, r1
 800499a:	2202      	movs	r2, #2
 800499c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a4:	187b      	adds	r3, r7, r1
 80049a6:	2203      	movs	r2, #3
 80049a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	2204      	movs	r2, #4
 80049ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b0:	187a      	adds	r2, r7, r1
 80049b2:	23a0      	movs	r3, #160	; 0xa0
 80049b4:	05db      	lsls	r3, r3, #23
 80049b6:	0011      	movs	r1, r2
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fc fa55 	bl	8000e68 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80049be:	4b33      	ldr	r3, [pc, #204]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049c0:	4a33      	ldr	r2, [pc, #204]	; (8004a90 <HAL_UART_MspInit+0x1a8>)
 80049c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80049c4:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049c6:	2204      	movs	r2, #4
 80049c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ca:	4b30      	ldr	r3, [pc, #192]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049d0:	4b2e      	ldr	r3, [pc, #184]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049d6:	4b2d      	ldr	r3, [pc, #180]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049d8:	2280      	movs	r2, #128	; 0x80
 80049da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049de:	2200      	movs	r2, #0
 80049e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049e2:	4b2a      	ldr	r3, [pc, #168]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80049e8:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049ee:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7fc f834 	bl	8000a64 <HAL_DMA_Init>
 80049fc:	1e03      	subs	r3, r0, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8004a00:	f7ff fecc 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a21      	ldr	r2, [pc, #132]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 8004a08:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_UART_MspInit+0x1a4>)
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a12:	4a21      	ldr	r2, [pc, #132]	; (8004a98 <HAL_UART_MspInit+0x1b0>)
 8004a14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8004a16:	4b1f      	ldr	r3, [pc, #124]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a18:	2204      	movs	r2, #4
 8004a1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a1e:	2210      	movs	r2, #16
 8004a20:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a28:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a2e:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a34:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004a3a:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7fc f80b 	bl	8000a64 <HAL_DMA_Init>
 8004a4e:	1e03      	subs	r3, r0, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8004a52:	f7ff fea3 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a5a:	669a      	str	r2, [r3, #104]	; 0x68
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <HAL_UART_MspInit+0x1ac>)
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a62:	2200      	movs	r2, #0
 8004a64:	2100      	movs	r1, #0
 8004a66:	201c      	movs	r0, #28
 8004a68:	f7fb ffca 	bl	8000a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a6c:	201c      	movs	r0, #28
 8004a6e:	f7fb ffdc 	bl	8000a2a <HAL_NVIC_EnableIRQ>
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b00a      	add	sp, #40	; 0x28
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	40004800 	.word	0x40004800
 8004a80:	40021000 	.word	0x40021000
 8004a84:	50000800 	.word	0x50000800
 8004a88:	40004400 	.word	0x40004400
 8004a8c:	20000028 	.word	0x20000028
 8004a90:	40020058 	.word	0x40020058
 8004a94:	20000148 	.word	0x20000148
 8004a98:	40020044 	.word	0x40020044

08004a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aaa:	e7fe      	b.n	8004aaa <HardFault_Handler+0x4>

08004aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ac4:	f7fb fd02 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fc f8ea 	bl	8000cb0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f7fc f8e6 	bl	8000cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	20000148 	.word	0x20000148
 8004af0:	20000028 	.word	0x20000028

08004af4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <I2C1_IRQHandler+0x2c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	23e0      	movs	r3, #224	; 0xe0
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4013      	ands	r3, r2
 8004b04:	d004      	beq.n	8004b10 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <I2C1_IRQHandler+0x2c>)
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fc fc0b 	bl	8001324 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8004b0e:	e003      	b.n	8004b18 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <I2C1_IRQHandler+0x2c>)
 8004b12:	0018      	movs	r0, r3
 8004b14:	f7fc fbec 	bl	80012f0 <HAL_I2C_EV_IRQHandler>
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	20000070 	.word	0x20000070

08004b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <USART2_IRQHandler+0x14>)
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fe fb9c 	bl	8003268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	200001a0 	.word	0x200001a0

08004b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <SystemInit+0x64>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <SystemInit+0x64>)
 8004b46:	2180      	movs	r1, #128	; 0x80
 8004b48:	0049      	lsls	r1, r1, #1
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <SystemInit+0x64>)
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <SystemInit+0x64>)
 8004b54:	4913      	ldr	r1, [pc, #76]	; (8004ba4 <SystemInit+0x68>)
 8004b56:	400a      	ands	r2, r1
 8004b58:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <SystemInit+0x64>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <SystemInit+0x64>)
 8004b60:	4911      	ldr	r1, [pc, #68]	; (8004ba8 <SystemInit+0x6c>)
 8004b62:	400a      	ands	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <SystemInit+0x64>)
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <SystemInit+0x64>)
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	438a      	bics	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <SystemInit+0x64>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <SystemInit+0x64>)
 8004b78:	490c      	ldr	r1, [pc, #48]	; (8004bac <SystemInit+0x70>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <SystemInit+0x64>)
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <SystemInit+0x64>)
 8004b84:	490a      	ldr	r1, [pc, #40]	; (8004bb0 <SystemInit+0x74>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <SystemInit+0x64>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b90:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <SystemInit+0x78>)
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	0512      	lsls	r2, r2, #20
 8004b96:	609a      	str	r2, [r3, #8]
#endif
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	88ff400c 	.word	0x88ff400c
 8004ba8:	fef6fff6 	.word	0xfef6fff6
 8004bac:	fffbffff 	.word	0xfffbffff
 8004bb0:	ff02ffff 	.word	0xff02ffff
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004bb8:	4813      	ldr	r0, [pc, #76]	; (8004c08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004bba:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8004bbc:	4813      	ldr	r0, [pc, #76]	; (8004c0c <LoopForever+0x6>)
    LDR R1, [R0]
 8004bbe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004bc0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <LoopForever+0xa>)
    CMP R1, R2
 8004bc4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8004bc6:	d105      	bne.n	8004bd4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8004bc8:	4812      	ldr	r0, [pc, #72]	; (8004c14 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004bca:	4913      	ldr	r1, [pc, #76]	; (8004c18 <LoopForever+0x12>)
    STR R1, [R0]
 8004bcc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004bce:	4813      	ldr	r0, [pc, #76]	; (8004c1c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004bd0:	4913      	ldr	r1, [pc, #76]	; (8004c20 <LoopForever+0x1a>)
    STR R1, [R0]
 8004bd2:	6001      	str	r1, [r0, #0]

08004bd4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004bd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bd6:	e003      	b.n	8004be0 <LoopCopyDataInit>

08004bd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8004bda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bde:	3104      	adds	r1, #4

08004be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004be0:	4811      	ldr	r0, [pc, #68]	; (8004c28 <LoopForever+0x22>)
  ldr  r3, =_edata
 8004be2:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <LoopForever+0x26>)
  adds  r2, r0, r1
 8004be4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004be6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004be8:	d3f6      	bcc.n	8004bd8 <CopyDataInit>
  ldr  r2, =_sbss
 8004bea:	4a11      	ldr	r2, [pc, #68]	; (8004c30 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8004bec:	e002      	b.n	8004bf4 <LoopFillZerobss>

08004bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004bee:	2300      	movs	r3, #0
  str  r3, [r2]
 8004bf0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bf2:	3204      	adds	r2, #4

08004bf4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004bf4:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <LoopForever+0x2e>)
  cmp  r2, r3
 8004bf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bf8:	d3f9      	bcc.n	8004bee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004bfa:	f7ff ff9f 	bl	8004b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bfe:	f000 f81d 	bl	8004c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c02:	f7ff faed 	bl	80041e0 <main>

08004c06 <LoopForever>:

LoopForever:
    b LoopForever
 8004c06:	e7fe      	b.n	8004c06 <LoopForever>
   ldr   r0, =_estack
 8004c08:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8004c0c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004c10:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8004c14:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8004c18:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004c1c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004c20:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8004c24:	08004d28 	.word	0x08004d28
  ldr  r0, =_sdata
 8004c28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c2c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8004c30:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8004c34:	20000280 	.word	0x20000280

08004c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c38:	e7fe      	b.n	8004c38 <ADC1_IRQHandler>
	...

08004c3c <__libc_init_array>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	2600      	movs	r6, #0
 8004c40:	4d0c      	ldr	r5, [pc, #48]	; (8004c74 <__libc_init_array+0x38>)
 8004c42:	4c0d      	ldr	r4, [pc, #52]	; (8004c78 <__libc_init_array+0x3c>)
 8004c44:	1b64      	subs	r4, r4, r5
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	42a6      	cmp	r6, r4
 8004c4a:	d109      	bne.n	8004c60 <__libc_init_array+0x24>
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	f000 f821 	bl	8004c94 <_init>
 8004c52:	4d0a      	ldr	r5, [pc, #40]	; (8004c7c <__libc_init_array+0x40>)
 8004c54:	4c0a      	ldr	r4, [pc, #40]	; (8004c80 <__libc_init_array+0x44>)
 8004c56:	1b64      	subs	r4, r4, r5
 8004c58:	10a4      	asrs	r4, r4, #2
 8004c5a:	42a6      	cmp	r6, r4
 8004c5c:	d105      	bne.n	8004c6a <__libc_init_array+0x2e>
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	00b3      	lsls	r3, r6, #2
 8004c62:	58eb      	ldr	r3, [r5, r3]
 8004c64:	4798      	blx	r3
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7ee      	b.n	8004c48 <__libc_init_array+0xc>
 8004c6a:	00b3      	lsls	r3, r6, #2
 8004c6c:	58eb      	ldr	r3, [r5, r3]
 8004c6e:	4798      	blx	r3
 8004c70:	3601      	adds	r6, #1
 8004c72:	e7f2      	b.n	8004c5a <__libc_init_array+0x1e>
 8004c74:	08004d20 	.word	0x08004d20
 8004c78:	08004d20 	.word	0x08004d20
 8004c7c:	08004d20 	.word	0x08004d20
 8004c80:	08004d24 	.word	0x08004d24

08004c84 <memset>:
 8004c84:	0003      	movs	r3, r0
 8004c86:	1812      	adds	r2, r2, r0
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d100      	bne.n	8004c8e <memset+0xa>
 8004c8c:	4770      	bx	lr
 8004c8e:	7019      	strb	r1, [r3, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	e7f9      	b.n	8004c88 <memset+0x4>

08004c94 <_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_fini>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr
